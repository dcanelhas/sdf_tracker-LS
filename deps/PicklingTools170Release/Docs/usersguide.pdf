%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
% 'BasicFonts': class PDFDictionary 
1 0 obj
% The standard fonts dictionary
<< /F1 2 0 R
 /F2 3 0 R
 /F3 4 0 R
 /F4 5 0 R
 /F5 11 0 R
 /F6 13 0 R >>
endobj
% 'F1': class PDFType1Font 
2 0 obj
% Font Helvetica
<< /BaseFont /Helvetica
 /Encoding /WinAnsiEncoding
 /Name /F1
 /Subtype /Type1
 /Type /Font >>
endobj
% 'F2': class PDFType1Font 
3 0 obj
% Font Helvetica-Bold
<< /BaseFont /Helvetica-Bold
 /Encoding /WinAnsiEncoding
 /Name /F2
 /Subtype /Type1
 /Type /Font >>
endobj
% 'F3': class PDFType1Font 
4 0 obj
% Font Helvetica-Oblique
<< /BaseFont /Helvetica-Oblique
 /Encoding /WinAnsiEncoding
 /Name /F3
 /Subtype /Type1
 /Type /Font >>
endobj
% 'F4': class PDFType1Font 
5 0 obj
% Font Courier
<< /BaseFont /Courier
 /Encoding /WinAnsiEncoding
 /Name /F4
 /Subtype /Type1
 /Type /Font >>
endobj
% 'Page1': class PDFPage 
6 0 obj
% Page dictionary
<< /Contents 90 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Annot.NUMBER1': class PDFDictionary 
7 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://json.org) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 458.9629
 753.7736
 519.5529
 765.7736 ]
 /Subtype /Link
 /Type /Annot >>
endobj
% 'Page2': class PDFPage 
8 0 obj
% Page dictionary
<< /Annots [ 7 0 R ]
 /Contents 91 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page3': class PDFPage 
9 0 obj
% Page dictionary
<< /Contents 92 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page4': class PDFPage 
10 0 obj
% Page dictionary
<< /Contents 93 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'F5': class PDFType1Font 
11 0 obj
% Font Helvetica-BoldOblique
<< /BaseFont /Helvetica-BoldOblique
 /Encoding /WinAnsiEncoding
 /Name /F5
 /Subtype /Type1
 /Type /Font >>
endobj
% 'Page5': class PDFPage 
12 0 obj
% Page dictionary
<< /Contents 94 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'F6': class PDFType1Font 
13 0 obj
% Font Courier-Bold
<< /BaseFont /Courier-Bold
 /Encoding /WinAnsiEncoding
 /Name /F6
 /Subtype /Type1
 /Type /Font >>
endobj
% 'Page6': class PDFPage 
14 0 obj
% Page dictionary
<< /Contents 95 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page7': class PDFPage 
15 0 obj
% Page dictionary
<< /Contents 96 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page8': class PDFPage 
16 0 obj
% Page dictionary
<< /Contents 97 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page9': class PDFPage 
17 0 obj
% Page dictionary
<< /Contents 98 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page10': class PDFPage 
18 0 obj
% Page dictionary
<< /Contents 99 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page11': class PDFPage 
19 0 obj
% Page dictionary
<< /Contents 100 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page12': class PDFPage 
20 0 obj
% Page dictionary
<< /Contents 101 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page13': class PDFPage 
21 0 obj
% Page dictionary
<< /Contents 102 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page14': class PDFPage 
22 0 obj
% Page dictionary
<< /Contents 103 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page15': class PDFPage 
23 0 obj
% Page dictionary
<< /Contents 104 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page16': class PDFPage 
24 0 obj
% Page dictionary
<< /Contents 105 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page17': class PDFPage 
25 0 obj
% Page dictionary
<< /Contents 106 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page18': class PDFPage 
26 0 obj
% Page dictionary
<< /Contents 107 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page19': class PDFPage 
27 0 obj
% Page dictionary
<< /Contents 108 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page20': class PDFPage 
28 0 obj
% Page dictionary
<< /Contents 109 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page21': class PDFPage 
29 0 obj
% Page dictionary
<< /Contents 110 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page22': class PDFPage 
30 0 obj
% Page dictionary
<< /Contents 111 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page23': class PDFPage 
31 0 obj
% Page dictionary
<< /Contents 112 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page24': class PDFPage 
32 0 obj
% Page dictionary
<< /Contents 113 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page25': class PDFPage 
33 0 obj
% Page dictionary
<< /Contents 114 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page26': class PDFPage 
34 0 obj
% Page dictionary
<< /Contents 115 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page27': class PDFPage 
35 0 obj
% Page dictionary
<< /Contents 116 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page28': class PDFPage 
36 0 obj
% Page dictionary
<< /Contents 117 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page29': class PDFPage 
37 0 obj
% Page dictionary
<< /Contents 118 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page30': class PDFPage 
38 0 obj
% Page dictionary
<< /Contents 119 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page31': class PDFPage 
39 0 obj
% Page dictionary
<< /Contents 120 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page32': class PDFPage 
40 0 obj
% Page dictionary
<< /Contents 121 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Annot.NUMBER2': class PDFDictionary 
41 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://picklingtools.com) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 183.5529
 423.5736
 287.4829
 435.5736 ]
 /Subtype /Link
 /Type /Annot >>
endobj
% 'Page33': class PDFPage 
42 0 obj
% Page dictionary
<< /Annots [ 41 0 R ]
 /Contents 122 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page34': class PDFPage 
43 0 obj
% Page dictionary
<< /Contents 123 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page35': class PDFPage 
44 0 obj
% Page dictionary
<< /Contents 124 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page36': class PDFPage 
45 0 obj
% Page dictionary
<< /Contents 125 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page37': class PDFPage 
46 0 obj
% Page dictionary
<< /Contents 126 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 89 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'R47': class PDFCatalog 
47 0 obj
% Document Root
<< /Outlines 49 0 R
 /PageLabels 127 0 R
 /PageMode /UseNone
 /Pages 89 0 R
 /Type /Catalog >>
endobj
% 'R48': class PDFInfo 
48 0 obj
<< /Author ()
 /CreationDate (D:20161222085031+07'00')
 /Creator (\(unspecified\))
 /Keywords ()
 /Producer (ReportLab PDF Library - www.reportlab.com)
 /Subject (\(unspecified\))
 /Title (The PicklingTools 1.7.0 User's Guide) >>
endobj
% 'R49': class PDFOutlines 
49 0 obj
<< /Count 44
 /First 50 0 R
 /Last 88 0 R
 /Type /Outlines >>
endobj
% 'Outline.0': class OutlineEntryObject 
50 0 obj
<< /Dest [ 6 0 R
 /XYZ
 62.69291
 729.0236
 0 ]
 /Next 51 0 R
 /Parent 49 0 R
 /Title (Introduction) >>
endobj
% 'Outline.1': class OutlineEntryObject 
51 0 obj
<< /Dest [ 8 0 R
 /XYZ
 62.69291
 723.0236
 0 ]
 /Next 52 0 R
 /Parent 49 0 R
 /Prev 50 0 R
 /Title (Formats) >>
endobj
% 'Outline.2': class OutlineEntryObject 
52 0 obj
<< /Dest [ 9 0 R
 /XYZ
 62.69291
 681.0236
 0 ]
 /Next 53 0 R
 /Parent 49 0 R
 /Prev 51 0 R
 /Title (Media) >>
endobj
% 'Outline.3': class OutlineEntryObject 
53 0 obj
<< /Dest [ 9 0 R
 /XYZ
 62.69291
 396.0236
 0 ]
 /Next 54 0 R
 /Parent 49 0 R
 /Prev 52 0 R
 /Title (Conclusion...But Keep Reading!) >>
endobj
% 'Outline.4': class OutlineEntryObject 
54 0 obj
<< /Count 8
 /Dest [ 10 0 R
 /XYZ
 62.69291
 765.0236
 0 ]
 /First 55 0 R
 /Last 62 0 R
 /Next 63 0 R
 /Parent 49 0 R
 /Prev 53 0 R
 /Title (The Python Experience) >>
endobj
% 'Outline.40.0': class OutlineEntryObject 
55 0 obj
<< /Dest [ 10 0 R
 /XYZ
 62.69291
 540.8236
 0 ]
 /Next 56 0 R
 /Parent 54 0 R
 /Title (Files) >>
endobj
% 'Outline.40.1': class OutlineEntryObject 
56 0 obj
<< /Count 3
 /Dest [ 12 0 R
 /XYZ
 62.69291
 268.4665
 0 ]
 /First 57 0 R
 /Last 59 0 R
 /Next 60 0 R
 /Parent 54 0 R
 /Prev 55 0 R
 /Title (Sockets) >>
endobj
% 'Outline.41.0': class OutlineEntryObject 
57 0 obj
<< /Dest [ 12 0 R
 /XYZ
 62.69291
 238.4665
 0 ]
 /Next 58 0 R
 /Parent 56 0 R
 /Title (MidasTalker: TCP/IP client) >>
endobj
% 'Outline.41.1': class OutlineEntryObject 
58 0 obj
<< /Dest [ 14 0 R
 /XYZ
 62.69291
 281.4236
 0 ]
 /Next 59 0 R
 /Parent 56 0 R
 /Prev 57 0 R
 /Title (MidasServer: TCP/IP server) >>
endobj
% 'Outline.41.2': class OutlineEntryObject 
59 0 obj
<< /Dest [ 15 0 R
 /XYZ
 62.69291
 347.8236
 0 ]
 /Parent 56 0 R
 /Prev 58 0 R
 /Title (MidasYeller and MidasListener: UDP) >>
endobj
% 'Outline.40.2': class OutlineEntryObject 
60 0 obj
<< /Dest [ 15 0 R
 /XYZ
 62.69291
 242.8236
 0 ]
 /Next 61 0 R
 /Parent 54 0 R
 /Prev 56 0 R
 /Title (Pretty Printing) >>
endobj
% 'Outline.40.3': class OutlineEntryObject 
61 0 obj
<< /Dest [ 17 0 R
 /XYZ
 62.69291
 667.8236
 0 ]
 /Next 62 0 R
 /Parent 54 0 R
 /Prev 60 0 R
 /Title (Binary Formats) >>
endobj
% 'Outline.40.4': class OutlineEntryObject 
62 0 obj
<< /Dest [ 18 0 R
 /XYZ
 62.69291
 765.0236
 0 ]
 /Parent 54 0 R
 /Prev 61 0 R
 /Title (Conclusion to the Python Experience) >>
endobj
% 'Outline.5': class OutlineEntryObject 
63 0 obj
<< /Count 2
 /Dest [ 18 0 R
 /XYZ
 62.69291
 577.8236
 0 ]
 /First 64 0 R
 /Last 65 0 R
 /Next 66 0 R
 /Parent 49 0 R
 /Prev 54 0 R
 /Title (The XMPY Experience) >>
endobj
% 'Outline.42.0': class OutlineEntryObject 
64 0 obj
<< /Dest [ 18 0 R
 /XYZ
 62.69291
 502.8236
 0 ]
 /Next 65 0 R
 /Parent 63 0 R
 /Title (Numeric or NumPy) >>
endobj
% 'Outline.42.1': class OutlineEntryObject 
65 0 obj
<< /Dest [ 19 0 R
 /XYZ
 62.69291
 399.6236
 0 ]
 /Parent 63 0 R
 /Prev 64 0 R
 /Title (ArrayDisposition) >>
endobj
% 'Outline.6': class OutlineEntryObject 
66 0 obj
<< /Count 17
 /Dest [ 20 0 R
 /XYZ
 62.69291
 510.6236
 0 ]
 /First 67 0 R
 /Last 83 0 R
 /Next 84 0 R
 /Parent 49 0 R
 /Prev 63 0 R
 /Title (The C++ Experience) >>
endobj
% 'Outline.43.0': class OutlineEntryObject 
67 0 obj
<< /Dest [ 20 0 R
 /XYZ
 62.69291
 309.6236
 0 ]
 /Next 68 0 R
 /Parent 66 0 R
 /Title (Files) >>
endobj
% 'Outline.43.1': class OutlineEntryObject 
68 0 obj
<< /Dest [ 22 0 R
 /XYZ
 62.69291
 549.8236
 0 ]
 /Next 69 0 R
 /Parent 66 0 R
 /Prev 67 0 R
 /Title (OpenContainers) >>
endobj
% 'Outline.43.2': class OutlineEntryObject 
69 0 obj
<< /Dest [ 24 0 R
 /XYZ
 62.69291
 623.8236
 0 ]
 /Next 70 0 R
 /Parent 66 0 R
 /Prev 68 0 R
 /Title (Val and Conversions) >>
endobj
% 'Outline.43.3': class OutlineEntryObject 
70 0 obj
<< /Dest [ 25 0 R
 /XYZ
 62.69291
 549.4236
 0 ]
 /Next 71 0 R
 /Parent 66 0 R
 /Prev 69 0 R
 /Title (C++ Arrs and Python Lists) >>
endobj
% 'Outline.43.4': class OutlineEntryObject 
71 0 obj
<< /Dest [ 26 0 R
 /XYZ
 62.69291
 211.8236
 0 ]
 /Next 72 0 R
 /Parent 66 0 R
 /Prev 70 0 R
 /Title (C++ Tabs and Python Dictionaries) >>
endobj
% 'Outline.43.5': class OutlineEntryObject 
72 0 obj
<< /Dest [ 28 0 R
 /XYZ
 62.69291
 546.6236
 0 ]
 /Next 73 0 R
 /Parent 66 0 R
 /Prev 71 0 R
 /Title (Nested Lookup and Assignment) >>
endobj
% 'Outline.43.6': class OutlineEntryObject 
73 0 obj
<< /Count 2
 /Dest [ 28 0 R
 /XYZ
 62.69291
 361.4236
 0 ]
 /First 74 0 R
 /Last 75 0 R
 /Next 76 0 R
 /Parent 66 0 R
 /Prev 72 0 R
 /Title (Tricks and Tips for Efficient Tab and Arr Usage) >>
endobj
% 'Outline.44.0': class OutlineEntryObject 
74 0 obj
<< /Dest [ 29 0 R
 /XYZ
 62.69291
 699.0236
 0 ]
 /Next 75 0 R
 /Parent 73 0 R
 /Title (Copying) >>
endobj
% 'Outline.44.1': class OutlineEntryObject 
75 0 obj
<< /Dest [ 29 0 R
 /XYZ
 62.69291
 145.6236
 0 ]
 /Parent 73 0 R
 /Prev 74 0 R
 /Title (References:) >>
endobj
% 'Outline.43.7': class OutlineEntryObject 
76 0 obj
<< /Dest [ 31 0 R
 /XYZ
 62.69291
 626.6236
 0 ]
 /Next 77 0 R
 /Parent 66 0 R
 /Prev 73 0 R
 /Title (C++ OTab and the Python OrderedDict) >>
endobj
% 'Outline.43.8': class OutlineEntryObject 
77 0 obj
<< /Dest [ 32 0 R
 /XYZ
 62.69291
 337.4236
 0 ]
 /Next 78 0 R
 /Parent 66 0 R
 /Prev 76 0 R
 /Title (C++ int_n and the Python arbitrary size ints \(long\)) >>
endobj
% 'Outline.43.9': class OutlineEntryObject 
78 0 obj
<< /Dest [ 33 0 R
 /XYZ
 62.69291
 481.4236
 0 ]
 /Next 79 0 R
 /Parent 66 0 R
 /Prev 77 0 R
 /Title (C++ Tup and Python Tuples) >>
endobj
% 'Outline.43.10': class OutlineEntryObject 
79 0 obj
<< /Dest [ 34 0 R
 /XYZ
 62.69291
 707.8236
 0 ]
 /Next 80 0 R
 /Parent 66 0 R
 /Prev 78 0 R
 /Title (C++ and cx_t) >>
endobj
% 'Outline.43.11': class OutlineEntryObject 
80 0 obj
<< /Dest [ 34 0 R
 /XYZ
 62.69291
 581.8236
 0 ]
 /Next 81 0 R
 /Parent 66 0 R
 /Prev 79 0 R
 /Title (Sockets) >>
endobj
% 'Outline.43.12': class OutlineEntryObject 
81 0 obj
<< /Dest [ 34 0 R
 /XYZ
 62.69291
 324.6236
 0 ]
 /Next 82 0 R
 /Parent 66 0 R
 /Prev 80 0 R
 /Title (JSON) >>
endobj
% 'Outline.43.13': class OutlineEntryObject 
82 0 obj
<< /Dest [ 35 0 R
 /XYZ
 62.69291
 588.6236
 0 ]
 /Next 83 0 R
 /Parent 66 0 R
 /Prev 81 0 R
 /Title (HTTPClient and HTTPServer) >>
endobj
% 'Outline.43.14': class OutlineEntryObject 
83 0 obj
<< /Dest [ 35 0 R
 /XYZ
 62.69291
 414.6236
 0 ]
 /Parent 66 0 R
 /Prev 82 0 R
 /Title (Conformance Checking) >>
endobj
% 'Outline.7': class OutlineEntryObject 
84 0 obj
<< /Dest [ 42 0 R
 /XYZ
 62.69291
 473.8236
 0 ]
 /Next 85 0 R
 /Parent 49 0 R
 /Prev 66 0 R
 /Title (Java) >>
endobj
% 'Outline.8': class OutlineEntryObject 
85 0 obj
<< /Dest [ 42 0 R
 /XYZ
 62.69291
 380.8236
 0 ]
 /Next 86 0 R
 /Parent 49 0 R
 /Prev 84 0 R
 /Title (The X-Midas PTOOLS Experience) >>
endobj
% 'Outline.9': class OutlineEntryObject 
86 0 obj
<< /Dest [ 43 0 R
 /XYZ
 62.69291
 765.0236
 0 ]
 /Next 87 0 R
 /Parent 49 0 R
 /Prev 85 0 R
 /Title (The Midas 2k Experience) >>
endobj
% 'Outline.10': class OutlineEntryObject 
87 0 obj
<< /Dest [ 43 0 R
 /XYZ
 62.69291
 446.0236
 0 ]
 /Next 88 0 R
 /Parent 49 0 R
 /Prev 86 0 R
 /Title (The Final Experience) >>
endobj
% 'Outline.11': class OutlineEntryObject 
88 0 obj
<< /Dest [ 43 0 R
 /XYZ
 62.69291
 329.0236
 0 ]
 /Parent 49 0 R
 /Prev 87 0 R
 /Title (Appendix A:  C++ and User-Defined Types) >>
endobj
% 'R89': class PDFPages 
89 0 obj
% page tree
<< /Count 37
 /Kids [ 6 0 R
 8 0 R
 9 0 R
 10 0 R
 12 0 R
 14 0 R
 15 0 R
 16 0 R
 17 0 R
 18 0 R
 19 0 R
 20 0 R
 21 0 R
 22 0 R
 23 0 R
 24 0 R
 25 0 R
 26 0 R
 27 0 R
 28 0 R
 29 0 R
 30 0 R
 31 0 R
 32 0 R
 33 0 R
 34 0 R
 35 0 R
 36 0 R
 37 0 R
 38 0 R
 39 0 R
 40 0 R
 42 0 R
 43 0 R
 44 0 R
 45 0 R
 46 0 R ]
 /Type /Pages >>
endobj
% 'R90': class PDFStream 
90 0 obj
% page stream
<< /Length 8841 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 60.27488 0 Td (The PicklingTools 1.7.0 User's Guide) Tj T* -60.27488 0 Td ET
Q
Q
q
1 0 0 1 62.69291 708.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Introduction) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 666.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .571235 Tw (The PicklingTools distribution is an Open Source package of tools to allow systems written in the Python) Tj T* 0 Tw 2.74816 Tw (Language and/or the C++ Programming Language to exchange information easily. \(Recently, some) Tj T* 0 Tw (support for Java has been added as well\) It allows:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 660.0236 cm
Q
q
1 0 0 1 62.69291 426.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 228 cm
Q
q
1 0 0 1 20 228 cm
Q
q
1 0 0 1 20 180 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Socket communications) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 15 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (UDP \(for speed\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (TCP/IP \(for reliability\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 20 174 cm
Q
q
1 0 0 1 20 54 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 105 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 105 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Multiple file formats) Tj T* ET
Q
Q
q
1 0 0 1 23 99 cm
Q
q
1 0 0 1 23 99 cm
Q
q
1 0 0 1 23 87 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (text \(for readability\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 81 cm
Q
q
1 0 0 1 23 69 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (binary \(for speed\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 63 cm
Q
q
1 0 0 1 23 51 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (older Python formats \(for compatibility\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 45 cm
Q
q
1 0 0 1 23 33 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (older Midas 2K formats: OpalTable \(for legacy\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 15 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (JSON \(for ubiquity\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (XML \(for modern systems\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Support for Shared Memory) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 15 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Processes related by inheritance) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Processes unrelated) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 426.0236 cm
Q
q
1 0 0 1 62.69291 348.0236 cm
q
BT 1 0 0 1 0 62 Tm .964104 Tw 12 TL /F1 10 Tf 0 0 0 rg (Historically, the PicklingTools was a collection of tools to allow non-Midas 2k clients to talk to a popular) Tj T* 0 Tw .570542 Tw (software package written in Midas 2k \(Midas 2k is a legacy framework\). Since then, it has evolved into a) Tj T* 0 Tw 2.13311 Tw (full-fledged set of client/server and file tools to allow any C++ and Python applications to talk easily) Tj T* 0 Tw .964692 Tw (\(whether they be raw C++, raw Python, Midas 2k, X-Midas C++ Primitives, or XMPY\). ) Tj /F3 10 Tf (It is worth noting) Tj T* 0 Tw .29436 Tw (that the PicklingTools is not tied to any particular framework, the PicklingTools libraries are plain C++ and) Tj T* 0 Tw (Python code that any system can use. ) Tj /F1 10 Tf (Java support is new as of PicklingTools 1.5.1.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 332.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (For example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 257.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 62 Tm  T* ET
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 42 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.53332 Tw (Users who don't care about Midas: A client written in raw C++ and a client written as a raw) Tj T* 0 Tw (Python script can both talk to server written in raw C++.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 36 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .744431 Tw (Users in the Midas world: An client written in XMPY \(Python\) and a client written in C++ as an) Tj T* 0 Tw 4.665366 Tw (X-Midas primitive could both talk to an Midas 2k server \(OpalDaemon or better yet,) Tj T* 0 Tw (OpalPythonDaemon\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 239.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The PicklingTools facilitates Python and C++ and Java applications communicating.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 209.0236 cm
q
BT 1 0 0 1 0 14 Tm 1.56784 Tw 12 TL /F1 10 Tf 0 0 0 rg (All communication \(via sockets or files\) is done via ) Tj /F3 10 Tf (Python dictionaries) Tj /F1 10 Tf (. An example Python dictionary) Tj T* 0 Tw (looks like:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 151.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL ({'Request': { 'PING': {'TimeOut': 5.5, 'PORTS':[88, 89]} } } # Text format) Tj T*  T* (Figure 1:  An example of a Python dictionary in text format) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 83.82362 cm
q
BT 1 0 0 1 0 50 Tm .502485 Tw 12 TL /F1 10 Tf 0 0 0 rg (A dictionary is essentially a collection of key-value pairs where the values can be integers, real numbers, ) Tj T* 0 Tw 3.30816 Tw (arrays or other dictionaries. Another phrase that describes Python dictionaries: dynamic, recursive ) Tj T* 0 Tw .293555 Tw (\(because it can contain other dictionaries\), heterogeneous \(because it can contain many types of objects\) ) Tj T* 0 Tw .949147 Tw (collections. Python dictionaries provide very similar functionality to XML formats, but Python dictionaries ) Tj T* 0 Tw 2.932485 Tw (tend to be easier to read and manipulate. In fact, the JSON \(JavaScript Object Notation\) is fairly) Tj T* 0 Tw ET
Q
Q
 
endstream
endobj
% 'R91': class PDFStream 
91 0 obj
% page stream
<< /Length 8714 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (backwards compatible with Python Dictionaries and is a competing standard to XML \(see ) Tj 0 0 .501961 rg (http://json.org) Tj 0 0 0 rg (\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 735.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Python dictionaries are the ) Tj /F3 10 Tf (currency ) Tj /F1 10 Tf (of the PicklingTools.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 702.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Formats) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .57186 Tw (The PicklingTools allow Python dictionaries to be exchanged in two major formats: text or binary \(In fact,) Tj T* 0 Tw 1.544651 Tw (the reason this distribution is named "PicklingTools" is because the major binary format in Python are) Tj T* 0 Tw .039986 Tw ("pickled" dictionaries\). Text \(like Figure 1\) is a good human readable and editable format. It's easy to read,) Tj T* 0 Tw .186353 Tw (but tends to be slower to exchange in a file or over a socket. The binary format tends to be much faster to) Tj T* 0 Tw 1.54332 Tw (exchange in a file or over a socket, but it's harder to read/write without special editors. The choice of) Tj T* 0 Tw (serialization really depends on your constraints.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 618.0236 cm
Q
q
1 0 0 1 62.69291 207.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 405 cm
Q
q
1 0 0 1 20 405 cm
Q
q
1 0 0 1 20 285 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 105 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 105 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Text: There are four "human readable" formats:) Tj T* ET
Q
Q
q
1 0 0 1 23 99 cm
Q
q
1 0 0 1 23 15 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 78 cm
Q
q
1 0 0 1 20 78 cm
Q
q
1 0 0 1 20 66 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (Python Dictionaries: ) Tj /F1 10 Tf (the standard Python dictionary) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.401797 Tw 12 TL /F2 10 Tf 0 0 0 rg (Midas 2k OpalTables: ) Tj /F1 10 Tf (A stovepipe construction from Midas 2K that mirrors Python) Tj T* 0 Tw (Dictionaries.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (JSON: ) Tj /F1 10 Tf (A world-wide standard for recursive, heterogeneous containers) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (XML: ) Tj /F1 10 Tf (A world-wide standard for recursive, heterogeneous containers) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 23 15 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are tools in both Python and C++ to read/write both formats.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 279 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 264 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 264 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Binary: There are a myriad of choices for Binary Serialization, in order) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 254 Tm  T* ET
q
1 0 0 1 20 258 cm
Q
q
1 0 0 1 20 246 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (from fastest to slowest:) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 246 cm
Q
q
1 0 0 1 20 240 cm
Q
q
1 0 0 1 20 240 cm
Q
q
1 0 0 1 20 192 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm 1.345529 Tw 12 TL /F2 10 Tf 0 0 0 rg (OpenContainers Serialization: ) Tj /F1 10 Tf (This format exists only inside the PicklingTools and) Tj T* 0 Tw 1.908443 Tw (has been specialized for the C++ components. If you want absolute speed, this is) Tj T* 0 Tw .940697 Tw (probably the fastest format. New! As of PicklingTools 1.6.0, there is now a Python C) Tj T* 0 Tw (Extension module for this.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 186 cm
Q
q
1 0 0 1 20 138 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm .973059 Tw 12 TL /F2 10 Tf 0 0 0 rg (Python Pickling Protocol 2: ) Tj /F1 10 Tf (This is a binary serialization that Python has built-in. If) Tj T* 0 Tw .074597 Tw (most of your communications are with Python systems, this is probably the best format) Tj T* 0 Tw 2.507674 Tw (as Python understands it natively and it is just about as fast as OpenContainers) Tj T* 0 Tw (serialization.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 132 cm
Q
q
1 0 0 1 20 108 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .203828 Tw 12 TL /F2 10 Tf 0 0 0 rg (Midas 2k Serialization: ) Tj /F1 10 Tf (This is the binary serialization taken directly from Midas 2K. If) Tj T* 0 Tw (you need to talk to legacy Midas 2k applications, this is a good, fast choice.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 102 cm
Q
q
1 0 0 1 20 66 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm 1.40229 Tw 12 TL /F2 10 Tf 0 0 0 rg (Python Pickling Protocol 2 for Python 2.2: ) Tj /F1 10 Tf (This is Protocol 2 as implemented by) Tj T* 0 Tw 1.816976 Tw (Python 2.2. Python interpreters above version 2.2 implement this differently. ONLY) Tj T* 0 Tw (USE this if you have to talk to a Python interpreter that MUST BE 2.2.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 60 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 50 Tm 1.240814 Tw 12 TL /F2 10 Tf 0 0 0 rg (Python Pickling Protocol 0: ) Tj /F1 10 Tf (Strictly speaking, this is an ASCII format \(7-bit clean\),) Tj T* 0 Tw 1.063318 Tw (but not nearly as readable as the textual formats. This is by far the most backwards) Tj T* 0 Tw 1.60748 Tw (compatible format, as all Pythons of interest seem to understand this protocol well.) Tj T* 0 Tw .20229 Tw (This is the default of most components in PicklingTools for compatibility reasons, but it) Tj T* 0 Tw (definitely not the fastest.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 207.0236 cm
Q
q
1 0 0 1 62.69291 153.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .242927 Tw (Your choice of protocol will frequently be dictated by the components involved in your system. If you must) Tj T* 0 Tw 1.141654 Tw (talk to a legacy M2k application that can't be changed, M2k serialization is your only choice. If you are) Tj T* 0 Tw 1.452339 Tw (using Python in your system, you are probably constrained to use Pickling Protocol 0 or 2 \(as Python) Tj T* 0 Tw (currently doesn't understand OpenContainers or Midas 2k serialization\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 99.02362 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .832651 Tw (Serializations can also mix-and-match as needed: if the majority of a system is in C++, OpenContainers) Tj T* 0 Tw 4.25229 Tw (serialization is probably the best choice when possible, with selectively chosen Python or M2k) Tj T* 0 Tw .01998 Tw (serialization when needed. Many people choose the text format \(eschewing binary serialization altogether\)) Tj T* 0 Tw (for transparency.) Tj T* ET
Q
Q
 
endstream
endobj
% 'R92': class PDFStream 
92 0 obj
% page stream
<< /Length 6583 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 693.0236 cm
q
BT 1 0 0 1 0 62 Tm 1.942339 Tw 12 TL /F1 10 Tf 0 0 0 rg (One other note: The C++ versions of the socket clients and servers \(this includes the Midas 2k and) Tj T* 0 Tw .616412 Tw (X-Midas Primitives\) use ) Tj /F3 10 Tf (adaptive ) Tj /F1 10 Tf (serializations: This means on a per-client basis, the servers and clients) Tj T* 0 Tw 1.090651 Tw (can recognize different serializations. In other words, a C++ server can simultaneously talk to a Python) Tj T* 0 Tw 1.59811 Tw (client using Protocol 2 and a M2k client using M2k serialization. The Python servers and clients don't) Tj T* 0 Tw 4.466647 Tw (currently support adaptive serialization because they are very much constrained to their native) Tj T* 0 Tw (serialization \(for example: Python 2.2 supports a different version of Protocol 2 than Python 2.3, 2.4, etc.\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 660.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Media) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 606.0236 cm
q
BT 1 0 0 1 0 38 Tm 1.02561 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are two major ways to communicate with the PicklingTools: via files or over sockets from Python) Tj T* 0 Tw .574987 Tw (and C++ \(and Java to a lesser extent\). ) Tj /F3 10 Tf (NOTE: Whenever we say "Python and C++", we mean the whole) Tj T* 0 Tw 1.646136 Tw (range of systems supported directly: XMPY, X-Midas C++ primitives, Midas 2K C++ components, raw) Tj T* 0 Tw (C++, raw Python.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 564.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.074104 Tw (A file can be read/written using any of the the formats \(within a few constraints\) described from the) Tj T* 0 Tw .258876 Tw (previous section: This can be done from Python and C++ and Java. See later sections for example of this) Tj T* 0 Tw (within C++, Python, etc.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 546.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can also build socket servers and clients from Python and C++ and Java:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 540.0236 cm
Q
q
1 0 0 1 62.69291 426.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 90 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .939069 Tw (The MidasTalker/MidasServer pair are TCP/IP \(respectively\) clients and servers. The same classes) Tj T* 0 Tw (exist in both C++ and Python and they have very similar interfaces.) Tj T* ET
Q
Q
q
1 0 0 1 20 60 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.595433 Tw (The MidasListener/MidasYeller pair are UDP \(respectively\) clients and servers. The same classes) Tj T* 0 Tw (exist in both C++ and Python and they have very similar interfaces.) Tj T* ET
Q
Q
q
1 0 0 1 20 30 cm
q
BT 1 0 0 1 0 14 Tm 1.30229 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (OpalPythonDaemon ) Tj /F1 10 Tf (is the Midas 2K equivalent of the MidasServer. This replaces the original) Tj T* 0 Tw (OpalDaemon, but is still backwards compatible with OpalDaemon.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm 3.49498 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (OpalPythonSocketMsg ) Tj /F1 10 Tf (is the Midas 2K equivalent of the MidasTalker. This replaces the) Tj T* 0 Tw (OpalSocketMsg component, but is still backwards compatible with OpalSocketMsg.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 426.0236 cm
Q
q
1 0 0 1 62.69291 408.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There will be more discussion and full examples later in this document.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 375.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Conclusion...But Keep Reading!) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 321.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .017209 Tw (The primary major goal of the PicklingTools is to allow users to talk to legacy systems \(X-Midas, Midas 2k\)) Tj T* 0 Tw 1.289986 Tw (from systems written in Python or C++ or Java. This has been accomplished: a number of users have) Tj T* 0 Tw .216098 Tw (been able to interface to legacy systems. [This is also the reason we didn't consider Twisted as a network) Tj T* 0 Tw (communication system: it didn't support the legacy protocol, and it seems to be Python only].) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 267.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .042619 Tw (A later major goal was to allow C++ and Python \(and later Java\) systems to interact easily. In other words,) Tj T* 0 Tw .104751 Tw (even if you don't have a legacy system that you must talk to, the tools provided here still allow you to build) Tj T* 0 Tw 2.37686 Tw (new systems out of both C++ and Python pieces and have them communicate easily \(over files or) Tj T* 0 Tw (sockets\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 189.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .229431 Tw (A minor goal of the PicklingTools was to allow the C++ experience to be similar to the Python experience,) Tj T* 0 Tw .074987 Tw (yet still allow threads in a C++ system. Anyone who wishes to use threads from Python knows that Python) Tj T* 0 Tw .127674 Tw (\(at least CPython, the most prevalent Python implementation\) doesn't support truly concurrent threads. To) Tj T* 0 Tw .413555 Tw (this end, the OpenContainers library has been provided within the distribution: It provides abstractions for) Tj T* 0 Tw .064104 Tw (both threads and dictionaries within C++. [This is also the reason we don't just embed a Python interpreter) Tj T* 0 Tw (directly within C++ to get a "Python-like" experience: The interpreter doesn't support concurrent threads. ]) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 171.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This minor goal now extends to Java: the Python dictionary is fairly easy to manipulate in Java.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 129.0236 cm
q
BT 1 0 0 1 0 26 Tm .772093 Tw 12 TL /F1 10 Tf 0 0 0 rg (One other minor goal when using C++ is the ability to use ) Tj /F3 10 Tf (valgrind ) Tj /F1 10 Tf (and other such tools. Most tests and) Tj T* 0 Tw .79881 Tw (code in the framework should be valgrind-clean, and you should always be able to work with valgrind to) Tj T* 0 Tw (help you debug.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 99.02362 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.772765 Tw (The rest of this document gives examples for many of the tools provided herein. The full API for the) Tj T* 0 Tw (PicklingTools distribution is also included in the distribution, in the "Pickling API" document.) Tj T* ET
Q
Q
 
endstream
endobj
% 'R93': class PDFStream 
93 0 obj
% page stream
<< /Length 4679 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (The Python Experience) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 714.0236 cm
q
BT 1 0 0 1 0 14 Tm .332619 Tw 12 TL /F1 10 Tf 0 0 0 rg (Python is the easiest place to get started and get familiar with the tools. Just about everything we need is) Tj T* 0 Tw (built-in to Python: dictionaries, socket code \() Tj /F3 10 Tf (import socket) Tj /F1 10 Tf (\) and serialization code \() Tj /F3 10 Tf (import cPickle) Tj /F1 10 Tf (\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 684.0236 cm
q
BT 1 0 0 1 0 14 Tm .045868 Tw 12 TL /F1 10 Tf 0 0 0 rg (One minor goal of the Python experience for the PicklingTools is that ) Tj /F3 10 Tf (any ) Tj /F1 10 Tf (Python interpreter could just use) Tj T* 0 Tw (the PicklingTools:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 650.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import midastalker  # Make sure PicklingToolsXXX/Python on PYTHONPATH) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 582.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .22436 Tw (Done. All the PythonPickling tools are written in pure Python so they be imported directly without worrying) Tj T* 0 Tw .03311 Tw (about any unnatural dependencies. In other words, we didn't want to write any C extension modules which) Tj T* 0 Tw .01561 Tw (would cause issues with linking: Who builds the extension module? Which Python is it linked against? Can) Tj T* 0 Tw .53528 Tw (you even build on your machine? Luckily everything we need was built-in and fast enough to support the) Tj T* 0 Tw (Python PicklingTools. The NumPy or Numeric support may an issue: see the XMPY experience below.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 552.8236 cm
q
BT 1 0 0 1 0 14 Tm 2.269398 Tw 12 TL /F1 10 Tf 0 0 0 rg (Whether you are using Python that just comes on the machine or XMPY \(a version of Python built) Tj T* 0 Tw (explicitly for X-Midas\), you should just be able to ) Tj /F3 10 Tf (import ) Tj /F1 10 Tf (and it'll work. [Sidebar with PYTHONPATH?]) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 522.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Files) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 504.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Reading and Writing Python Dictionaries from Text Files:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 486.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This can be done with all built-in constructs. If we want "rfile" to contain a textual Python dictionary:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 345.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # Write out a text dict) Tj T* (>) Tj (>) Tj (>) Tj ( o = { 'a':1, 'b':2.2, 'c':'three' }   # dict to write) Tj T* (>) Tj (>) Tj (>) Tj ( f = file\('rfile', 'w'\)) Tj T* (>) Tj (>) Tj (>) Tj ( f.write\(repr\(o\)\)            # get the string representation to write) Tj T* (>) Tj (>) Tj (>) Tj ( f.close\(\)) Tj T*  T* (# The file 'rfile' contains text:  {'a':1, 'c':three', 'b':2.2 }) Tj T*  T* (>) Tj (>) Tj (>) Tj ( # Read in a text dict) Tj T* (>) Tj (>) Tj (>) Tj ( d = eval\(file\('rfile', 'r'\).read\(\)\)    # d has the dictionary) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 313.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.617633 Tw (The pretty module is very useful for writing dictionaries to files in a way that exposes the hierarchical) Tj T* 0 Tw (structure better than a plain repr. There is more discussion in a section below:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 88.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 216 re B*
Q
q
BT 1 0 0 1 0 194 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( o = {'a':1, 'b':{'nest': None} }) Tj T* (>) Tj (>) Tj (>) Tj ( import pretty) Tj T* (>) Tj (>) Tj (>) Tj ( pretty.pretty\(o\)       # Exposes nesting and structure: easier to read) Tj T* ({) Tj T* (    'a':1,) Tj T* (    'b':{) Tj T* (        'nest':None) Tj T* (    }) Tj T* (}) Tj T* (>) Tj (>) Tj (>) Tj ( f = file\('prettyout.txt', 'w'\)) Tj T* (>) Tj (>) Tj (>) Tj ( pretty.pretty\(o, f\)                 # Write out file pretty) Tj T* (>) Tj (>) Tj (>) Tj ( exit\(\)) Tj T* (% cat prettyout.txt) Tj T* ({) Tj T* (    'a':1,) Tj T* (    'b':{) Tj T* (        'nest':None) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R94': class PDFStream 
94 0 obj
% page stream
<< /Length 5113 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 707.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Note that the eval method still works for pretty printed dictionaries in files:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 650.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( d = eval\(file\('prettyout.txt', 'r'\).read\(\)\)) Tj T* (>) Tj (>) Tj (>) Tj ( print d) Tj T* ({'a': 1, 'b': {'nest': None}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 630.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Reading OpalTables from Text Files as Dictionaries:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 624.6236 cm
Q
q
1 0 0 1 62.69291 576.8374 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
.971265 0 0 .971265 0 0 cm
q
1 0 0 1 6.6 6.795265 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 462 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import opalfile    # Part of the PicklingTools distro, in Python subdir) Tj T* (>) Tj (>) Tj (>) Tj ( d = opalfile.readtable\('opaltextfilein.tbl'\)) Tj T* (*** Unfortunately, this currently only works if you are using XMPY) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 576.8374 cm
Q
q
1 0 0 1 62.69291 558.8374 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Writing Dictionaries to Text Files as OpalTables:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 552.8374 cm
Q
q
1 0 0 1 62.69291 503.7803 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
.997096 0 0 .997096 0 0 cm
q
1 0 0 1 6.6 6.619222 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 450 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import opalfile  # Part of the PicklingTools distro, in Python subdir) Tj T* (>) Tj (>) Tj (>) Tj ( opalfile.writetable\('opaltextfileout.tbl'\)) Tj T* (*** Unfortunately, this currently only works if you are using XMPY) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 503.7803 cm
Q
q
1 0 0 1 62.69291 473.7803 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .44061 Tw (The "opalfile.py" also contains code for reading and writing OpalFiles \(a large data binary file format from) Tj T* 0 Tw (M2k\). For more information, use the built-in help facility:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 428.5803 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import opalfile) Tj T* (>) Tj (>) Tj (>) Tj ( help\(opalfile\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 384.5803 cm
q
BT 1 0 0 1 0 26 Tm 2.427318 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (opalfile ) Tj /F1 10 Tf (module only works if you have Numeric \(which XMPY, a version of Python specifically) Tj T* 0 Tw .469985 Tw (compiled with Numeric and a few X-Midas libraries\): there is also a module for pretty printing OpalTables) Tj T* 0 Tw /F3 10 Tf (that does NOT require Numeric) Tj /F1 10 Tf (: ) Tj /F3 10 Tf (prettyopal) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 280.4665 cm
q
q
.988825 0 0 .988825 0 0 cm
q
1 0 0 1 6.6 6.674587 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from prettyopal import prettyOpal) Tj T* (>) Tj (>) Tj (>) Tj ( prettyOpal\( [ 1, 'two', 3.5 ] \)       # Plain Python: no external depends) Tj T* ({) Tj T* (    "0" = L:1 ,) Tj T* (    "1" = "two" ,) Tj T* (    "2" = D:3.5) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 250.4665 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Sockets) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 223.4665 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F5 12.5 Tf 0 0 0 rg (MidasTalker: TCP/IP client) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 205.4665 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Always start with the built-in documentation:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 160.2665 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import midastalker) Tj T* (>) Tj (>) Tj (>) Tj ( help\(midastalker\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 128.2665 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.111098 Tw (If you wish to create client to talk to a MidasServer or OpalPythonDaemon, it's very easy. You need to) Tj T* 0 Tw (know:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 122.2665 cm
Q
 
endstream
endobj
% 'R95': class PDFStream 
95 0 obj
% page stream
<< /Length 7289 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 711.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (what machine the server is running on) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The port the server is using) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\(probably\) the type of serialization the server is using) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 711.0236 cm
Q
q
1 0 0 1 62.69291 681.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .871098 Tw (Once you know that, using a Midastalker is easy. Let's say the server is running on "bradmach" on port) Tj T* 0 Tw (8888 using Python Pickling 2 serialization protocol. Then, to create a client:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 635.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from midastalker import *) Tj T* (>) Tj (>) Tj (>) Tj ( mt = MidasTalker\("bradmach", 8888, SERIALIZE_P2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 615.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Once you have created the client, you need to open the connection:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 582.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( mt.open\(\)  # tries to open, throws exception if fails) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 550.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .757318 Tw (Sending and receiving is easy once the connection is open: Remember, the currency of PicklingTools is) Tj T* 0 Tw (Python Dictionaries, so that's what flows over the socket!:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 469.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( request = { 'a': 1, 'b': 2 }) Tj T* (>) Tj (>) Tj (>) Tj ( mt.send\(request\)          # send a simple dictionary to server) Tj T* (>) Tj (>) Tj (>) Tj ( result = mt.recv\(\)        # get a response dictionary back from server) Tj T* (>) Tj (>) Tj (>) Tj ( print result) Tj T* ({ 'a': 1, 'b': 2 }    # ... echoed back the same response) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 437.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .386654 Tw (This is a very simple example, but shows all the major pieces of communicating with a server. Of course,) Tj T* 0 Tw (there are a lot of other issues to worry about:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 431.4236 cm
Q
q
1 0 0 1 62.69291 377.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (What if the server isn't available? \(More likely, used the wrong server and port\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (What is the server goes away after it opens up?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (What if I want a timeout?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 377.4236 cm
Q
q
1 0 0 1 62.69291 323.4236 cm
q
BT 1 0 0 1 0 38 Tm .704651 Tw 12 TL /F1 10 Tf 0 0 0 rg (A full example called ) Tj /F3 10 Tf (midastalker_ex2.py ) Tj /F1 10 Tf (in included in distribution: It's a full Python program that shows) Tj T* 0 Tw .702093 Tw (how to deal with real issues: typically, if the server goes away or you can't connect, an exception will be) Tj T* 0 Tw 1.123145 Tw (thrown and you have to deal with by trying to reconnect. This is probably the best example to copy for) Tj T* 0 Tw (creating a robust client.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 293.4236 cm
q
BT 1 0 0 1 0 14 Tm 4.144269 Tw 12 TL /F1 10 Tf 0 0 0 rg (See the full documentation of MidasTalker in API documentation. Note you can see the same) Tj T* 0 Tw (documentation from Python using ) Tj /F3 10 Tf (help\(midastalker\)) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 266.4236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F5 12.5 Tf 0 0 0 rg (MidasServer: TCP/IP server) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 248.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Always start with the built-in documentation:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 203.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import midasserver) Tj T* (>) Tj (>) Tj (>) Tj ( help\(midasserver\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 159.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .911098 Tw (Creating a server is a little more complicated. It requires you to create a class that inherits directly from) Tj T* 0 Tw 2.13311 Tw (the MidasServer. When you create an instance, you will have three methods that get called for you) Tj T* 0 Tw (\(callbacks\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 153.2236 cm
Q
q
1 0 0 1 62.69291 98.22362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 43 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (acceptNewClient_) Tj /F2 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 20 16 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.063876 Tw (Called for you whenever a new client connects to the server: It is a callback that gives the file) Tj T* 0 Tw (descriptors for read/write access to the socket) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F6 10 Tf 12 TL (readClientData_:) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R96': class PDFStream 
96 0 obj
% page stream
<< /Length 5114 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 707.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 31 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm .471751 Tw 12 TL /F1 10 Tf 0 0 0 rg (Called for you whenever a client sends you data. The client can be uniquely identified by his file) Tj T* 0 Tw (descriptor \(the same one that was passed in with the ) Tj /F4 10 Tf (acceptNewClient_) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (disconnectClient_) Tj /F2 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Called for you whenever a client disconnects from socket) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 707.0236 cm
Q
q
1 0 0 1 62.69291 665.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .36311 Tw (You will write a MidasServer that encapsulates the server behavior you want: what kind of messages you) Tj T* 0 Tw .041654 Tw (send back to clients, what to do when they disconnect or disconnect. Once you have one written, you tend) Tj T* 0 Tw (to use them like the MidasTalker:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 439.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 216 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 194 Tm /F4 10 Tf 12 TL (from midasserver import *) Tj T*  T* (# New kind of Server written in Python) Tj T* (class MyNewMidasServer\(MidasServer\) {) Tj T* (    def __init__ \(self, host, port, serialization\) :) Tj T* (        MidasServer.__init__\(self, host, port, ser, 1\)) Tj T* (        ...) Tj T* (    def acceptNewClient_\(self, read_fd, read_addr, write_fd, write_addr\):) Tj T* (        ...) Tj T* (    def readClientData_\(self, read_fd, write_fd\):) Tj T* (        ...) Tj T* (    def disconnectClient_\(self, read_fd, write_fd\):) Tj T* (        ...) Tj T*  T* (# Usage) Tj T* (MyNewMidasServer server\("host", port, SERIALIZE_P2\)) Tj T* (server.open\(\);   # To start it going, accepting clients and responding) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 359.8236 cm
q
BT 1 0 0 1 0 62 Tm .121235 Tw 12 TL /F1 10 Tf 0 0 0 rg (There is an example of a MidasServer in the Python area called ) Tj /F3 10 Tf (midasserver_ex.py ) Tj /F1 10 Tf (which shows a simple) Tj T* 0 Tw 2.107633 Tw (echo server \(it echoes back what you send it\). The servers are typically written to ) Tj /F3 10 Tf (respond to client) Tj T* 0 Tw .362485 Tw (requests) Tj /F1 10 Tf (, but they could very easily be active servers. Whenever a new client connects, you could spawn) Tj T* 0 Tw .162927 Tw (a thread that immediately begins talking to the client \(using the file descriptor given\). It's important to keep) Tj T* 0 Tw 4.54936 Tw (track of the file descriptor handed to you: it's how you communicate back to the client: see) Tj T* 0 Tw /F3 10 Tf (midasserver_ex.py) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 332.8236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F5 12.5 Tf 0 0 0 rg (MidasYeller and MidasListener: UDP) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 254.8236 cm
q
BT 1 0 0 1 0 62 Tm 1.563059 Tw 12 TL /F1 10 Tf 0 0 0 rg (The MidasListener \(client\) and MidasYeller \(server\) have very similar interfaces to that of MidasTalker) Tj T* 0 Tw .022126 Tw (\(client\) and MidasServer \(server\). The major difference is the the Yeller/Listener use UDP \(User Datagram) Tj T* 0 Tw 1.084147 Tw (Protocol, frequently called Unrealiable Datagram Protocol because there are no guarantees on whether) Tj T* 0 Tw .536457 Tw (packets will be delivered, nor are there guarantees on the order\). The listener and yeller both require the) Tj T* 0 Tw .56881 Tw (user specify a message length limit in the constructors: ) Tj /F3 10 Tf (both the Yeller and Listener need to match!! ) Tj /F1 10 Tf (See) Tj T* 0 Tw (the ) Tj /F3 10 Tf (midaslistener_ex.py ) Tj /F1 10 Tf (and ) Tj /F3 10 Tf (midasyeller_ex.py ) Tj /F1 10 Tf (examples in the Python area.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 224.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Pretty Printing) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 182.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.758651 Tw (One output format that Midas 2k users became very comfortable with is the prettyPrint routine for) Tj T* 0 Tw 2.09936 Tw (OpalTables: it exposes nesting of dictionaries and lists in a very human readable way. Below is the) Tj T* 0 Tw (prettyPrint of an M2k OpalTable:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 77.62362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F4 10 Tf 12 TL (a = {) Tj T* (    ATTRIBUTE_PACKET={ },) Tj T* (    FILE_VERSION=UL:3,) Tj T* (    GRANULARITY=UL:4096,) Tj T* (    KEYWORDS={ },) Tj T* (    MACHINE_REP="EEEI",) Tj T* (    NAME="group\(,\)",) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R97': class PDFStream 
97 0 obj
% page stream
<< /Length 3356 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 475.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 288 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 266 Tm /F4 10 Tf 12 TL (    TIME={) Tj T* (        DELTA=DUR:1,) Tj T* (        KEYWORDS={ },) Tj T* (        LENGTH=UX:4096,) Tj T* (        NAME="Time",) Tj T* (        START=DUR:0,) Tj T* (        UNITS="s") Tj T* (    },) Tj T* (    TIME_INTERPRETATION={) Tj T* (        AXIS_TYPE="CONTINUOUS") Tj T* (    },) Tj T* (    TRACKS={) Tj T* (        "0"={) Tj T* (            AXES={) Tj T* (                "0"=@"TIME") Tj T* (            },) Tj T* (            FORMAT="D",) Tj T* (            KEYWORDS={ },) Tj T* (            NAME="Track 0",) Tj T* (            UNITS="") Tj T* (        }) Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 443.8236 cm
q
BT 1 0 0 1 0 14 Tm .962339 Tw 12 TL /F1 10 Tf 0 0 0 rg (Because this output format was so successful and useful with Midas 2k, there is a module called ) Tj /F3 10 Tf (pretty) Tj T* 0 Tw /F1 10 Tf (that gives the Python user similar types of output for Python Dictionaries:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 398.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import pretty) Tj T* (>) Tj (>) Tj (>) Tj ( help\(pretty\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 378.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Note that this is different from the built-in Python module ) Tj /F3 10 Tf (pprint) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 189.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 180 re B*
Q
q
BT 1 0 0 1 0 158 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from pretty import pretty) Tj T* (>) Tj (>) Tj (>) Tj ( from pprint import pprint) Tj T* (>) Tj (>) Tj (>) Tj ( a = {'a':1, 'b':{'nest':None} }) Tj T* (>) Tj (>) Tj (>) Tj ( print a) Tj T* ({'a': 1, 'b': {'nest': None}}) Tj T* (>) Tj (>) Tj (>) Tj ( pprint\(a\)       # Built-in pretty print: Tends to keep on fewer lines) Tj T* ({'a': 1, 'b': {'nest': None}}) Tj T* (>) Tj (>) Tj (>) Tj ( pretty\(a\)       # PicklingTools: Exposes list and dictionary structure) Tj T* ({) Tj T* (     'a': 1 ,) Tj T* (     'b': {) Tj T* (         'nest': None) Tj T* (     }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 157.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.091235 Tw (The PicklingTools pretty print exposes structure better, and tends to be easier to read for larger tables,) Tj T* 0 Tw (although it can be more verbose.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 139.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The pretty print function can also write to files:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 82.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( pretty\(a, file\('outfile', 'w'\)\)    # Write pretty repr to outfile) Tj T*  T* (% cat outfile) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R98': class PDFStream 
98 0 obj
% page stream
<< /Length 4647 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 679.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg ({) Tj T* (    'a':1,) Tj T* (    'b':{) Tj T* (        'nest':1) Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 649.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Binary Formats) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 631.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If you wish to read and write files in a binary format, use the cPickle format:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 444.6485 cm
q
q
.988825 0 0 .988825 0 0 cm
q
1 0 0 1 6.6 6.674587 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 180 re B*
Q
q
BT 1 0 0 1 0 158 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import cPickle) Tj T* (>) Tj (>) Tj (>) Tj ( a = {'a': 1, 'b': 2 }) Tj T* (>) Tj (>) Tj (>) Tj (    #### SAVING) Tj T* (>) Tj (>) Tj (>) Tj ( string1 = cPickle.dumps\(a, 0\)# binary dump a to a string using Protocol 0) Tj T* (>) Tj (>) Tj (>) Tj ( string2 = cPickle.dumps\(a, 2\)# binary dump a to a string using Protocol 2) Tj T* (>) Tj (>) Tj (>) Tj ( file\('p0format", 'w'\).write\(string1\)) Tj T*  T* (>) Tj (>) Tj (>) Tj ( file\('p2format", 'w'\).write\(string2\)) Tj T*  T* (>) Tj (>) Tj (>) Tj (    #### LOADING) Tj T* (>) Tj (>) Tj (>) Tj ( f = file\('p0format', 'r'\).read\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( l1 = cPickle.loads\(f\)    # loads both protocol 0 and protocol 2) Tj T* (>) Tj (>) Tj (>) Tj ( print l1) Tj T* ({'a':1, 'b': 2}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 388.6485 cm
q
BT 1 0 0 1 0 38 Tm .295697 Tw 12 TL /F1 10 Tf 0 0 0 rg (See the ) Tj /F3 10 Tf (cPickle ) Tj /F1 10 Tf (documentation that comes with Python for more examples. We recommend using Python) Tj T* 0 Tw 1.871318 Tw (Pickling Protocol 0 for compatibility and Python Pickling Protocol 2 for speed. ) Tj /F2 10 Tf (DO NOT USE Python) Tj T* 0 Tw .708443 Tw (Pickling Protocol 1!!! ) Tj /F1 10 Tf (The C++/Midas 2k/X-Midas PicklingTools DO NOT SUPPORT Protocol 1: Only 0) Tj T* 0 Tw (and 2. \(3 will be in a future release\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 358.6485 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.163828 Tw (The files produced by above technique can then be read/written by the C++/Midas 2k/X-Midas) Tj T* 0 Tw (PicklingTools or Python.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 316.6485 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 17.62664 Tw (Note that when we specify SERIALIZE_P0 or SERIALIZE_P2 from the) Tj T* 0 Tw .979982 Tw (MidasTalker/Server/Yeller/Listener, we are simply taking the data passed to "send" or "recv" and calling) Tj T* 0 Tw (cPickle.dumps\(\)/loads\(\) on it.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 298.6485 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (NEW: As of PicklingTools 1.6.0, Python now has a C Extension module that works with OC Serialization.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 292.6485 cm
Q
q
1 0 0 1 62.69291 135.0114 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 89.2 cm
q
q
.934933 0 0 .934933 0 0 cm
q
1 0 0 1 6.6 7.059329 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import pyocser  ### Make sure build/../pyocsermodule.so on your PYTHONPATH) Tj T* (>) Tj (>) Tj (>) Tj ( a = {'a':1, 'b':2 }) Tj T* (>) Tj (>) Tj (>) Tj (   ##### SAVING) Tj T* (>) Tj (>) Tj (>) Tj ( string1 = pyocser.ocdumps\(a\)   # Binary dump using OC Serialization) Tj T* (>) Tj (>) Tj (>) Tj ( file\('something.oc','w'\).write\(string1\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj (   ##### LOADING) Tj T* (>) Tj (>) Tj (>) Tj ( f = file\('something.oc', 'r'\).read\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( l1 = pyocser.ocloads\(f\)) Tj T* (>) Tj (>) Tj (>) Tj ( print l1) Tj T* ({'a':1, 'b':2}) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 135.0114 cm
Q
q
1 0 0 1 62.69291 105.0114 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .74686 Tw (The OC Serialization tends to be faster than pickling. OC Serialization also works with very large strings) Tj T* 0 Tw (and arrays \(over 4G\), whereas pickling probably doesn't \(maybe will be fixed by the time you read this?\).) Tj T* ET
Q
Q
 
endstream
endobj
% 'R99': class PDFStream 
99 0 obj
% page stream
<< /Length 5758 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 747.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Conclusion to the Python Experience) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 717.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .402339 Tw (When in doubt, check the help page for the module of interest: there should be enough documentation to) Tj T* 0 Tw (get you going.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 711.0236 cm
Q
q
1 0 0 1 62.69291 673.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import midassocket  # Base class for ALL Midas socket thingees) Tj T* (>) Tj (>) Tj (>) Tj ( help\(midassocket\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 673.8236 cm
Q
q
1 0 0 1 62.69291 631.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .53686 Tw (We strongly suggest learning how the Python PicklingTools work first because they are easy to use, well) Tj T* 0 Tw .144104 Tw (documented, and easy to try. There are many examples in the baseline: start by trying to copy/modify one) Tj T* 0 Tw (of the examples to get going.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 589.8236 cm
q
BT 1 0 0 1 0 26 Tm .813735 Tw 12 TL /F1 10 Tf 0 0 0 rg (Once you feel comfortable with the Python PicklingTools, many of the same interfaces exist for the C++) Tj T* 0 Tw .77284 Tw (PicklingTools: the C++ experience will hopefully feel very similar to the Python Experience \(except there) Tj T* 0 Tw (will be more ) Tj /F3 10 Tf ({ } ) Tj /F1 10 Tf (and ) Tj /F3 10 Tf (; ) Tj /F1 10 Tf (in the C++ experience\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 556.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (The XMPY Experience) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 514.8236 cm
q
BT 1 0 0 1 0 26 Tm .444987 Tw 12 TL /F1 10 Tf 0 0 0 rg (The only real difference between XMPY and Python is that XMPY has access to a few more C extension) Tj T* 0 Tw .876651 Tw (modules that are not available from a "standard Python" distribution: most of these are X-Midas specific) Tj T* 0 Tw (and not of concern to this document. The important exceptions are the ) Tj /F3 10 Tf (Numeric ) Tj /F1 10 Tf (or ) Tj /F3 10 Tf (NumPy ) Tj /F1 10 Tf (modules.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 484.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Numeric or NumPy) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 418.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 3.205984 Tw (The Numeric module \(or the NumPy\) allows the Python programmer to deal with large arrays of) Tj T* 0 Tw .760651 Tw (complex/real numbers and operate on them AT THE SPEED OF COMPILED C. The Numeric module is) Tj T* 0 Tw .647608 Tw (written in C, and implements a lot of common numeric operations in C. In other words, if there is a lot of) Tj T* 0 Tw 1.94816 Tw (numeric processing \(multiplying matrices, manipulating large arrays\), the Numeric module makes that) Tj T* 0 Tw (functionality fast and available from Python.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 376.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.906651 Tw (NumPy is the current de-facto standard, but Numeric is the older, deprecated standard. NumPy is in) Tj T* 0 Tw .319213 Tw (current maintenance, whereas Numeric has fallen out of maintenance. Unless you have major backwards) Tj T* 0 Tw (compatibility concerns, we strongly recommend using NumPy over Numeric.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 310.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.023735 Tw (NumPy comes with most Linux distributions, or is easy to install. RedHat and Fedora both have numpy) Tj T* 0 Tw .081751 Tw (RPMs that are easy to install. Few machines will actually have Numeric installed by default unless you are) Tj T* 0 Tw .138876 Tw (XMPY \(there is a Red-Hat RPM that will allow Numeric to be installed inside of a standard RedHat Python) Tj T* 0 Tw .498409 Tw (in /usr/bin\), but most of the time you'll have to install it yourself. Again, if you use XMPY, Numeric comes) Tj T* 0 Tw (built-in.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 268.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .569988 Tw (The reason this is an issue: if you are serializing large amounts of POD type \(Plain Old Data---this is the) Tj T* 0 Tw 1.130697 Tw (kind of data Numeric operates on: ints, float, complexes\), then choosing Numeric/NumPy as your array) Tj T* 0 Tw (serialization can make a world of difference in speed.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 250.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Consider \(in Python\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 145.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # Construct some data, and send it over a socket) Tj T* (>) Tj (>) Tj (>) Tj ( import numpy) Tj T* (>) Tj (>) Tj (>) Tj ( from midastalker import *) Tj T*  T* (>) Tj (>) Tj (>) Tj ( a = numpy.array\([1.0,2.0,3.0]\)   # Contiguous array of real_8s) Tj T* (>) Tj (>) Tj (>) Tj ( mt = MidasTalker\("host", port, SERIALIZE_P2\)) Tj T* (>) Tj (>) Tj (>) Tj ( mt.send\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 113.6236 cm
q
BT 1 0 0 1 0 14 Tm .569398 Tw 12 TL /F1 10 Tf 0 0 0 rg (By default, the MidasTalker will convert the ) Tj /F3 10 Tf (Array) Tj (<) Tj (real_8) Tj (> ) Tj /F1 10 Tf (to a Python List \(aka. C++ Arr\) and then send) Tj T* 0 Tw (that converted data over the socket. In code, it essentially does:) Tj T* ET
Q
Q
 
endstream
endobj
% 'R100': class PDFStream 
100 0 obj
% page stream
<< /Length 6036 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 679.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # When we don't use Numeric for serialization, all Arrays of POD) Tj T* (>) Tj (>) Tj (>) Tj ( # data are converted to Python Lists and THEN sent over) Tj T* (>) Tj (>) Tj (>) Tj ( python_list = []) Tj T* (>) Tj (>) Tj (>) Tj ( for ii in xrange\(0, a.length\) :) Tj T* (...   python_list.append\(a[ii]\)) Tj T* (>) Tj (>) Tj (>) Tj ( mt.send\(python_list\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 659.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (For two reasons, this is a lot slower:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 608.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 38 Tm  T* ET
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 30 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (An extra conversion to an Python List has to happen) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .150651 Tw (copying elements one-by-one is a lot slower than copying the contiguous memory of an array by) Tj T* 0 Tw ("BIT-BLIT" \(which is an optimization with POD types\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 554.8236 cm
q
BT 1 0 0 1 0 38 Tm 2.569269 Tw 12 TL /F1 10 Tf 0 0 0 rg (Why is "without Numeric/NumPy" the default? That is the most backwards compatible way to send) Tj T* 0 Tw .203318 Tw (Array) Tj (<) Tj (POD) Tj (> data because not all Pythons support Numeric or NumPy. If you try to send Numeric/NumPy) Tj T* 0 Tw .847356 Tw (data to a version of Python that doesn't have it built-in, the Python side will probably fail will an esoteric) Tj T* 0 Tw (error message.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 512.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.832651 Tw (If you are convinced that all your clients understand NumPy \(all C++ components do, all X-Midas) Tj T* 0 Tw .704597 Tw (components do, all XMPY interpreters do\), then using NumPy can drastically decrease your serialization) Tj T* 0 Tw (time of large amount of scientific data:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 455.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( mt = MidasTalker\("host", port, SERIALIZE_P2, DUAL_SOCKET, AS_NUMPY\)) Tj T* (>) Tj (>) Tj (>) Tj ( mt.open\(\)     # Have to open before sending ...) Tj T* (>) Tj (>) Tj (>) Tj ( mt.send\(a\)    # Send NumPy arrays very fast) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 411.6236 cm
q
BT 1 0 0 1 0 26 Tm .493828 Tw 12 TL /F1 10 Tf 0 0 0 rg (This extra argument on the Midastalker \(similar for MidasServer, MidasListener, MidasYeller\) to force the) Tj T* 0 Tw 1.499984 Tw (Midastalker to use NumPy is called the ) Tj /F3 10 Tf (ArrayDisposition) Tj /F1 10 Tf (. This option ONLY APPLIES if you are using) Tj T* 0 Tw (SERIALIZE_P0 or SERIALIZE_P2---it is ignored if you use any other serializations.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 381.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (ArrayDisposition) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 339.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .40061 Tw (ArrayDisposition is how to handle Arrays of POD \(Plain Old Data\). ArrayDisposition is only relevant if you) Tj T* 0 Tw .374692 Tw (are using SERIALIZE_P0 or SERIALIZE_P2 as your serialization \(which you will be if you are talking to a) Tj T* 0 Tw (Python client\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 321.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can ignore the discussion below on ArrayDisposition if you use SERIALIZE_OC or SERIALIZE_M2K.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 291.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 15.08698 Tw (There are actually four choices for the ArrayDisposition argument on the) Tj T* 0 Tw (MidasTalker/MidasServer/MidasListener/MidasYeller:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 222.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (AS_NUMERIC      = 0) Tj T* (AS_LIST         = 1  # the default) Tj T* (AS_PYTHON_ARRAY = 2) Tj T* (AS_NUMPY        = 4) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 154.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .706905 Tw (We currently recommend AS_NUMPY, as NumPy is in active maintenance. Unless you have backwards) Tj T* 0 Tw 2.503828 Tw (compatibility issues, we recommend moving from Numeric \(which is out of maintenance\) to NumPy) Tj T* 0 Tw 3.003615 Tw (\(actively developed\). Even AS_PYTHON_ARRAY is deprecated, as Python changed how it pickles) Tj T* 0 Tw .245251 Tw (array.array from Python 2.6 to Python 2.7 \(so a Python 2.6 and 2.7 client would be incompatibile, and it is) Tj T* 0 Tw (significantly slower as well\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 136.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The default is usually AS_LIST. To use NumPy:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 79.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import numpy) Tj T* (>) Tj (>) Tj (>) Tj ( from midastalker import *) Tj T* (>) Tj (>) Tj (>) Tj  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R101': class PDFStream 
101 0 obj
% page stream
<< /Length 7234 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 703.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = numpy.array\([1,2,3]\)) Tj T* (>) Tj (>) Tj (>) Tj ( mt = midastalker\("host", port, SERIALIZE_P2, DUAL_SOCKET, AS_NUMPY\)) Tj T* (>) Tj (>) Tj (>) Tj ( mt.open\(\)    # Must open before sending) Tj T* (>) Tj (>) Tj (>) Tj ( mt.send\(a\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 659.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.221751 Tw (Versions of Python prior to 2.5 do not support the serialization of arrays even though the Python array) Tj T* 0 Tw 1.47436 Tw (module has been built-in to the Python interpreter for ages. This simply gives the non-XMPY users or) Tj T* 0 Tw (users who don't have access to Numeric another way to send Arrays of POD data.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 605.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .813555 Tw (If you try to use AS_NUMPY, AS_NUMERIC or AS_PYTHON_ARRAY and your version of Python does) Tj T* 0 Tw .657262 Tw (not support it, a large error will be issued to let you know you can't do this: THIS IS ON PURPOSE. It is) Tj T* 0 Tw .239988 Tw (better to get a big, graphic error up front saying "you can't use Numeric" rather than crashing later with an) Tj T* 0 Tw (esoteric Python exception.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 587.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Again, we suggest using NumPy as it is fairly ubiquitous and actively in maintenance:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 554.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import numpy) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 522.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .927984 Tw (Contact your system administrator to install NumPy on your machine if the numpy import above doesn't) Tj T* 0 Tw (work.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 489.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (The C++ Experience) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 459.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.72561 Tw (The work to build the PicklingTools from Python was very simple: After all, Python has just about) Tj T* 0 Tw (everything built-in to the language, so making tools to handle files and sockets was straight-forward.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 453.6236 cm
Q
q
1 0 0 1 62.69291 399.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Python Dictionaries: Built-in the language) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (File and Socket Support: Built-in library \() Tj /F3 10 Tf (import socket) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Serialization Support: Built-in library \() Tj /F3 10 Tf (import cPickle) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 399.6236 cm
Q
q
1 0 0 1 62.69291 381.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The work to build the PicklingTools from C++ was harder: much less was built-in.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 375.6236 cm
Q
q
1 0 0 1 62.69291 321.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Python Dictionaries: Use ) Tj /F3 10 Tf (OpenContainers ) Tj /F1 10 Tf (library, included in distro) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (File and Socket Support: UNIX libraries, included on machine \(hopefully\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Serialization Support: Written from scratch, included in distro) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 321.6236 cm
Q
q
1 0 0 1 62.69291 291.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Files) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 261.6236 cm
q
BT 1 0 0 1 0 14 Tm .277633 Tw 12 TL /F1 10 Tf 0 0 0 rg (The main tools for dealing with files \(as well as Arrays\) are the routines from ) Tj /F3 10 Tf (chooseser.h) Tj /F1 10 Tf (. These routines) Tj T* 0 Tw (allow you to read/write files \(as well as Arrays\) with serialized data. The main routines are:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 144.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg (// C++) Tj T* (DumpValToFile \(const Val) Tj (&) Tj ( thing_to_serialize,) Tj T* (               const string) Tj (&) Tj ( output_filename,) Tj T* (               Serialization_e how_to_dump_the_data\);) Tj T*  T* (LoadValFromFile \(const string) Tj (&) Tj ( input_filename,) Tj T* (                 Val) Tj (&) Tj ( result,) Tj T* (                 Serialization_e how_data_was_dumped\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 88.42362 cm
q
BT 1 0 0 1 0 38 Tm .306457 Tw 12 TL /F1 10 Tf 0 0 0 rg (With these routines, you can read and write data back and forth between Python systems \(and other C++ ) Tj T* 0 Tw .777984 Tw (systems of course\). The ) Tj /F3 10 Tf (DumpValToFile ) Tj /F1 10 Tf (routine writes our data \("serializes" or "pickles"\) to a binary file. ) Tj T* 0 Tw 1.26784 Tw (The ) Tj /F3 10 Tf (LoadValFromFile ) Tj /F1 10 Tf (routine reads our data \("deserializes" or "unpickles"\) from a binary file. Note that ) Tj T* 0 Tw .60561 Tw /F3 10 Tf (LoadValFromFile ) Tj /F1 10 Tf (and ) Tj /F3 10 Tf (DumpValToFile ) Tj /F1 10 Tf (are inverses of each other so that a load gets back exactly what a) Tj T* 0 Tw ET
Q
Q
 
endstream
endobj
% 'R102': class PDFStream 
102 0 obj
% page stream
<< /Length 7129 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (dump did.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 735.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The choices for serialization are numerous:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 729.0236 cm
Q
q
1 0 0 1 62.69291 435.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 288 cm
Q
q
1 0 0 1 20 288 cm
Q
q
1 0 0 1 20 249 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 24 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 24 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (SERIALIZE_P0: Serialize as Python Pickling Protocol 0 would.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .147882 Tw (This is 7-bit clean and printable, so you can always look at this file with an editor and get an) Tj T* 0 Tw (idea of what's in it. This protocol tends to be slower, but very backwards compatible.) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 243 cm
Q
q
1 0 0 1 20 204 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 24 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 24 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (SERIALIZE_P2: Serialize as Python Pickling Protocol 2 would.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .633984 Tw (This is a binary protocol, so much more difficult to understand without a binary editor. This) Tj T* 0 Tw (protocol tends to be very fast.) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 198 cm
Q
q
1 0 0 1 20 159 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 24 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 24 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (SERIALIZE_M2K: Serialize as Midas 2k would.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.375318 Tw (This uses the binary serialization of Midas 2k and is most useful for talking to legacy) Tj T* 0 Tw (systems.) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 153 cm
Q
q
1 0 0 1 20 102 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 36 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 36 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (SERIALIZE_OC: Serialize using the OpenContainers serialization.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .150651 Tw (In general, this is the fastest binary protocol, but currently only other C++ systems using the) Tj T* 0 Tw 2.868538 Tw (OpenContainers \(like PicklingTools, PTOOLS\) understand this. OpenContainers comes) Tj T* 0 Tw (built-in with PicklingTools. NEW! This now works with Python!) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 96 cm
Q
q
1 0 0 1 20 69 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 12 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 12 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (SERIALIZE_TEXT: Simply stringize the given data.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This outputs 7-bit data you can then easily edit. Not very fast, but very human-readable.) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 63 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 48 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 48 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (SERIALIZE_PRETTY: Like SERIALIZE_TEXT, but it uses the prettyPrint option.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 38 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 38 Tm 1.432126 Tw 12 TL /F1 10 Tf 0 0 0 rg (The prettyPrint makes the tables much more human readable, at the cost of some extra) Tj T* 0 Tw 2.486651 Tw (white space. A slightly more efficient way to do this is to use the ) Tj /F3 10 Tf (WriteValToFile ) Tj /F1 10 Tf (and) Tj T* 0 Tw 2.431797 Tw /F3 10 Tf (ReadValFromFile ) Tj /F1 10 Tf (routines from the ) Tj /F3 10 Tf (ocvalreader.h ) Tj /F1 10 Tf (file \(but these routines are limited to) Tj T* 0 Tw (ONLY prettyPrinting: no other serialization\).) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 435.0236 cm
Q
q
1 0 0 1 62.69291 393.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.236235 Tw (With these routines, you can very easily exchange file data between C++ and Python: Below are a) Tj T* 0 Tw .414987 Tw (number of examples. The first example shows how to write some data from C++ so that Python can read) Tj T* 0 Tw (it:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 277.0439 cm
q
q
.988825 0 0 .988825 0 0 cm
q
1 0 0 1 6.6 6.674587 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg (// C++ side: Write a Value) Tj T* (Val v = Tab\("{ 'a':1, 'b':2.2, 'c':'three' }"\); // .. something ..) Tj T* (DumpValToFile\(v, "state.p0", SERIALIZE_P0\);) Tj T*  T* (# Python side: read the same value) Tj T* (>) Tj (>) Tj (>) Tj ( import cPickle) Tj T* (>) Tj (>) Tj (>) Tj ( result = cPickle.load\( file\('state.p0'\) \) # load figures out the protocol) Tj T* (>) Tj (>) Tj (>) Tj ( print result) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 257.0439 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Another example: have C++ read a file that Python created:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 115.8439 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F4 10 Tf 0 0 0 rg (# Python side: write a file) Tj T* (>) Tj (>) Tj (>) Tj ( v = {'a':1, 'b':2.2, 'c':'three' } # ... something ...) Tj T* (>) Tj (>) Tj (>) Tj ( import cPickle) Tj T* (>) Tj (>) Tj (>) Tj ( cPickle.dump\( v, file\('state.p2'\), 2 \) # Use Pickling Protocol 2) Tj T*  T* (// C++ side: read the same file) Tj T* (Val result;) Tj T* (LoadValFromFile\("state.p2", result, SERIALIZE_P2\);) Tj T* (cout ) Tj (<) Tj (<) Tj ( result ) Tj (<) Tj (<) Tj ( endl;) Tj T* (/// .. and we have the same value from Python!) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 83.8439 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .488084 Tw (This is the best way to get started using the PicklingTools from C++: See if you can write a file from C++) Tj T* 0 Tw (and have Python read it.) Tj T* ET
Q
Q
 
endstream
endobj
% 'R103': class PDFStream 
103 0 obj
% page stream
<< /Length 5777 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .342339 Tw (There are some lower-level routines for serialization you may also find useful: You can also take your Val) Tj T* 0 Tw (and load/dump it to an Array of char \(for shoving over your own socket protocol, etc.\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 623.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg (// C++) Tj T* (DumpValToArray \(const Val) Tj (&) Tj ( thing_to_serialize,) Tj T* (               Array) Tj (<) Tj (char) Tj (>) Tj (&) Tj ( array_to_dump_to,) Tj T* (               Serialization_e how_to_dump_the_data\);) Tj T*  T* (LoadValFromArray \(const Array) Tj (<) Tj (char) Tj (>) Tj (&) Tj ( array_to_load_from,) Tj T* (                  Val) Tj (&) Tj ( result,) Tj T* (                  Serialization_e how_data_was_dumped\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 591.8236 cm
q
BT 1 0 0 1 0 14 Tm .632706 Tw 12 TL /F1 10 Tf 0 0 0 rg (In fact, the ) Tj /F3 10 Tf (DumpValToFile ) Tj /F1 10 Tf (is implemented using ) Tj /F3 10 Tf (DumpValToArray ) Tj /F1 10 Tf (and ) Tj /F3 10 Tf (LoadValFromFile ) Tj /F1 10 Tf (is implemented) Tj T* 0 Tw (using ) Tj /F3 10 Tf (LoadValFromArray) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 561.8236 cm
q
BT 1 0 0 1 0 14 Tm .062846 Tw 12 TL /F1 10 Tf 0 0 0 rg (With these routines, you should be able to get started. Of course, it might useful to know what a ) Tj /F3 10 Tf (Val ) Tj /F1 10 Tf (is: the) Tj T* 0 Tw (next section talks about the ) Tj /F3 10 Tf (Val) Tj /F1 10 Tf (: the main currency of the C++ PicklingTools.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 531.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (OpenContainers) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 489.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.008221 Tw (A minor goal of the PicklingTools was to try to make the C++ experience when dealing with Python) Tj T* 0 Tw .663059 Tw (Dictionaries very similar to the Python experience. Python Dictionaries are the currency of PicklingTools,) Tj T* 0 Tw (so we needed to make sure dictionaries are easy to manipulate from C++.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 435.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .333145 Tw (Part of the problem is that Python is a dynamically-typed language \(the type of an object is known only at) Tj T* 0 Tw 1.485868 Tw (runtime\) and C++ is a statically-typed language \(the type of an object is known at compile time\). This) Tj T* 0 Tw .715814 Tw (makes supporting the dynamic, recursive, heterogeneous typing of Dictionaries difficult in C++. Consider) Tj T* 0 Tw (the Python code:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 366.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = 10) Tj T* (>) Tj (>) Tj (>) Tj ( b = "hello") Tj T* (>) Tj (>) Tj (>) Tj ( c = { 'key1': 17 }) Tj T* (>) Tj (>) Tj (>) Tj ( a = "a string, not an int!"   # okay in Python) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 334.6236 cm
q
BT 1 0 0 1 0 14 Tm .612619 Tw 12 TL /F1 10 Tf 0 0 0 rg (In the above Python code, each variable's type is dynamic: ) Tj /F3 10 Tf (a ) Tj /F1 10 Tf (starts life as an int, then becomes a string.) Tj T* 0 Tw (C++ has the opposite philosophy: All types need to be known at compile time:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 265.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (int a = 10;) Tj T* (string b = "hello";) Tj T* (Tab c\("{ 'key1: 17 }"\);) Tj T* (a = "a string, not an int!"  /// a is an int, not a string!! ERROR in C++) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 221.4236 cm
q
BT 1 0 0 1 0 26 Tm 1.534198 Tw 12 TL /F1 10 Tf 0 0 0 rg (To work with dynamic typing in C++, we introduce a new type called the ) Tj /F3 10 Tf (Val) Tj /F1 10 Tf (: \(so called because it is) Tj T* 0 Tw .22311 Tw (always passed by value or deep-copy\). The Val represents a dynamic container that can contain a variety) Tj T* 0 Tw (of different types:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 152.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (Val a = 10;) Tj T* (Val b = "hello";) Tj T* (Val c = Tab\("{ 'key1': 17 }"\);) Tj T* (a = "a string, not an int!";    // Okay now in C++:  Val is a dynamic type) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 132.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In fact, there is only a set number of types that a Val can contain.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 126.2236 cm
Q
q
1 0 0 1 62.69291 87.22362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 33 cm
Q
q
1 0 0 1 20 33 cm
Q
q
1 0 0 1 20 6 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 12 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 12 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (INTEGER types: int_1, int_u1, int_2, int_u2, int_4, int_u4, int_8, int_u8) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\(note that int is always typedef-ed to one of these\)) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
 
endstream
endobj
% 'R104': class PDFStream 
104 0 obj
% page stream
<< /Length 6558 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 666.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 87 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (REAL types: real_4, real_8) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 81 cm
Q
q
1 0 0 1 20 69 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (COMPLEX types: complex_8, complex_16, and cx_t) Tj (<) Tj (T) Tj (> for all INTEGER types) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 63 cm
Q
q
1 0 0 1 20 51 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (MISC types: None \(empty type\), string, Proxy, int_n) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 45 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 12 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 12 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (CONTAINER types: Tab \(like Python Dictionary\), Arr \(like Python List\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (OTab \(like OrderedDict\), Tup \(like Tuple\)) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (ARRAY type: Array) Tj (<) Tj (POD) Tj (> where POD is any INTEGER, REAL, or COMPLEX type) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 666.0236 cm
Q
q
1 0 0 1 62.69291 600.0236 cm
q
BT 1 0 0 1 0 50 Tm .829318 Tw 12 TL /F1 10 Tf 0 0 0 rg (\(Sidebar: Note that the typedefs for integer/real/complex values use the ) Tj /F3 10 Tf (number of bytes ) Tj /F1 10 Tf (the specify the) Tj T* 0 Tw .976303 Tw (size of the numbers, as opposed to the number of bits in the standard C types \(such as uint32_t which) Tj T* 0 Tw .572651 Tw (has 32 bits\). This again belies the FORTRAN history of Midas/PTOOLS where integers and doubles and) Tj T* 0 Tw .970697 Tw (complex values are specified in terms of bytes: real*4, real*8, integer*4, complex*8, complex*16 and so) Tj T* 0 Tw (on.\)) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 558.0236 cm
q
BT 1 0 0 1 0 26 Tm .72936 Tw 12 TL /F1 10 Tf 0 0 0 rg (Note that cx_t) Tj (<) Tj (INTEGER) Tj (> is new as of PicklingTools 1.6.0. For certain DSP operations, it's useful to be) Tj T* 0 Tw 1.48528 Tw (able to represent what comes directly off an antenna as complex integers. There is not really a direct) Tj T* 0 Tw (correspondance in Python or NumPy, but it's useful enough for C++ where hardcore DSP happens.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 504.0236 cm
q
BT 1 0 0 1 0 38 Tm .941984 Tw 12 TL /F1 10 Tf 0 0 0 rg (Vals cannot contain ) Tj /F3 10 Tf (any type ) Tj /F1 10 Tf (because we want compatibility with Python: with the limitations above, we) Tj T* 0 Tw 1.14561 Tw (can always serialize the data and give it to Python. In practice, this restriction hasn't been problematic:) Tj T* 0 Tw 1.217209 Tw (most data can be formulated in terms of Tabs, Arrs and elementary data types \(In essence, this is the) Tj T* 0 Tw (same argument of XML: all data can be formulated in the basic XML formats\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 486.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Since Val is a dynamic type, it has a ) Tj /F3 10 Tf (tag ) Tj /F1 10 Tf (and ) Tj /F3 10 Tf (subtype ) Tj /F1 10 Tf (to tell you what is inside it:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 265.9287 cm
q
q
.976496 0 0 .976496 0 0 cm
q
1 0 0 1 6.6 6.758862 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 216 re B*
Q
q
BT 1 0 0 1 0 194 Tm 12 TL /F4 10 Tf 0 0 0 rg ('s' 'S' : int_1, int_u1) Tj T* ('i' 'I' : int_2, int_u2) Tj T* ('l' 'L' : int_4, int_u4) Tj T* ('x' 'X' : int_8, int_u8) Tj T* ('f' 'd' : real_4, real_8) Tj T* ('c' 'C' : cx_t) Tj (<) Tj (int_1) Tj (>) Tj (, cx_t) Tj (<) Tj (int_u1) Tj (>) Tj (:    # New as of PicklingTools 1.6.0) Tj T* ('e' 'E' : cx_t) Tj (<) Tj (int_2) Tj (>) Tj (, cx_t) Tj (<) Tj (int_u2) Tj (>) Tj (:    # New as of PicklingTools 1.6.0) Tj T* ('g' 'G' : cx_t) Tj (<) Tj (int_4) Tj (>) Tj (, cx_t) Tj (<) Tj (int_u4) Tj (>) Tj (:    # New as of PicklingTools 1.6.0) Tj T* ('h' 'H' : cx_t) Tj (<) Tj (int_8) Tj (>) Tj (, cx_t) Tj (<) Tj (int_u8) Tj (>) Tj (:    # New as of PicklingTools 1.6.0) Tj T* ('F' 'D' : complex_8, complex_16) Tj T* ('a'     : string \(like 'a' in ASCII\)) Tj T* ('n'     : array  \(like n elements in array\) [Like Python list]) Tj T* ('t'     : Tab                               [Like Python dict]) Tj T* ('o'     : OTab                              [Like Python OrderedDict]) Tj T* ('u'     : Tup                               [Like Python tuple]) Tj T* ('q' 'Q' : int_n, int_un                     [like Python arbitrary-sized ints]) Tj T* ('Z'     : None) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 233.9287 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .789488 Tw (The tag is just a public data member on the class. This tag belies the Midas history of the product: they) Tj T* 0 Tw (feel very similar to the tags on X-Midas and Midas 2k data:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 116.7287 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val v = 10.0;   // real_8) Tj T* (cout ) Tj (<) Tj (<) Tj ( v.tag;  // letter 'D') Tj T*  T* (a = int_1\(10\);) Tj T* (cout ) Tj (<) Tj (<) Tj ( v.tag;  // letter 's') Tj T*  T* (a = None;) Tj T* (cout ) Tj (<) Tj (<) Tj ( v.tag;  // letter 'Z') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 84.72874 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .262488 Tw (There is another field called subtype which indicates what type an array is: this field is only valid if the Val) Tj T* 0 Tw (is some kind of array:) Tj T* ET
Q
Q
 
endstream
endobj
% 'R105': class PDFStream 
105 0 obj
% page stream
<< /Length 4703 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 655.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val a = Array) Tj (<) Tj (int_1) Tj (>) Tj (\(10\);) Tj T* (cout ) Tj (<) Tj (<) Tj ( v.tag ) Tj (<) Tj (<) Tj ( v.subtype;  // letters 'n' 's') Tj T*  T* (a = None;) Tj T* (cout ) Tj (<) Tj (<) Tj ( v.tag ) Tj (<) Tj (<) Tj ( v.subtype;  // letters 'Z',  subtype UNDEFINED if not array) Tj T*  T* (a = Arr\("[1,2,3]"\);) Tj T* (cout ) Tj (<) Tj (<) Tj ( v.tag ) Tj (<) Tj (<) Tj ( v.subtype;  // letter 'n', 'Z') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 635.8236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Note that an Arr is essentially an Array) Tj (<) Tj (Val) Tj (>) Tj (, but augmented with the ability to parse string literals.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 605.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Val and Conversions) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 563.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .07104 Tw (One feature of C++ that makes Vals so easy to use are the \(implicit and explicit\) conversions. The Val has) Tj T* 0 Tw .538876 Tw (a constructor for every single type Vals can contain, so creating a Val from something else is simple and) Tj T* 0 Tw (easy to read:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 482.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (Val a = "hey";) Tj T* (Val b = 3.1415;  // constructors for ALL TYPES the Val supports.) Tj T* (Val c = 1;) Tj T* (Val d = Arr\("[1,2,3]"\);) Tj T* (Val e = complex_8\(1,2\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 426.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .603735 Tw (Notice that we overload the constructor on ALL integer types and ALL real types. Experience has shown) Tj T* 0 Tw 1.409318 Tw (that the compiler gets confused \(read: compile-time errors\) if you don't have an explicit constructor for) Tj T* 0 Tw 1.561567 Tw (every single type you expect. More important seems to be if you have a routine that takes a Val, the) Tj T* 0 Tw (compiler won't get confused:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 357.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (void PrintF \(Val v\); // ... prototype for some function ...) Tj T*  T* (PrintF\(1\);       // no confusion) Tj T* (PrintF\("hello"\); // no confusion) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 337.4236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (\(Incidentally, this is a type-safe way to support a better ) Tj /F3 10 Tf (printf) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 307.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .56881 Tw (The outconversion process is equally important: Once you have placed a value inside a Val, how do you) Tj T* 0 Tw (get it out? Very simple: ask for it!:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 250.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (Val a = 123.456;) Tj T*  T* (real_8 in = a;    // Ask for the value out!) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 194.2236 cm
q
BT 1 0 0 1 0 38 Tm .363672 Tw 12 TL /F1 10 Tf 0 0 0 rg (The Val class also contains an outconverter \(read: ) Tj /F3 10 Tf (operator T ) Tj /F1 10 Tf (for some type ) Tj /F3 10 Tf (T) Tj /F1 10 Tf (\) for every type the Val can) Tj T* 0 Tw .46683 Tw (contain. That's very specific C++ nomenclature, but the upshot is, you can ask for any type out and it will) Tj T* 0 Tw .507209 Tw (convert it for you, if the conversion makes sense. The general rule is that the conversion will happen just) Tj T* 0 Tw (like C would do it:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 77.02362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F4 10 Tf 12 TL (Val v = 1;) Tj T*  T* (real_8 f     = v;     // Sure, convert to 1.0) Tj T* (real_4 d     = v;     // Sure, convert to real_4\(1.0\)) Tj T* (complex_16 F = v;     // Sure, convert to 1.0+0.0i) Tj T* (string s     = v;     // Sure, turn it into the string "1") Tj T* (Tab t        = v;     // DOESN'T MAKE SENSE!  runtime_error thrown) Tj T*  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R106': class PDFStream 
106 0 obj
% page stream
<< /Length 5497 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (Val vv = 3.3;) Tj T* (int i = vv;           // Sure, truncates to 3 just like C would) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 707.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Incidentally, we see here a very simple way to stringize a Val: just ask for its string out:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 650.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (Val v = ReturnSomeVal\(\);) Tj T* (string repr1 = v;              // Method 1:) Tj T* (string repr2 = Stringize\(v\);   // Method 2:) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 618.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .247608 Tw (Method 1 and Method 2 of stringizing above do exactly the same thing, except if the Val v in question is a) Tj T* 0 Tw (string: in that case Method 2 puts quotes around the string, Method 1 does not:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 561.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (Val v = string\("123"\);) Tj T* (string repr1 = v;               // repr1 is  123     \(no quotes!\)) Tj T* (string repr2 = Stringize\(v\);    // repr2 is '123') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 531.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (C++ Arrs and Python Lists) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 501.4236 cm
q
BT 1 0 0 1 0 14 Tm 1.02881 Tw 12 TL /F1 10 Tf 0 0 0 rg (The Val supports two main kinds of containers: The ) Tj /F3 10 Tf (Tab ) Tj /F1 10 Tf (\(which is just like the Python Dictionaries, see) Tj T* 0 Tw (below\) and the ) Tj /F3 10 Tf (Arr) Tj /F1 10 Tf (. Arrs are just like Python Lists: they are dynamically resizing arrays of Vals.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 495.4236 cm
Q
q
1 0 0 1 62.69291 343.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 140.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Python:) Tj T* ET
Q
Q
q
1 0 0 1 20 83.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = [1, 2.2, 'three']        # Python List) Tj T* (>) Tj (>) Tj (>) Tj ( a.append\("hello"\)) Tj T* (>) Tj (>) Tj (>) Tj ( print a.length\(\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 57.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (C++:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (Arr a = "[1, 2.2, 'three']";    // C++ Arr \(like Python List\)) Tj T* (a.append\("hello"\);) Tj T* (cout ) Tj (<) Tj (<) Tj ( a.length\(\) ) Tj (<) Tj (<) Tj ( endl;) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 343.0236 cm
Q
q
1 0 0 1 62.69291 313.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .27881 Tw (The Array class comes from the OpenContainers collection: it is NOT the STL array class \(there is further) Tj T* 0 Tw (discussion of why we choose not to use in the FAQ\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 283.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .112927 Tw (The OpenContainers Array class is templatized on the type it supports. For using Arrays with Val, the type) Tj T* 0 Tw (needs to be either POD \(Plain Old Data which is ints, reals, or complexes\) or Val. For example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 202.6416 cm
q
q
.988825 0 0 .988825 0 0 cm
q
1 0 0 1 6.6 6.674587 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (Array) Tj (<) Tj (real_8) Tj (>) Tj ( demod_data\(10\); // Initial empty: Reserve space for 10 elements) Tj T* (demod_data.fill\(0.0\);         // Fill to capacity \(10\) with 0.0) Tj T* (for \(int ii=0; ii) Tj (<) Tj (demod_data.length\(\); ii++\) {) Tj T* (   demod_data[ii] = demod_data[ii] + ii;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 158.6416 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .91811 Tw (One potential gotcha with Arrays is that they are ALWAYS constructed empty, with an initial capacity. If) Tj T* 0 Tw .771567 Tw (you wish to put elements in the array, you need to either fill the Array \(as above\), or append/prepend to) Tj T* 0 Tw (the Array. For example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 78.2596 cm
q
q
.988825 0 0 .988825 0 0 cm
q
1 0 0 1 6.6 6.674587 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (Array) Tj (<) Tj (complex_8) Tj (>) Tj ( ac\(100\);  // Initially empty: Reserve Space for 100 elements) Tj T* (for \(int ii=0; ii) Tj (<) Tj (20; ii++\) {) Tj T* (   ac.append\(complex_8\(1,0\)\);) Tj T* (}) Tj T* (cout ) Tj (<) Tj (<) Tj ( ac.length\(\) ) Tj (<) Tj (<) Tj ( endl;  // Only 20 items in array, space for 80 more) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R107': class PDFStream 
107 0 obj
% page stream
<< /Length 5750 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (or:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 707.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (Array) Tj (<) Tj (int_2) Tj (>) Tj ( ai\(100\);) Tj T* (ai.fill\(777\);   // Fill array to capacity with 100 777s) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 663.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .827984 Tw (If you exceed the capacity of the Array when you append/prepend, then the class automatically doubles) Tj T* 0 Tw 1.121988 Tw (the capacity and copies all the old data into the resized memory. This can bite you if you hold onto an) Tj T* 0 Tw (element for too long:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 582.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (Array) Tj (<) Tj (int_1) Tj (>) Tj ( a\(1\);  // Capacity of 1, length of 0) Tj T* (a.fill\(127\);        // Capacity of 1, length of 1) Tj T* (int_1) Tj (&) Tj ( hold_too_long = a[0];  // Currently valid reference to first data) Tj T* (a.append\(100\);      // Array resizes, hold_too_long is now INVALID) Tj T* (cout ) Tj (<) Tj (<) Tj ( hold_too_long ) Tj (<) Tj (<) Tj ( endl; ///   ??? Seg fault ???) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 550.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.336235 Tw (The Array is implemented as a contiguous piece of memory so that array accesses are constant time.) Tj T* 0 Tw (This is also important if you need to interface with legacy C routines:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 481.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (Array) Tj (<) Tj (char) Tj (>) Tj ( a\(5\);) Tj T* (a.fill\('\\0'\);) Tj T* (char* data = a.data\(\);  // Returns ) Tj (&) Tj (a[0]) Tj T* (strcpy\(data, "hi"\);     // expect contiguous piece of memory) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 461.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (See C++ API document for documentation on the Array class. It is a basic OpenContainers inline class.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 419.4236 cm
q
BT 1 0 0 1 0 26 Tm .35332 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (Arr ) Tj /F1 10 Tf (is essentially an ) Tj /F3 10 Tf (Array) Tj (<) Tj (Val) Tj (>) Tj /F1 10 Tf (, with one exception: it has a few extra methods to make them easier) Tj T* 0 Tw .223798 Tw (to use with Vals and Tabs. The most important is the constructor: If you give an Arr a string, it will attempt) Tj T* 0 Tw (to parse it as Python would:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 386.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (Arr a = "[1,2.2,'three']";   // Parses the string literal) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 366.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This is the same as:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 297.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (Arr a;) Tj T* (a.append\(1\);) Tj T* (a.append\(2.2\);) Tj T* (a.append\("three"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 277.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The string literal can be as complex as you want, with recursive Arrs and Tabs inside it:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 243.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (Arr a = "[1, 2.2, ['sub',2], {'a':1, 0: None}]";) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 223.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Basically, you should be able to construct literals just as you would in Python.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 193.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (C++ Tabs and Python Dictionaries) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 139.8236 cm
q
BT 1 0 0 1 0 38 Tm .59832 Tw 12 TL /F1 10 Tf 0 0 0 rg (A ) Tj /F3 10 Tf (Tab ) Tj /F1 10 Tf (is the C++ equivalent of the Python Dictionary. You may notice that the Val/Tab/Arr all have three) Tj T* 0 Tw .770542 Tw (letters: This is on purpose. Since we are trying to emulate a dynamic language where you don't need to) Tj T* 0 Tw .67237 Tw (put an explicit type on, we are trying to save typing by having Val/Tab/Arr all be three letters. A ) Tj /F3 10 Tf (Tab ) Tj /F1 10 Tf (is a) Tj T* 0 Tw (dynamic, recursive, heterogeneous container with key-value pairs.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 133.8236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 45.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Python:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( t = { }                            # Empty Table) Tj T* (>) Tj (>) Tj (>) Tj ( t = {'a': 1, 0: 'something' }      # table with 2 key-value pairs) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R108': class PDFStream 
108 0 obj
% page stream
<< /Length 5675 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 620.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 107.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( for \(key, value\) in t.iteritems\(\): # Iterate through table) Tj T* (...   print key, value) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 81.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (C++:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab t;                                // Empty table) Tj T* (Tab t = "{ 'a': 1, 0:'something'}";   // Table with 2 key-value pairs) Tj T* (for \(It ii\(t\); ii\(\); \) {              // Iterate through table) Tj T* (   cout ) Tj (<) Tj (<) Tj ( ii.key\(\) ) Tj (<) Tj (<) Tj ( ii.value\(\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 620.6236 cm
Q
q
1 0 0 1 62.69291 590.6236 cm
q
BT 1 0 0 1 0 14 Tm 1.161163 Tw 12 TL /F1 10 Tf 0 0 0 rg (A ) Tj /F3 10 Tf (Tab ) Tj /F1 10 Tf (is initially constructed empty, unless you provide a string literal \(much like ) Tj /F3 10 Tf (Arr ) Tj /F1 10 Tf (above\). Items are) Tj T* 0 Tw (usually inserted into the ) Tj /F3 10 Tf (Tab ) Tj /F1 10 Tf (one of two ways:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 533.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (Tab t;) Tj T* (t.insertKeyAndValue\("key", 1.23\);         //) Tj T* (t.insertKeyAndValue\(0, Arr\("[1,2,3]"\)\);   // Direct insert) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 513.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (or:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 468.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (t["key"] = 1.23;) Tj T* (t[0]     = Arr\("[1,2,3]"\);                // []) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 448.2236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Notice that the keys and values of the ) Tj /F3 10 Tf (Tab ) Tj /F1 10 Tf (are both of type ) Tj /F3 10 Tf (Val) Tj /F1 10 Tf (: They can be any type Val supports.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 430.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Values are looked up a number of ways:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 349.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab t = "{'a': 1, 'b': 2 }";) Tj T* (cout ) Tj (<) Tj (<) Tj ( t["a"];                // using [], value 1) Tj T* (cout ) Tj (<) Tj (<) Tj ( t.contains\("c"\);       // is the key "in" there?  No in this case) Tj T* (cout ) Tj (<) Tj (<) Tj ( t.lookup\("a"\);) Tj T* (cout ) Tj (<) Tj (<) Tj ( t\("a"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 305.0236 cm
q
BT 1 0 0 1 0 26 Tm .709985 Tw 12 TL /F1 10 Tf 0 0 0 rg (A ) Tj /F3 10 Tf (Tab ) Tj /F1 10 Tf (is implemented as an ) Tj /F3 10 Tf (AVLHashT) Tj /F1 10 Tf (, which is an extensible HashTable that handles growth well, but) Tj T* 0 Tw .969983 Tw (still very fast lookups and removals. See the OpenContainers documentation for more discussion of the) Tj T* 0 Tw (the different HashTables in OpenContainers.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 275.0236 cm
q
BT 1 0 0 1 0 14 Tm .539513 Tw 12 TL /F1 10 Tf 0 0 0 rg (Note that ) Tj /F3 10 Tf ([] ) Tj /F1 10 Tf (and ) Tj /F3 10 Tf (\(\) ) Tj /F1 10 Tf (for lookup have slightly different semantics: if the key is in the table, they do the same) Tj T* 0 Tw (thing:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 217.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab t = "{ 'a':1, 'b': 2 }";) Tj T* (cout ) Tj (<) Tj (<) Tj ( t["a"];   // Okay, in there, return Val 1) Tj T* (cout ) Tj (<) Tj (<) Tj ( t\("a"\);   // Okay, in there, return Val 1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 185.8236 cm
q
BT 1 0 0 1 0 14 Tm .698084 Tw 12 TL /F1 10 Tf 0 0 0 rg (If, however, the key is not in there, the two do different things. The ) Tj /F3 10 Tf ([] ) Tj /F1 10 Tf (operator will insert the key into the) Tj T* 0 Tw (table and give it a default value of ) Tj /F3 10 Tf (None) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 152.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (cout ) Tj (<) Tj (<) Tj ( t["NOT THERE"];  // Inserts key "NOT THERE" into table with None) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 132.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Using operator ) Tj /F3 10 Tf (\(\)) Tj /F1 10 Tf (, if the key is not there, an exception will be thrown:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 87.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (try {) Tj T* (   cout ) Tj (<) Tj (<) Tj ( t\("NOT THERE"\);) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R109': class PDFStream 
109 0 obj
% page stream
<< /Length 4513 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 715.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (} catch \(exception) Tj (&) Tj ( e\) {) Tj T* (   cerr ) Tj (<) Tj (<) Tj ( e.what\(\);    // Error message describing which key was NOT THERE) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 671.8236 cm
q
BT 1 0 0 1 0 26 Tm 1.648935 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf ([] ) Tj /F1 10 Tf (notation is useful for assignment, because it allows us to change the table using the ) Tj /F3 10 Tf ([]) Tj /F1 10 Tf (. The ) Tj /F3 10 Tf (\(\)) Tj T* 0 Tw 1.23881 Tw /F1 10 Tf (notation is useful for lookup, because you don't want to change anything when you are just looking up) Tj T* 0 Tw (something:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 578.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab t;) Tj T* (t["a"] = 3.3;     // Inserts "a":None into table, then overwrites with 3.3) Tj T*  T*  T* (Val) Tj (&) Tj ( nv = t\("a"\); // Lookup, gives us a reference to the Val in the table) Tj T* (                      // \(and throws an exception if not there\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 558.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (See the FAQ for more discussion of ) Tj /F3 10 Tf (\(\) ) Tj /F1 10 Tf (vs. ) Tj /F3 10 Tf ([]) Tj /F1 10 Tf (. The basic rule: use ) Tj /F3 10 Tf ([] ) Tj /F1 10 Tf (for assignment, ) Tj /F3 10 Tf (\(\) ) Tj /F1 10 Tf (for lookup.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 528.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Nested Lookup and Assignment) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 498.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .136098 Tw (Tabs and Arrs can also handle cascading lookups and assignments. This makes it easy to get Vals in and) Tj T* 0 Tw (out of nested structures: Again, this should feel very much like Python:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 405.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab t = "{'nest': { 'a':[0,1,2] }, 'b': 2 }";) Tj T* (Val) Tj (&) Tj ( inside = t\("nest"\)\("a"\)\(0\);   // reference to the Val containing 0) Tj T* (inside = 777;) Tj T* (cout ) Tj (<) Tj (<) Tj ( t;      // {'nest': { 'a':[777,1,2] }, 'b': 2 }";) Tj T*  T* (t["nest"]["a"][0] = 999;  // Cascading assignment) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 373.4236 cm
q
BT 1 0 0 1 0 14 Tm .507765 Tw 12 TL /F1 10 Tf 0 0 0 rg (All lookups with Tabs and Arrs typically return ) Tj /F3 10 Tf (Val) Tj (& ) Tj /F1 10 Tf (so they can be used for lookups and assignment like) Tj T* 0 Tw (above.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 343.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Tricks and Tips for Efficient Tab and Arr Usage) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 313.4236 cm
q
BT 1 0 0 1 0 14 Tm .290542 Tw 12 TL /F1 10 Tf 0 0 0 rg (When you start getting into more complicated ) Tj /F3 10 Tf (Arr ) Tj /F1 10 Tf (and ) Tj /F3 10 Tf (Tab ) Tj /F1 10 Tf (usage, there are tricks and tips that are helpful) Tj T* 0 Tw (for more efficient usage.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 271.4236 cm
q
BT 1 0 0 1 0 26 Tm .381894 Tw 12 TL /F1 10 Tf 0 0 0 rg (First of all, as a debug tool or simply readability tool, there is a prettyPrint method on ) Tj /F3 10 Tf (Val) Tj /F1 10 Tf (, ) Tj /F3 10 Tf (Tab) Tj /F1 10 Tf (, and ) Tj /F3 10 Tf (Arr) Tj /F1 10 Tf (. If) Tj T* 0 Tw .668221 Tw (there is complex, nested structure in a ) Tj /F3 10 Tf (Val/Tab/Arr) Tj /F1 10 Tf (, ) Tj /F3 10 Tf (prettyPrint ) Tj /F1 10 Tf (is a nice human readable way to print the) Tj T* 0 Tw (data:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 106.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 156 re B*
Q
q
BT 1 0 0 1 0 134 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab t = "{'nest': {'a',1 } }";) Tj T*  T* (cout ) Tj (<) Tj (<) Tj ( t ) Tj (<) Tj (<) Tj ( endl;) Tj T* (// OUTPUT:  {'nest':{'a':1}}) Tj T*  T* (t.prettyPrint\(cout\);) Tj T* (// OUTPUT:) Tj T* ({) Tj T* (    'nest': {) Tj T* (        'a': 1) Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R110': class PDFStream 
110 0 obj
% page stream
<< /Length 6027 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
BT 1 0 0 1 0 26 Tm 3.61229 Tw 12 TL /F1 10 Tf 0 0 0 rg (Notice that both ways are still backwards-compatible with Python Dictionaries \(in fact, you could) Tj T* 0 Tw 1.526412 Tw (cut-and-paste the dictionaries directly into Python and they would still work\), but the ) Tj /F3 10 Tf (prettyPrint ) Tj /F1 10 Tf (shows) Tj T* 0 Tw (nested structure a lot better, even if it is a little wordy.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 711.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If you need OpalTable output, there is a ) Tj /F3 10 Tf (prettyPrintOpal ) Tj /F1 10 Tf (routine as well.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 684.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F5 12.5 Tf 0 0 0 rg (Copying) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 654.0236 cm
q
BT 1 0 0 1 0 14 Tm 1.747045 Tw 12 TL /F1 10 Tf 0 0 0 rg (Whenever you copy a ) Tj /F3 10 Tf (Tab ) Tj /F1 10 Tf (or an ) Tj /F3 10 Tf (Arr) Tj /F1 10 Tf (, they are copied by deep-copy. This means the entire recursive) Tj T* 0 Tw (structure is copied:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 560.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab t = "{'nest': {'a':1 } }";) Tj T* (Tab deep_copy = t;   // Full Deep Copy) Tj T*  T* (t["new"] = 1;  // No effect on deep_copy table) Tj T* (cout ) Tj (<) Tj (<) Tj ( t ) Tj (<) Tj (<) Tj ( endl;               // {'nest':{'a':1},'new':1}) Tj T* (cout ) Tj (<) Tj (<) Tj ( deep_copy ) Tj (<) Tj (<) Tj ( endl;       // {'nest':{'a':1}}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 516.8236 cm
q
BT 1 0 0 1 0 26 Tm .393145 Tw 12 TL /F1 10 Tf 0 0 0 rg (Once a copy is made under OpenContainers, it is a separate copy. \(There is way to share ) Tj /F3 10 Tf (Tabs ) Tj /F1 10 Tf (and ) Tj /F3 10 Tf (Arrs) Tj T* 0 Tw 1.583516 Tw /F1 10 Tf (using Proxy: see the FAQ and more examples below\). Note that this is a departure from how Python) Tj T* 0 Tw (copies lists and dictionaries around:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 423.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (# Copying in Python: by reference by default) Tj T* (>) Tj (>) Tj (>) Tj ( t = {'nest': {'a':1 } }) Tj T* (>) Tj (>) Tj (>) Tj ( copy = t;) Tj T* (>) Tj (>) Tj (>) Tj ( t["new"] = 1   // copy and t 'share' the dictionary) Tj T* (>) Tj (>) Tj (>) Tj ( print t        // {'nest':{'a':1},'new':1}) Tj T* (>) Tj (>) Tj (>) Tj ( print copy     // {'nest':{'a':1},'new':1}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 319.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL .609318 Tw (The reason for this two fold: threads and understandability. From a threads perspective, it almost always) Tj T* 0 Tw .565777 Tw (makes sense to pass a separate copy of data so each thread can work independently on its own data. If) Tj T* 0 Tw .20881 Tw (you are going to share with threads, sharing should be EXPLICIT for the sake of human readability. Thus,) Tj T* 0 Tw .330988 Tw (if you choose to pass a pointer to data, that's fine, but experience has taught us \(from the Midas 2k days,) Tj T* 0 Tw .462651 Tw (with systems built from 100s of threads\) that threads almost always work better with EXPLICITLY shared) Tj T* 0 Tw .504104 Tw (data, otherwise every thread should have its own copy of data \(to avoid problems like false sharing, race) Tj T* 0 Tw .479979 Tw (conditions, over-synchronization, and linearizing\). Implicitly shared data always seems to cause collateral) Tj T* 0 Tw (damage that's hard to trace.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 217.6236 cm
q
BT 1 0 0 1 0 86 Tm .013516 Tw 12 TL /F1 10 Tf 0 0 0 rg (We make this threads distinction for another reason: Python can be slow. We encourage people to write in) Tj T* 0 Tw .196654 Tw (Python when possible: Python code tends to be simpler, easier to read, and easier to maintain. ) Tj /F3 10 Tf (But, ) Tj /F1 10 Tf (if you) Tj T* 0 Tw .648488 Tw (need all the speed of a compiled language like C++, you probably also need all the tools you can use in) Tj T* 0 Tw .814987 Tw (C++ to make code faster: one such tool is truly concurrent threads \(which Python does not have\). So, if) Tj T* 0 Tw .481488 Tw (you are already in C++, there is a good chance you need to use real threads for speedup, so you should) Tj T* 0 Tw 1.63998 Tw (using data structures that are efficient and well-behaved with threads. [The OpenContainers collection) Tj T* 0 Tw .656303 Tw (was extracted from Midas 2k: one of the main design goals of the Midas 2k collections was the ability to) Tj T* 0 Tw (work with 100s of threads in an application].) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 199.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Why Deep Copy by Default?) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 157.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .960941 Tw (If you are in Python, everything is fast enough. If you are in C++, there is a good chance you need the) Tj T* 0 Tw .442651 Tw (extra speed of compiled language. Let's allow the C++ programmer all the tools and abstractions needed) Tj T* 0 Tw (to get extra speed, including threads.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 130.6236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F5 12.5 Tf 0 0 0 rg (References:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 112.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\(Feel free to skip this section on first reading\)) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 82.62362 cm
q
BT 1 0 0 1 0 14 Tm .334724 Tw 12 TL /F1 10 Tf 0 0 0 rg (We mentioned earlier that the name of basic class is ) Tj /F3 10 Tf (Val ) Tj /F1 10 Tf (to remind ourselves that all things are copied by ) Tj T* 0 Tw .296412 Tw (value \(deep-copy, see the previous section\). However, this sometimes means you make extra copies that) Tj T* 0 Tw ET
Q
Q
 
endstream
endobj
% 'R111': class PDFStream 
111 0 obj
% page stream
<< /Length 4607 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (you don't mean to:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 683.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (SomeFunction\(Tab t\);          // prototype) Tj T*  T* (Tab t\("{'a':1 }"\);) Tj T* (SomeFunction\(t\);      // Will deep copy t, so SomeFunction has own copy) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 651.8236 cm
q
BT 1 0 0 1 0 14 Tm 2.46528 Tw 12 TL /F1 10 Tf 0 0 0 rg (You may just need a read-reference to the given Tab, which means you could just as easily have) Tj T* 0 Tw (SomeFunction take a ) Tj /F3 10 Tf (Tab) Tj (& ) Tj /F1 10 Tf (\(a Tab reference\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 582.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (SomeFunction\(const Tab) Tj (&) Tj ( t\);   // Passes EXPLICIT reference to SomeFunction) Tj T*  T* (Tab t\("{'a':1 }"\);) Tj T* (SomeFunction\(t\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 538.6236 cm
q
BT 1 0 0 1 0 26 Tm .742619 Tw 12 TL /F1 10 Tf 0 0 0 rg (When you pass the reference in, we are essentially just passing the pointer to the Tab of interest: this a) Tj T* 0 Tw .173672 Tw (very fast copy, and we won't accidentally change the Tab because it is const Tab) Tj (&) Tj (. Note that when we do) Tj T* 0 Tw (this, we are EXPLICITLY sharing the Tab.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 508.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.136353 Tw (A similar problem is when you copy a Tab in or out of a Val: you may be doing extra copies you don't) Tj T* 0 Tw (mean to:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 439.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (Tab t = "{'a':1}";) Tj T* (Val v = t;          // Two copies of the table: one in t, one in v) Tj T*  T* (Tab t_out = v;     // Three copies of the table, t, v, and t_out) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 395.4236 cm
q
BT 1 0 0 1 0 26 Tm .529036 Tw 12 TL /F1 10 Tf 0 0 0 rg (Let's tackle the second problem first \(where ) Tj /F3 10 Tf (t_out ) Tj /F1 10 Tf (is an extra copy\), as it gives us a hint how to deal with) Tj T* 0 Tw .228876 Tw (the first problem. When we ask for t_out, we can ask EXPLICITLY to share the implementation of the Tab) Tj T* 0 Tw (inside of v. In other words:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 326.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab) Tj (&) Tj ( t_ref = v;    // EXPLICITLY share the copy of the table) Tj T* (                   // contained inside of v) Tj T*  T* (t_ref["insert"] = 1;  // Inserts into table inside of v) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 294.2236 cm
q
BT 1 0 0 1 0 14 Tm .361729 Tw 12 TL /F1 10 Tf 0 0 0 rg (Strictly speaking, you can't ask for a Tab from a Val, you can only ask for a Tab) Tj (&) Tj (. So when you ask for a) Tj T* 0 Tw (Tab, what really happens is:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 201.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab) Tj (&) Tj ( t_ref = v;    // Can only get a Tab) Tj (&) Tj ( from a v) Tj T* (Tab t_copy\(t_ref\); // Invoke copy constructor from reference) Tj T*  T* (// EQUIVALENT TO:) Tj T*  T* (Tab t_copy = v;) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 181.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Let's go back to the original problem, avoiding the copy in:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 135.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (Tab t = "{'a':1}";) Tj T* (Val v = t;          // Two copies of the table: one in t, one in v) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 115.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If we just wanted one copy of a table copied into v, then we probably wanted something like this:) Tj T* ET
Q
Q
 
endstream
endobj
% 'R112': class PDFStream 
112 0 obj
% page stream
<< /Length 5067 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 715.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val v = Tab\(\);  // empty table) Tj T* (Tab) Tj (&) Tj ( t = v;) Tj T* (t["a"] = 1;     // Put things into table inside of v) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 683.8236 cm
q
BT 1 0 0 1 0 14 Tm .446098 Tw 12 TL /F1 10 Tf 0 0 0 rg (Note that when using Arrs, the same principles work: you ask for an Arr) Tj (& when you want EXPLICITLY to) Tj T* 0 Tw (share. Now of course, Val supports [], so sometimes it's easier to:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 638.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (Val v = Tab\(\);) Tj T* (t["a"] = 1;     // Put things inside table inside of v) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 608.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (C++ OTab and the Python OrderedDict) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 566.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .144692 Tw (As of PicklingTools release 1.2.0, this is a new type of container: the OTab \(Ordered Tab\), which behaves) Tj T* 0 Tw .811412 Tw (just like Python OrderedDict. Unfortunately, the Python OrderedDict is only supported well in Python 2.7) Tj T* 0 Tw (and up, so your Python may not understand it yet:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 509.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import collections  # Does My Python support the OrderedDict?) Tj T* (>) Tj (>) Tj (>) Tj ( a = collections.OrderedDict\(\([\('a', 1\), \('b', 2\)]\)) Tj T* (                                   # Only in Python 2.7 and above) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 477.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .276457 Tw (For all intensive purposes, OrderedDict is like the Python built-in dict, except that it preserves the order of) Tj T* 0 Tw (insertion. This is most visible when iterating through the table:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 408.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( for \(key, values\) in a.iteritems\(\) :) Tj T* (...    print key, value) Tj T* (a 1) Tj T* (b 2) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 364.2236 cm
q
BT 1 0 0 1 0 26 Tm .66881 Tw 12 TL /F1 10 Tf 0 0 0 rg (The order that the key-value pairs are listed in the constructor is preserved. For more information on the) Tj T* 0 Tw 4.97784 Tw (Python OrderedDict, take a look at PEP 327: Adding an ordered dictionary to collections at) Tj T* 0 Tw /F3 10 Tf (http://www.python.org/dev/peps/pep-0372/) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 334.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.237984 Tw (The OTab, which in the C++ equivalent of the Python OrderedDictionary behaves just like its brethren.) Tj T* 0 Tw (The OTab is very much like the Tab, except that it preserves the order of insertion:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 229.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F4 10 Tf 0 0 0 rg (// OTab is just like Tab) Tj T* (OTab o\("OrderedDict\(\([\('a', 1\), \('b', 2\)]\)"\);  // C++ respect Python syntax) Tj T* (o["goes at end"] = 500;) Tj T* (It ii\(o\);) Tj T* (while \(ii\(\)\) {) Tj T* (   cout ) Tj (<) Tj (<) Tj ( ii.key\(\) ) Tj (<) Tj (<) Tj ( " " ) Tj (<) Tj (<) Tj ( ii.value\(\);  // preserves order of insertion) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 173.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .538988 Tw (The OTab has exactly the same interface as the Tab. Adding the idea of order to the Tab is very simple,) Tj T* 0 Tw .804104 Tw (and doesn't cost much in terms of implementation \(it's essentially just an extra doubly linked list\): all the) Tj T* 0 Tw .961751 Tw (speed of the OTab is preserved for key-lookup, insertion, etc. In other words, the only real difference is) Tj T* 0 Tw (that the order of insertion is preserved so what when you print the table, you can see the order:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 91.82362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (OTab o;) Tj T* (o["a"] = 10;) Tj T* (o["b"] = 20;) Tj T* (o["c"] = 30;) Tj T* (cout ) Tj (<) Tj (<) Tj ( o ) Tj (<) Tj (<) Tj ( endl;  // o{ 'a':10, 'b':20, 'c':30 }) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R113': class PDFStream 
113 0 obj
% page stream
<< /Length 6086 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Contrast this to a plain dictionary:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 671.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab t;) Tj T* (t["a"] = 10;) Tj T* (t["b"] = 20;) Tj T* (t["c"] = 30;) Tj T* (cout ) Tj (<) Tj (<) Tj ( t ) Tj (<) Tj (<) Tj ( endl;  // { 'c':30, 'a':10, 'b':20 }  // Looks "random" order) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 627.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.198651 Tw (Intuitively, the OTab is easier for beginners to understand because the input matches the output better) Tj T* 0 Tw 2.462209 Tw (\(the beginner may ask "Why is my dict in some weird order?"\). The real utility is for bridging data) Tj T* 0 Tw (structures in other languages.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 621.8236 cm
Q
q
1 0 0 1 62.69291 531.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 60 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .633318 Tw (XML is an ordered data structure: the next version of PicklingTools will have tools to read/write) Tj T* 0 Tw (XML using OTab) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 54 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.014692 Tw (The C struct is inherently ordered: if you needed to go back and forth between some C struct) Tj T* 0 Tw .313735 Tw (and PicklingTools, an OTab would be essential \(in fact: this was the driving need: we needed to) Tj T* 0 Tw (be able to read/write BlueFiles which is C-struct based\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Windows .ini files are ordered) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 531.8236 cm
Q
q
1 0 0 1 62.69291 513.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The next version of the PicklingTools will have XML parsing tools and will rely heavily upon the OTab.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 495.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The C++ OTab currently supports a shorter syntax for OrderedDict:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 450.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (OTab o\("o{'a': 1}"\); // short syntax, an o just before first {) Tj T* (OTab longer\( "OrderedDict\([\('a',1\)]\)"\);  // Python syntax) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 406.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .256235 Tw (We are hoping to perhaps introduce the shorter syntax to Python: the longer Python syntax seems harder) Tj T* 0 Tw .07104 Tw (to read. The nice thing about the shorter syntax is that it looks JUST LIKE a normal dictionary, with braces) Tj T* 0 Tw (and such but only ONE EXTRA CHARACTER: the little o to indicate its ordered. Which is easier to read?:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 349.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (Val v1 = Eval\("o{ 'a':1, 'b':2, 'c':3 }"\);  // short syntax: ordered dict) Tj T*  T* (Val v2 = Eval\("OrderedDict\([\('a', 1\), \('b',2\), \('c',3\)]\)"\); // longer) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 319.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (C++ int_n and the Python arbitrary size ints \(long\)) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 289.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.49332 Tw (Python has an arbitrary sized integer so that when you exceed the precision of an int_u4 or int_u8, it) Tj T* 0 Tw (creates an arbitrary sized int \(essentially implemented as an array of bytes\).:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 244.0874 cm
q
q
.758866 0 0 .758866 0 0 cm
q
1 0 0 1 6.6 8.697189 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 618 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( google = 10**100  # Obviously bigger than an int_u8 can hold) Tj T* (>) Tj (>) Tj (>) Tj ( print google) Tj T* (10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 200.0874 cm
q
BT 1 0 0 1 0 26 Tm 1.024692 Tw 12 TL /F1 10 Tf 0 0 0 rg (The PicklingTools, as of release 1.2.0 has the ) Tj /F3 10 Tf (int_n ) Tj /F1 10 Tf (and the ) Tj /F3 10 Tf (int_un ) Tj /F1 10 Tf (types. The ) Tj /F3 10 Tf (int_n ) Tj /F1 10 Tf (corresponds to the) Tj T* 0 Tw .289431 Tw (Python arbitrary type. The ) Tj /F3 10 Tf (int_un ) Tj /F1 10 Tf (is an unsigned version. In general, they have just like other ints and can) Tj T* 0 Tw (combine with other ints:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 82.88742 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg (// Use of int_n just like normal ints) Tj T* (int_n google = 1;) Tj T* (for \(int ii=0; ii) Tj (<) Tj (100; ii++\) {) Tj T* (   google *= 10;) Tj T* (}) Tj T*  T* (int_n top = 1+ 2;) Tj T* (int_n bottom = 1000;) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R114': class PDFStream 
114 0 obj
% page stream
<< /Length 4291 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 739.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (int_n dd = top / bottom;) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 707.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .656303 Tw (The int_n is implemented as an array of unsigned ints. They work with Vals and other ints and reals just) Tj T* 0 Tw (like all the other ints:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 626.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (Val g = int_n\(100\);) Tj T* (int_n out = g;) Tj T*  T* (Val pi = 3.14159265;) Tj T* (int_n three = pi;  // truncates just like any int would) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 606.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Some integers constants are too large, but that's easy to get around with some strings:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 525.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (// literal too big, compiler complains and worse, truncates the number!) Tj T* (int_n t = 123456789123456789123456789;) Tj T*  T* (int_n a0 = StringToBigInt\("123456789123456789123456789"\); // Ah! Use string!) Tj T* (int_n a1 = "123456789123456789123456789"; // In PicklingTools 1.4.1 ) Tj (&) Tj ( above) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 493.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.903984 Tw (In general, the int_n/int_un seem to have roughly the same performance as the Python arbitrary ints) Tj T* 0 Tw (\(gleaned from an informal test computing combinatorics\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 463.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (C++ Tup and Python Tuples) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 445.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (As of version 1.2.0, the PicklingTools supports the Tup, which behaves very much like the Python tuple:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 304.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = \(1,2.2, 'three'\)) Tj T* (>) Tj (>) Tj (>) Tj ( print a[1]   # 2.2) Tj T* (>) Tj (>) Tj (>) Tj ( print len\(a\) # 3) Tj T* (>) Tj (>) Tj (>) Tj ( a.append\('NOT ALLOWED'\)  # ERROR!) Tj T*  T* (// C++) Tj T* (Tup a\(1, 2.2, "three"\);) Tj T* (cout ) Tj (<) Tj (<) Tj ( a[1];        // 2.2) Tj T* (cout ) Tj (<) Tj (<) Tj ( a.length\(\);  // 3) Tj T* (a.append\("NOT ALLOWED"\);   // Syntax Error) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 272.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .384198 Tw (The Tup, like the Python tuple, is just for building a "const" array that you can't change. Once gotcha: the) Tj T* 0 Tw (Tup does NOT EVAL the string arguments like the Tab, OTab and Arr:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 107.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 156 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 134 Tm /F4 10 Tf 12 TL (// OTab, Tab, Arr all evaluate the first argument when constructing) Tj T* (OTab o\("o{ 'a':1 }"\);  // Eval) Tj T* (Tab  t\("{'a': 2'} "\);  // Eval) Tj T* (Arr  a\("[1,2,3]"\);     // Eval) Tj T*  T* (Tup  u\("[1,2,3]"\);         // DOES NOT EVAL) Tj T* (                           // So, this is a tuple of 1 argument: a string) Tj T* (                           // \("[1,2,3]"\)) Tj T*  T* (Tup  uu\(Eval\("[1,2,3"]\)\);  // Force Eval) Tj T* (                           // So, this is a tuple of 1 argument: a list) Tj T* (                           // \([1,2,3]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 87.02362 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Tups are most useful when just constructing long argument trains of very different types in C++:) Tj T* ET
Q
Q
 
endstream
endobj
% 'R115': class PDFStream 
115 0 obj
% page stream
<< /Length 5569 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 739.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (Tup lotsa\(1, 2.2, "three", Tab\(\), Arr\("[1,2,3]"\), OTab\(\), None\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 719.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Tup is implemented as an array of Vals, where the number of Vals is fixed at construction time.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 689.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (C++ and cx_t) Tj (<) Tj (INT) Tj (>) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 635.8236 cm
q
BT 1 0 0 1 0 38 Tm .130514 Tw 12 TL /F1 10 Tf 0 0 0 rg (New in PicklingTools 1.6.0, a Val can carry a complex type for integers as well as floats and doubles. This) Tj T* 0 Tw 1.905984 Tw (is in recognition that certain DSP operations make good use of complex integers. For example: D2A) Tj T* 0 Tw .021751 Tw (sampling from an antenna: an array of data can be held as ) Tj /F4 10 Tf (cx_t) Tj (<) Tj (int_2) Tj (> ) Tj /F1 10 Tf (rather than ) Tj /F4 10 Tf (complex8 ) Tj /F1 10 Tf (for half) Tj T* 0 Tw (the cost of memory. For very large arrays of data, that can be a signficant savings.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 593.8236 cm
q
BT 1 0 0 1 0 26 Tm .477765 Tw 12 TL /F1 10 Tf 0 0 0 rg (The cx_t) Tj (<) Tj (> support fewer operations, \(mag2 still works but may roll over if the values get large\) as many) Tj T* 0 Tw .055697 Tw (operations \(such as magnitude\) require floating values. Note that these values can easily convert between) Tj T* 0 Tw (different precisions.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 563.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Sockets) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 533.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .139431 Tw (The MidasTalker in C++ in very similar to the Python MidasTalker, and this is on purpose. Similarly for the) Tj T* 0 Tw (MidasServer, MidasYeller and MidasListener.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 503.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .340574 Tw (Creating and using the basic socket classes from C++ should feel almost exactly the same as the Python) Tj T* 0 Tw (experience:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 422.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (#include "midastalker.h") Tj T* (MidasTalker mt\("host", port, SERIALIZE_M2K\);) Tj T* (mt.open\(\);) Tj T* (mt.send\(Tab\(" {'a':1} "\);) Tj T* (Val v = mt.recv\(\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 378.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .794651 Tw (The major difference \(besides the syntax\) is that the C++ components support all the major serialization) Tj T* 0 Tw .358443 Tw (protocols: M2k, OpenContainers, Python P0, P2, P-2. The Python components generally only support the) Tj T* 0 Tw (Python 0 \(and maybe P2\) protocols that are built-in.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 336.6236 cm
q
BT 1 0 0 1 0 26 Tm .753876 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are plenty of examples in the C++ area of the PicklingTools distribution. The best place to start is) Tj T* 0 Tw .07881 Tw (copy one of the examples \(following the example in the ) Tj /F3 10 Tf (Makefile.Linux) Tj /F1 10 Tf (\) and looking at some of the sample) Tj T* 0 Tw (source code.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 306.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (JSON) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 264.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .203318 Tw (JSON stands for JavaScript Object Notation and comes from the dictionaries \(or objects\) in the Javascript) Tj T* 0 Tw 2.14748 Tw (programming Language. Some people prefer JSON over XML as a language independent exchange) Tj T* 0 Tw (format because JSON tends to be smaller, easier to read, and have less overhead.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 210.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .64311 Tw (JSON is a text format for storing recursive, heterogeneous dictionaries and lists. JSON is very much like) Tj T* 0 Tw .598555 Tw (text-Python dictionaries: the differences are minor. In JSON, 'true', 'false', 'null' replace the 'True', 'False',) Tj T* 0 Tw .220697 Tw ('None' of Python dictionaries. JSON strings can only use double quotes \(whereas Python Dictionaries can) Tj T* 0 Tw (use either single quotes or double quotes\). Other than that, they are very similar.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 156.6236 cm
q
BT 1 0 0 1 0 38 Tm .341751 Tw 12 TL /F1 10 Tf 0 0 0 rg (The PicklingTools C++ library has the capability to read JSON and write JSON. \(By default, Python has a) Tj T* 0 Tw .380574 Tw (JSON library builtin: the ) Tj /F3 10 Tf (json ) Tj /F1 10 Tf (library: 'import json'\) The JSON text is converted to Tab/Arr/Vals, so that we) Tj T* 0 Tw .634692 Tw (can use the dictionaries in the standard Tab manipulations. For example, to read in file which contains a) Tj T* 0 Tw (JSON dictionary:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 87.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (#include "jsonreader.h") Tj T*  T* (Val result;) Tj T* (ReadValFromJSONFile\("json.txt",) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R116': class PDFStream 
116 0 obj
% page stream
<< /Length 6370 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (                    result\);) Tj T* (// 'result' is now a plain Tab we can manipulate) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 707.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Writing JSON is even easier: anything that is a Tab/Arr can be written into a stream:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 638.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (#include "jsonprint.h") Tj T*  T* (Val t=Tab\("{'a':1, 'b':2.2, 'c':'three'}"\);) Tj T* (JSONPrint\(std::cout, t\);   // Python dictionary written as JSON dict) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 618.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (These tools can also be useful when building HTTPClients and Servers.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 600.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\(Caveat: PicklingTools JSON doesn't support anything other than ASCII chars\)) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 570.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (HTTPClient and HTTPServer) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 528.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .244104 Tw (There are currently some tools in the PicklingTools to manipulate HTTP. The interfaces for the C++ are in) Tj T* 0 Tw 1.05104 Tw (flux to a certain extent, so they aren't quite ready for full exposure yet, but they are included in release) Tj T* 0 Tw (1.3.2 so we can get some feedback. The code does function.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 498.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .211751 Tw (In general, the HTTPClient looks/feels very much like the HTTPClient of the Python library: Take a look at) Tj T* 0 Tw (the "httpclient_ex.cc" for a sample of how to write a simple client.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 456.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .834597 Tw (The HTTPServer framework is much more complicated: the server framework has been overhauled and) Tj T* 0 Tw 2.02936 Tw (refactored so that we can support one connection per thread easily. A sample server is written: see) Tj T* 0 Tw ("httpserver_ex.cc".) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 426.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.091318 Tw (Currently, there is support for HTTP 1.0 and some support for HTTP 1.1 \(including chunked encoding\).) Tj T* 0 Tw (Some more work needs to be done here.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 396.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Conformance Checking) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 366.6236 cm
q
BT 1 0 0 1 0 14 Tm .685318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Is there a mechanism like XML schema for dictionaries? Yes, the ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (routine. This area describes) Tj T* 0 Tw (the C++ version, but there is a Python version which behaves almost identically.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 336.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.614724 Tw (One feature that has been asked for by a number of users is the ability to check a dictionary for) Tj T* 0 Tw (conformance. In other words:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 330.6236 cm
Q
q
1 0 0 1 62.69291 258.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 54 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Does a dict have the right number of keys?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Does a dict have the right structure?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Does a dict have the keys with the right names?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Are the types of the values the right types?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 258.6236 cm
Q
q
1 0 0 1 62.69291 228.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .066988 Tw (For example, if a user wants to send a message, where the host and port are required keys in a message,) Tj T* 0 Tw (the user wants to be able to "validate" a dictionary has the proper keys and/or types:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 183.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (// C++) Tj T* (Val message = Tab\("{'port':8888, 'host':'ai1', 'data':'ping'}"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 163.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A simple way to validate this message would be to manually check for all the keys:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 82.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (if \(message.contains\("port"\) ) Tj (&) Tj (&) Tj  T* (    message["port"].tag == 'i' ) Tj (&) Tj (&) Tj ( // check for int port) Tj T* (    message.contains\("host"\) ) Tj (&) Tj (&) Tj  T* (    message["host"].tag == 'a'\) { // check for string host) Tj T* (    //// Valid message) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R117': class PDFStream 
117 0 obj
% page stream
<< /Length 4648 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 715.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (} else {) Tj T* (    throw runtime_error\("Invalid Message to send"\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 647.8236 cm
q
BT 1 0 0 1 0 50 Tm .314198 Tw 12 TL /F1 10 Tf 0 0 0 rg (While this will work, it scales poorly for larger and larger structures. A simple idea is to have a "prototype") Tj T* 0 Tw .862927 Tw (message that we try to match against. If the message we want to send matches the prototype structure) Tj T* 0 Tw 1.738409 Tw (\(has the same keys and types\), then it is a valid message. As of PicklingTools 1.3.3, there is a new) Tj T* 0 Tw .385318 Tw (function called ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (which checks an instance against a prototype message. If the message to send) Tj T* 0 Tw (matches, then this is a valid message:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 506.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 132 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 110 Tm /F4 10 Tf 12 TL (#include "occonforms.h") Tj T*  T* (Val message  = Tab\("{'port':8888, 'host':'ai1', 'data':'ping'}"\);) Tj T* (Val prototype= Tab\("{'port':0,    'host':'',    'data':''    }"\);) Tj T*  T* (if \(Conforms\(message, prototype\)\) {) Tj T* (   //// Valid message) Tj T* (} else {) Tj T* (   throw runtime_error\("Invalid Message to send"\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 462.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .907209 Tw (Matching \(by default\) means that all keys of the prototype are present in the message and all the types) Tj T* 0 Tw 1.122209 Tw (\(int, string, etc\) of the message match the types of the prototype. Note that in the prototype, the actual) Tj T* 0 Tw (value doesn't matter as much as the type of the field.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 444.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If the message forgets the port, host, or data fields, then the ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (check would fail.:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 327.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F4 10 Tf 12 TL (Val message  = Tab\("{'port':8888}"\);) Tj T* (Val prototype= Tab\("{'port':0,    'host':'',    'data':''    }"\);) Tj T*  T* (// Conforms will return false!!) Tj T* (if \(Conforms\(message, prototype\)\) {) Tj T*  T* (}) Tj T* (// NO! this message does not conform) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 271.4236 cm
q
BT 1 0 0 1 0 38 Tm 1.16186 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are many kinds of options in performing matches. For instance, sometimes the type of the fields) Tj T* 0 Tw 1.724724 Tw (doesn't matter at all: all that matters is the presence of the keys and that the key names match. For) Tj T* 0 Tw .386807 Tw (instance, the data to send to a client may a table, a string, an int, etc. You can use ) Tj /F3 10 Tf (None ) Tj /F1 10 Tf (in the prototype) Tj T* 0 Tw (to specify a key can take any value:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 154.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F4 10 Tf 12 TL (Val message  = Tab\("{'port':8888, 'host':'ai1', 'data':'ping'}"\);) Tj T* (Val prototype= Tab\("{'port':0,    'host':'',    'data': None  }"\);) Tj T*  T* (if \(Conforms\(message, prototype\)\) {) Tj T* (   //// Valid message because None in prototype matches ANY TYPE!) Tj T* (} else {) Tj T* (   throw runtime_error\("Invalid Message to send"\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 122.2236 cm
q
BT 1 0 0 1 0 14 Tm 2.266654 Tw 12 TL /F1 10 Tf 0 0 0 rg (Since the data field in the prototype is ) Tj /F3 10 Tf (None) Tj /F1 10 Tf (, any type is valid! Thus the conform check above will) Tj T* 0 Tw (succeed. If we change the data to a table, or anything else, the conform check will still succeed:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 89.02362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (Val message  = Tab\("{'port':8888, 'host':'ai1', 'data':{'stuff':'123'}"\);) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R118': class PDFStream 
118 0 obj
% page stream
<< /Length 5829 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (As will:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 719.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (Val message  = Tab\("{'port':8888, 'host':'ai1', 'data':4 }"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 699.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Of course, we can send None data as well:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 666.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (Val message  = Tab\("{'port':8888, 'host':'ai1', 'data':None }"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 610.6236 cm
q
BT 1 0 0 1 0 38 Tm 1.57686 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are many types of conformance matching that make sense, depending on what a user may be) Tj T* 0 Tw .421567 Tw (doing. For instance, the user may only looking to make sure that ) Tj /F3 10 Tf (some ) Tj /F1 10 Tf (keys are there: other keys can be) Tj T* 0 Tw 2.105868 Tw (crucial, but others may be optional. For example, a key specifying the sender can be useful for our) Tj T* 0 Tw (message \(for debugging\), but not required:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 553.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (// The sender key is optional, but both of these tables are still valid) Tj T* (Val message1 = Tab\("{'port':8888, 'host':'ai1', 'sender':'ai2' }"\);) Tj T* (Val message2 = Tab\("{'port':8888, 'host':'ai1'  }"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 521.4236 cm
q
BT 1 0 0 1 0 14 Tm .979984 Tw 12 TL /F1 10 Tf 0 0 0 rg (The third argument to ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (\(called ) Tj /F3 10 Tf (exact_structure ) Tj /F1 10 Tf (in the code\) controls how pedantic the check is) Tj T* 0 Tw (when looking at the structure:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 515.4236 cm
Q
q
1 0 0 1 62.69291 443.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 30 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.633318 Tw (If exact_structure is true, then Conforms is checking that all keys in the prototype MUST be) Tj T* 0 Tw .334651 Tw (present AND that only those keys are present. In other words, the prototype and message must) Tj T* 0 Tw (have the same number of keys and all keys must match.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .002485 Tw (If exact_structure is false, then Conforms is simply checking that all the keys of the prototype are) Tj T* 0 Tw (present in the message: if there are more keys in the message, that is not a problem.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 443.4236 cm
Q
q
1 0 0 1 62.69291 425.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In summary:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 332.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (Conforms\(message, prototype, false\) -) Tj (>) Tj ( all keys of prototype must be in) Tj T* (                                       message and match) Tj T*  T* (Conforms\(message, prototype, true\)  -) Tj (>) Tj ( all keys of prototype must be in) Tj T* (                                       message and match AND) Tj T* (                                       number of keys must match prototype) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 312.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This means that:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 136.9144 cm
q
q
.988825 0 0 .988825 0 0 cm
q
1 0 0 1 6.6 6.674587 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 168 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val message1 = Tab\("{'port':8888, 'host':'ai1', 'data':4, 'sender':'ai2' }"\);) Tj T* (Val prototype= Tab\("{'port':0,    'host':'',    'data': None  }"\);) Tj T*  T*  T* (Conforms\(message1, prototype, true\) -) Tj (>) Tj ( false) Tj T* (// FAILS because message1 has too many keys,) Tj T* (// so doesn't have EXACTLY same structure) Tj T*  T*  T* (Conforms\(messag21, prototype, false\) would SUCCEED \(return true\)) Tj T* (// SUCCEEDS because message1 has all necessary keys,) Tj T* (// but message1 can have a few more \(because doesn't have to) Tj T* (// have EXACTLY the same structure\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 92.91439 cm
q
BT 1 0 0 1 0 26 Tm .317674 Tw 12 TL /F1 10 Tf 0 0 0 rg (In the ) Tj /F3 10 Tf (exact_structure ) Tj /F1 10 Tf (parameter specifies how structure and keys match, the next parameter ) Tj /F3 10 Tf (type_match) Tj T* 0 Tw 1.174597 Tw /F1 10 Tf (specifies how ) Tj /F3 10 Tf (values ) Tj /F1 10 Tf (match. In particular, the ) Tj /F3 10 Tf (type_match ) Tj /F1 10 Tf (parameter control how matching works when) Tj T* 0 Tw (comparing the types of two entries in a table or array. By default, types must match exactly:) Tj T* ET
Q
Q
 
endstream
endobj
% 'R119': class PDFStream 
119 0 obj
% page stream
<< /Length 4105 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 691.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (Val mesg     = Tab\("{'port':8888, 'host':'ai1' }"\);) Tj T* (Val proto    = Tab\("{'port':0,    'host':''    }"\);) Tj T*  T* (if \(Conforms\(mesg, proto, true, EXACT_MATCH\)\) { ... }) Tj T* (// same as Conforms\(mesg, proto, true\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 647.8236 cm
q
BT 1 0 0 1 0 26 Tm .918735 Tw 12 TL /F1 10 Tf 0 0 0 rg (The above ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (return true because \(a\) the structure matches but more importantly \(b\) the type of) Tj T* 0 Tw .050465 Tw /F3 10 Tf (port ) Tj /F1 10 Tf (is an ) Tj /F3 10 Tf (int ) Tj /F1 10 Tf (and the type of ) Tj /F3 10 Tf (host ) Tj /F1 10 Tf (is a ) Tj /F3 10 Tf (string ) Tj /F1 10 Tf (and that matches what's in the prototype. The fourth argument) Tj T* 0 Tw (to ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (is a enumeration and defaults to ) Tj /F3 10 Tf (EXACT_MATCH) Tj /F1 10 Tf (. All values of the enumeration are:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 470.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 168 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F4 10 Tf 0 0 0 rg (EXACT_MATCH:  The types of compared values must match exactly) Tj T*  T* (LOOSE_MATCH:  All ints match each other) Tj T* (              All reals match each other) Tj T* (              All complexes match each other) Tj T* (              Tab/OTab match other Tab/OTab) Tj T* (              Arr/Tup match other Tab/OTab) Tj T* (              Array) Tj (<) Tj (POD1) Tj (>) Tj ( will match Array) Tj (<) Tj (POD2) Tj (>) Tj  T* (                  if POD1 loose matches POD2) Tj T*  T* (LOOSE_STRING_MATCH:) Tj T* (              Like LOOSE_MATCH, but strings in the) Tj T* (              given message will match anything.) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 450.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (An example showing different types of integers can match or not:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 309.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val mesg1 = int_8\(1\);) Tj T* (Val proto1 = int_4\(1\);) Tj T*  T*  T* (Conforms\(mesg1, proto1, true, EXACT_MATCH\) -) Tj (>) Tj ( return false) Tj T* (// FAILS because different types int_8 and int_4) Tj T*  T*  T* (Conforms\(mesg1, proto1, true, LOOSE_MATCH\) -) Tj (>) Tj ( return true) Tj T* (// SUCCEEDS because similar types \(2 types of int\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 289.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Another example showing how reals and ints don't match:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 148.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val mesg2 = real_8\(1.0\);) Tj T* (Val proto2 = int_4\(1\);) Tj T*  T*  T* (Conforms\(mesg2, proto1, true, EXACT_MATCH\) -) Tj (>) Tj ( return false) Tj T* (// FAILS because different types real_8 and int_4) Tj T*  T*  T* (Conforms\(mesg2, proto1, true, LOOSE_MATCH\) -) Tj (>) Tj ( return false) Tj T* (// FAILS because reals and ints NOT really same types) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 128.2236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (When ) Tj /F3 10 Tf (LOOSE_STRING_MATCH ) Tj /F1 10 Tf (is turned on, strings in the message will match anything:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 83.02362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val mesg3 = "1234";) Tj T* (Val proto2 = int_4\(0\);) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R120': class PDFStream 
120 0 obj
% page stream
<< /Length 4620 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 607.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 156 re B*
Q
q
BT 1 0 0 1 0 134 Tm 12 TL /F4 10 Tf 0 0 0 rg  T*  T* (Conforms\(mesg3, proto3, true, EXACT_MATCH\) -) Tj (>) Tj ( return false) Tj T* (// FAILS because different types string and int_4) Tj T*  T*  T* (Conforms\(mesg3, proto3, true, LOOSE_MATCH\) -) Tj (>) Tj ( return false) Tj T* (// FAILS because reals and ints NOT really same types) Tj T*  T*  T* (Conforms\(mesg3, proto3, true, LOOSE_STRING_MATCH\) -) Tj (>) Tj ( return true) Tj T* (// SUCCEEDS because strings match anything under LOOSE_STRING_MATCH) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 551.8236 cm
q
BT 1 0 0 1 0 38 Tm 1.727126 Tw 12 TL /F1 10 Tf 0 0 0 rg (The purpose of ) Tj /F3 10 Tf (EXACT_MATCH ) Tj /F1 10 Tf (is to strictly enforce matches. The purpose of ) Tj /F3 10 Tf (LOOSE_MATCH ) Tj /F1 10 Tf (is to) Tj T* 0 Tw 2.203555 Tw (allow some leeway so that related types will match. The purpose of ) Tj /F3 10 Tf (LOOSE_STRING_MATCH ) Tj /F1 10 Tf (is to) Tj T* 0 Tw 2.237045 Tw (recognize that many times strings are filled into fields of a message, but are really supposed to be) Tj T* 0 Tw (something else \(like an int, a time, a list of people\); this makes it easier to move from XML to dictionaries.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 509.8236 cm
q
BT 1 0 0 1 0 26 Tm .392339 Tw 12 TL /F1 10 Tf 0 0 0 rg (If it's not clear from the above examples, all matching is performed ) Tj /F3 10 Tf (recursively ) Tj /F1 10 Tf (throughout the table: if the) Tj T* 0 Tw 1.222339 Tw (prototype has a nested dictionary inside of an array inside of a dictionary, the message must have the) Tj T* 0 Tw (same structure recursively:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 404.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val instance =Tab\("{'a':1, 'b':[1,2.2, {'nested': {} }] }"\);) Tj T* (Val prototype=Tab\("{'a':0, 'b':[0,0.0, {'nested': {} }] }"\);) Tj T*  T* (Conforms\(instance, prototype\) -) Tj (>) Tj ( true) Tj T*  T* (// Recursively checks that 'b' of instance matches 'b' of prototype,) Tj T* (// and that 'nested' of instance matches 'nested' of prototype) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 372.6236 cm
q
BT 1 0 0 1 0 14 Tm 2.555984 Tw 12 TL /F1 10 Tf 0 0 0 rg (One final note: sometimes when validation fails, it's unclear why the validation failed. By default, a) Tj T* 0 Tw (validation check simply returns ) Tj /F3 10 Tf (false ) Tj /F1 10 Tf (with no other information why the check failed:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 255.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg ( Val instance = 1.0;) Tj T* ( Val prototype= "";) Tj T*  T* ( // FAILS by returning false to show that 1.0 and "" mismatch types) Tj T* ( if \(Conforms\(instance, prototype, 1, EXACT_MATCH\)\) {) Tj T* (   ///  -) Tj (>) Tj ( return false) Tj T* ( }) Tj T* (// Why exactly did this fail?) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 187.4236 cm
q
BT 1 0 0 1 0 50 Tm .85498 Tw 12 TL /F1 10 Tf 0 0 0 rg (There is one final parameter on the ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (function call called ) Tj /F3 10 Tf (throw_exception_with_message ) Tj /F1 10 Tf (which) Tj T* 0 Tw .597356 Tw (can be set to true to give more information. By default, this parameter is set to false, which means failed) Tj T* 0 Tw 1.65104 Tw /F3 10 Tf (Conforms ) Tj /F1 10 Tf (calls return false to show failure. If, on the other hand, it is set the true, a ) Tj /F3 10 Tf (runtime_error ) Tj /F1 10 Tf (is) Tj T* 0 Tw 1.515868 Tw (thrown instead of a false return, and embedded in the exception text is information about why the fail) Tj T* 0 Tw (checked:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 82.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F4 10 Tf 0 0 0 rg (// FAILS by returning throwing runtime_error) Tj T* (bool result = false;) Tj T* (try {) Tj T* (   result = \(Conforms\(instance, prototype, 1, EXACT_MATCH, true\)\);) Tj T* (} catch \(const runtime_error) Tj (&) Tj ( re\) {) Tj T* (   cerr ) Tj (<) Tj (<) Tj ( re.what\(\) ) Tj (<) Tj (<) Tj ( endl;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R121': class PDFStream 
121 0 obj
% page stream
<< /Length 4451 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 655.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg  T* (// Prints out) Tj T* (*********FAILURE TO MATCH instance against prototype:) Tj T* ( instance=1.0 with type:d) Tj T* ( prototype='' with type:a) Tj T* ( exact_structure=1) Tj T* ( type_match=EXACT_MATCH) Tj T* (Requested Exact Match of two primitive types that didn't match) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 611.8236 cm
q
BT 1 0 0 1 0 26 Tm .83332 Tw 12 TL /F1 10 Tf 0 0 0 rg (Inside the error message is information on what the types were and why they didn't match: in this case,) Tj T* 0 Tw .812488 Tw (type 'd' doesn't match type 'a' in an ) Tj /F3 10 Tf (EXACT_MATCH) Tj /F1 10 Tf (. In a very large table, this can be very useful, as it) Tj T* 0 Tw (will tell you exactly what keys don't match. This avoids hunting around the table to find the problem.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 545.8236 cm
q
BT 1 0 0 1 0 50 Tm .76311 Tw 12 TL /F1 10 Tf 0 0 0 rg (This debugging mechanism ) Tj /F3 10 Tf (should not be turned on by default) Tj /F1 10 Tf (. It's very expensive to build error strings,) Tj T* 0 Tw .10436 Tw (and it's also expensive to throw exceptions to get information from a conformance check. We envision this) Tj T* 0 Tw 2.710751 Tw (mechanism as being most useful when debugging: For production code, the last parameter should) Tj T* 0 Tw .236651 Tw (probably always be false so that any conformance checks are fast. Probably only when debugging should) Tj T* 0 Tw (you set the last parameter to true.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 527.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Python version of the conforms module is very similar.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 497.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.371654 Tw (Test to see if an instance of a Python object conforms to the specification prototype. This is similar to) Tj T* 0 Tw (checking if an XML document conforms to an XML DTD or schema. For example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 80.62362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 408 re B*
Q
q
BT 1 0 0 1 0 386 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from conforms import conforms) Tj T* (>) Tj (>) Tj (>) Tj ( from conforms import EXACT_MATCH) Tj T* (>) Tj (>) Tj (>) Tj ( from conforms import LOOSE_MATCH) Tj T* (>) Tj (>) Tj (>) Tj ( from conforms import LOOSE_STRING_MATCH) Tj T*  T* (>) Tj (>) Tj (>) Tj ( # EXAMPLE 1) Tj T* (>) Tj (>) Tj (>) Tj ( ##### At a simple level, we want to exactly match a prototype:) Tj T* (>) Tj (>) Tj (>) Tj ( instance  = {'a':1, 'b':2.2, 'c':'three'}   # value to check) Tj T* (>) Tj (>) Tj (>) Tj ( prototype = {'a':0, 'b':0.0, 'c':""}    # prototype to check against) Tj T* (>) Tj (>) Tj (>) Tj ( if conforms\(instance, prototype, True, EXACT_MATCH\) :) Tj T* (...       # should be true: all keys match, and value TYPES match) Tj T*  T* (\(1\) Note that the instance has all the same keys as the prototype, so it) Tj T* (    matches) Tj T* (\(2\) Note that on the prototype table, that the VALUES aren't important,) Tj T* (    it's only matching the the TYPE of the val) Tj T*  T* (>) Tj (>) Tj (>) Tj ( # EXAMPLE 2) Tj T* (>) Tj (>) Tj (>) Tj ( #### We may not necessarily need all keys in the prototype) Tj T* (>) Tj (>) Tj (>) Tj ( instance1 = {'a':1, 'b':2.2, 'c':'three', 'd':777 }) Tj T* (>) Tj (>) Tj (>) Tj ( prototype1= {'a':0, 'b':0.0 }) Tj T* (>) Tj (>) Tj (>) Tj ( if conforms\(instance1, prototype1, False, EXACT_MATCH\) :) Tj T* (...    # should be true: instance has all keys of prototype) Tj T*  T* (\(1\) Note that the instance has more keys than the prototype, but that's) Tj T* (    okay because we specified exact_structure to be false.) Tj T* (\(2\) by setting EXACT_MATCH, all the types of the values that are) Tj T* (    compared MUST match \(not the value just the types of the values\)) Tj T*  T* (>) Tj (>) Tj (>) Tj ( # EXAMPLE 3) Tj T* (>) Tj (>) Tj (>) Tj ( #### If you just want the structure, but don't care about the) Tj T* (>) Tj (>) Tj (>) Tj ( #### types of the keys, use None in the prototype.) Tj T* (>) Tj (>) Tj (>) Tj ( instance2 = {'a':1, 'b':2.2, 'c':'three'}) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R122': class PDFStream 
122 0 obj
% page stream
<< /Length 5791 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 607.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 156 re B*
Q
q
BT 1 0 0 1 0 134 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( prototype2= {'a':None, 'b':None, 'c':None }) Tj T* (>) Tj (>) Tj (>) Tj ( if conforms\(instance2, prototype2, True, EXACT_MATCH\) :) Tj T* (...    # should be true, only comparing keys) Tj T*  T*  T* (>) Tj (>) Tj (>) Tj ( # EXAMPLE 4) Tj T* (>) Tj (>) Tj (>) Tj ( #### If you want to match value types, but want to be a little) Tj T* (>) Tj (>) Tj (>) Tj ( #### looser: sometimes your int is a long, sometimes an int_u4, etc.) Tj T* (>) Tj (>) Tj (>) Tj ( instance3 = {'a':1, 'b':2L, 'c':'three'}) Tj T* (>) Tj (>) Tj (>) Tj ( prototype3 ={'a':0, 'b':0, 'c':'three'}) Tj T* (>) Tj (>) Tj (>) Tj ( if conforms\(instance3, prototype3, true, LOOSE_MATCH\) :) Tj T* (...    # should be true because long\(2\) is a LOOSE_MATCH of int\(2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 539.8236 cm
q
BT 1 0 0 1 0 50 Tm .371751 Tw 12 TL /F1 10 Tf 0 0 0 rg (The Python version of the ) Tj /F3 10 Tf (conforms ) Tj /F1 10 Tf (module is a standalone module that can easily be dropped into other) Tj T* 0 Tw .632927 Tw (Python baselines. It is more general than the C++ version \(because Python has a plethora of types\) and) Tj T* 0 Tw .393145 Tw (so it returns slightly different results on things that are iterable: If a type is iterable, things are more easily) Tj T* 0 Tw 1.126651 Tw (comparable, and thus more likely to conform in a LOOSE_MATCH. In general, though, the Python and) Tj T* 0 Tw (C++ versions of conforms will give the same results.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 485.8236 cm
q
BT 1 0 0 1 0 38 Tm .473516 Tw 12 TL /F1 10 Tf 0 0 0 rg (In summary, the purpose of the ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (routines to all some simple kind of schema validation like XML) Tj T* 0 Tw .714724 Tw (has. Enough customers have asked for a feature like this that we felt it was time to embrace some XML) Tj T* 0 Tw .244104 Tw (schema-like mechanism for Python dictionaries. In the end, ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (is simply a tool you can use to help) Tj T* 0 Tw (when you make start constructing bigger dictionaries to make sure structure is preserved.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 452.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Java) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 422.8236 cm
q
BT 1 0 0 1 0 14 Tm 1.135984 Tw 12 TL /F1 10 Tf 0 0 0 rg (The Java experience is discussed in a self-contained document in the "Docs" area of the PicklingTools) Tj T* 0 Tw (distribution. It's also on the ) Tj 0 0 .501961 rg (http://picklingtools.com ) Tj 0 0 0 rg (website.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 392.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .597356 Tw (In general, Java support is still relatively new as of PicklingTools 1.5.1, but it has been used in some big) Tj T* 0 Tw (systems already.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 359.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (The X-Midas PTOOLS Experience) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 329.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.128651 Tw (The PicklingTools is an entire distribution with C++, Python, M2k, and X-Midas support. PTOOLS is an) Tj T* 0 Tw (option tree for using with X-Midas that comes with the PicklingTools distribution.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 311.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Everything we have learned in the previous sections applies to the PTOOLS option tree.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 269.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.555777 Tw (All of the code in the python subdirectory of PTOOLS is just a copy of the Python code from the) Tj T* 0 Tw 1.604431 Tw (distribution. The nice thing is that you don't have to set the PYTHONPATH to pick up that code from) Tj T* 0 Tw (XMPY: X-Midas handles that for you.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 227.8236 cm
q
BT 1 0 0 1 0 26 Tm .515444 Tw 12 TL /F1 10 Tf 0 0 0 rg (Most of the rest of PTOOLS is just a copy of the code from the C++ area. The C++ primitives in the ) Tj /F3 10 Tf (host) Tj T* 0 Tw .568876 Tw /F1 10 Tf (area of PTOOLS are essentially the same examples from the C++ area coded to fit inside of an X-Midas) Tj T* 0 Tw (C++ primitive.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 197.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.16186 Tw (The real reason to use PTOOLS is because you want to use the PicklingTools with X-Midas. PTOOLS) Tj T* 0 Tw (has been packaged to work with X-Midas as a standard option tree:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 140.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (X-Midas) Tj (>) Tj ( xmopt ptools /path/to/ptools/only/lowercase/characters) Tj T* (X-Midas) Tj (>) Tj ( xmp +ptools) Tj T* (X-Midas) Tj (>) Tj ( xmbopt ptools) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 84.62362 cm
q
BT 1 0 0 1 0 38 Tm .636457 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are plenty of examples in the host area demonstrating how to write an X-Midas C++ primitive with) Tj T* 0 Tw .045542 Tw (the PTOOLS libraries. The only major gotcha is that you have to be sure your own X-Midas C++ primitives) Tj T* 0 Tw .35332 Tw (use the same compiler and linking flags that the example host primitives do. Take a look at the ) Tj /F3 10 Tf (library.cfg) Tj T* 0 Tw /F1 10 Tf (and ) Tj /F3 10 Tf (primitives.cfg files in the `cfg/ ) Tj /F1 10 Tf (area for examples before you build your own primitives.) Tj T* ET
Q
Q
 
endstream
endobj
% 'R123': class PDFStream 
123 0 obj
% page stream
<< /Length 7724 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (The Midas 2k Experience) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 702.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .507765 Tw (Recall that the original goal of the PicklingTools was to work with legacy M2k applications. If you use the) Tj T* 0 Tw .10372 Tw (SERIALIZE_M2K option on your MidasTalker/MidasServer/MidasYeller/MidasListener, you should be able) Tj T* 0 Tw (to talk to the legacy M2k components \(OpalDaemon, OpalSocketMsg, UDPSocketMsg\) without problems.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 648.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.200697 Tw (The M2k area of the PicklingTools contains replacement components for some of the standard M2k) Tj T* 0 Tw 3.353314 Tw (components. In particular, the OpalPythonDaemon is a replacement for the OpalDaemon and the) Tj T* 0 Tw 15.59497 Tw (OpalPythonSocketMsg is a replacement for OpalSocketMsg. The original M2k) Tj T* 0 Tw (OpalDaemon/OpalSocketMsg components works fine, but are limited:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 642.0236 cm
Q
q
1 0 0 1 62.69291 560.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 70 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Original M2k components only supports Midas 2k serialization :) Tj T* ET
Q
Q
q
1 0 0 1 20 55 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (if you want to talk to them from Python, OpenContainers, out of luck) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Original M2k components don't support adaptive serialization:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.273318 Tw (the newer components can adopt to the message being sent to them so they can understand) Tj T* 0 Tw 3.616342 Tw (multiple clients with multiple protocols AT THE SAME TIME. Original components ONLY) Tj T* 0 Tw (understand one protocol.) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 560.0236 cm
Q
q
1 0 0 1 62.69291 530.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .10998 Tw (Later versions of legacy applications can use the OpalPythonDaemon and OpalPythonSocketMsg to open) Tj T* 0 Tw (their options: adaptive serialization and multiple serialization choices.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 488.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .714147 Tw (Essentially, the OpalPythonSocketMsg and OpalPythonDaemon close the loop: with them, Midas 2k can) Tj T* 0 Tw .708443 Tw (talk every serialization protocol---this means ANY system \(XMPY, X-Midas, raw C++, raw Python, Midas) Tj T* 0 Tw (2k\) can talk to your legacy M2k app.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 458.0236 cm
q
BT 1 0 0 1 0 14 Tm .653672 Tw 12 TL /F1 10 Tf 0 0 0 rg (To use the new Components, copy everything you need out of the ) Tj /F3 10 Tf (unit.cfg ) Tj /F1 10 Tf (in the M2k area, and copy all) Tj T* 0 Tw (the listed files into your own project.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 425.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (The Final Experience) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 371.0236 cm
q
BT 1 0 0 1 0 38 Tm .467485 Tw 12 TL /F1 10 Tf 0 0 0 rg (All the components from the PicklingTools system should be compatible. For a final test, the examples in) Tj T* 0 Tw .129318 Tw (each of the different areas should work together: For example, the ) Tj /F3 10 Tf (xmserver.cc ) Tj /F1 10 Tf (X-Midas primitive from the) Tj T* 0 Tw 7.198314 Tw (PTOOLS option tree should work with the Python ) Tj /F3 10 Tf (midastalker_ex2.py ) Tj /F1 10 Tf (and the raw C++) Tj T* 0 Tw /F3 10 Tf (midastalker_ex2.cc) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 341.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.49908 Tw (In the end, this is just a set of open source tools to help you get your job done. You are welcome to) Tj T* 0 Tw (change them and modify them as needed.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 308.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Appendix A: C++ and User-Defined Types) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 278.0236 cm
q
BT 1 0 0 1 0 14 Tm .380651 Tw 12 TL /F1 10 Tf 0 0 0 rg (A frequent criticism of the ) Tj /F3 10 Tf (Val/Tab/Arr ) Tj /F1 10 Tf (is "Why can't Vals contain user-defined types?" The simple answer) Tj T* 0 Tw (is that there are a lot of issues to be concerned with:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 272.0236 cm
Q
q
1 0 0 1 62.69291 146.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 120 cm
Q
q
1 0 0 1 20 120 cm
Q
q
1 0 0 1 20 108 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (a.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Is a new type a POD type? \(And thus bit-blittable?\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 102 cm
Q
q
1 0 0 1 20 90 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (b.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (How does a new type compare with other types of Vals?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 72 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 6.22 0 Td (c.) Tj T* -6.22 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (How does a new type serialize?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 54 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (d.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (How does a new type Stringize itself?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (e.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (How does a new type convert to other types?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 8.44 0 Td (f.) Tj T* -8.44 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (What happens if we have virtual functions in a type?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (g.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (What letter do I use for a tag? Has it already been used?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 146.0236 cm
Q
q
1 0 0 1 62.69291 92.02362 cm
q
BT 1 0 0 1 0 38 Tm .645318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Certainly there are ways to handle these issues, but the philosophy of OpenContainers \(for the moment\)) Tj T* 0 Tw 1.182619 Tw (is that most data, if not all, can be represented with the core types: all ints, all floats, complexes, Arrs,) Tj T* 0 Tw .67561 Tw (Tabs, Array) Tj (<) Tj (POD) Tj (>) Tj (, strings, and None. This is the essential argument of JSON and XML anyway, so we) Tj T* 0 Tw (aren't asserting anything controversial.) Tj T* ET
Q
Q
 
endstream
endobj
% 'R124': class PDFStream 
124 0 obj
% page stream
<< /Length 4440 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .538988 Tw (One thing that has proved useful is the ability is to have classes that can convert to and from Vals easily) Tj T* 0 Tw (so that you can take advantage of all the infrastructure. For example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 551.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 180 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 158 Tm /F4 10 Tf 12 TL (// A class for computing simulations of a biological nature) Tj T* (class BiologicalSimulation {) Tj T* (  public:) Tj T*  T* (   Start \(\);  // Start the simulation) Tj T* (   Stop  \(\);  // Stop) Tj T* (   Resume \(\); // Very expensive, so have to stop and resume every so often) Tj T*  T* (  private:) Tj T* (    // All sorts of data) Tj T* (    real_8 start_time, real_8 stop_time;) Tj T* (    float* paramecium_state;) Tj T* (    int    number_of_paramecium;) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 507.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .879431 Tw (It would be nice if we could convert BiologicalSimulation to and from Vals so we could easily serialize it) Tj T* 0 Tw .320988 Tw (and send over sockets or save it to files. It's actually pretty straight forward to do. Here's a sketch of what) Tj T* 0 Tw (we want:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 354.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 144 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 122 Tm /F4 10 Tf 12 TL (// Take current BiologicalSimulation and save to file) Tj T* (BiologicalSimulation b;) Tj T* (Val repr = b;) Tj T* (WriteValToFile\(repr, "simulation_backup"\);) Tj T*  T* (...) Tj T*  T* (// Read Biological Simulation from file and reconstruct) Tj T* (Val old_sim;) Tj T* (ReadValFromFile\("simulation_backup", old_sim\);) Tj T* (BiologicalSimulation update = old_sim;) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 322.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .012093 Tw (The idea is simple: The class of interest needs to know how to convert between itself and Vals. Notice that) Tj T* 0 Tw (to do this easily, the class has two new methods:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 316.6236 cm
Q
q
1 0 0 1 62.69291 268.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (a.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.008976 Tw 12 TL /F1 10 Tf 0 0 0 rg (A New Constructor to create BiologicalSimulations from Vals: ) Tj /F3 10 Tf (BiologicalSimulation \(const Val) Tj (&) Tj T* 0 Tw (v\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (b.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (An outconverter to create Vals from BiologicalSimulations: ) Tj /F3 10 Tf (operator Val \(\) const) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 268.6236 cm
Q
q
1 0 0 1 62.69291 238.6236 cm
q
BT 1 0 0 1 0 14 Tm 1.854651 Tw 12 TL /F1 10 Tf 0 0 0 rg (Here's an example how we might do this: The ) Tj /F3 10 Tf (BiologicalSimulations ) Tj /F1 10 Tf (becomes a ) Tj /F3 10 Tf (Tab ) Tj /F1 10 Tf (with some keys) Tj T* 0 Tw (representing state:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 85.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 144 re B*
Q
q
BT 1 0 0 1 0 122 Tm 12 TL /F4 10 Tf 0 0 0 rg (// A class for computing simulations of a biological nature) Tj T* (class BiologicalSimulation {) Tj T* (  public:) Tj T*  T* (   // Construct myself from a Val) Tj T* (   BiologicalSimulation \(const Val) Tj (&) Tj ( v\) {) Tj T* (     start_time = v\("start_time"\);) Tj T* (     stop_time  = v\("stop_time"\);) Tj T* (     Array) Tj (<) Tj (real_4) Tj (>) Tj (&) Tj ( p = v\("paramecium_data"\);) Tj T* (     number_of_paramecium = p.length\(\);) Tj T* (     paramecium_state = new float[number_of_paramcium];) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R125': class PDFStream 
125 0 obj
% page stream
<< /Length 3946 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 407.8599 cm
q
q
.988825 0 0 .988825 0 0 cm
q
1 0 0 1 6.6 6.674587 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 360 re B*
Q
q
BT 1 0 0 1 0 338 Tm 12 TL /F4 10 Tf 0 0 0 rg (     memcpy\(paramecium_state, p.data\(\), sizeof\(float\)*p.length\(\)\);) Tj T* (   }) Tj T*  T* (   Start \(\);  // Start the simulation) Tj T* (   Stop  \(\);  // Stop) Tj T* (   Resume \(\); // Very expensive, so have to stop and resume every so often) Tj T*  T* (   // Create a Val which represents my current state) Tj T* (   operator Val \(\) const) Tj T* (   {) Tj T* (      Val ret_val = Tab\(\);  // enable return value optimization) Tj T*  T* (      Tab) Tj (&) Tj ( table = ret_val;) Tj T* (      table["start_time"] = start_time;) Tj T* (      table["stop_time"]  = stop_time;) Tj T* (      table["paramecium_data"] = Array) Tj (<) Tj (real_4) Tj (>) Tj (\(number_of_paramecium\);) Tj T* (      Array) Tj (<) Tj (real_4) Tj (>) Tj (&) Tj ( a = table\("paramecium_data"\);) Tj T* (      a.expandTo\(number_of_paramecium\);) Tj T* (      memcpy\(a.data\(\), paramecium_state,sizeof\(real_4\)*number_of_paramecium\);) Tj T*  T* (      return ret_val;) Tj T* (   }) Tj T*  T* (  private:) Tj T* (    // All sorts of data) Tj T* (    real_8 start_time, real_8 stop_time;) Tj T* (    float* paramecium_state;) Tj T* (    int    number_of_paramecium;) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 363.8599 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .383876 Tw (By creating a new constructor that takes a Val, you allow a Biological Simulation to be created from Vals.) Tj T* 0 Tw 2.41811 Tw (This assumes you you have been able to "map" your data structure onto Val/Tab/Arr and create a) Tj T* 0 Tw ("representation" of the BiologicalSimulation as Tab:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 294.6599 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (// Read Biological Simulation from file and reconstruct) Tj T* (Val old_sim;) Tj T* (ReadValFromFile\("simulation_backup", old_sim\);) Tj T* (BiologicalSimulation update = old_sim;) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 262.6599 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .571318 Tw (By creating an outconverter for Val, you allow the BiologicalSimulation to create a representation of itself) Tj T* 0 Tw (as Vals:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 181.4599 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (// Take current BiologicalSimulation and save to file) Tj T* (BiologicalSimulation b;) Tj T* (b.Start\(\);  b.Stop\(\);) Tj T* (Val repr = b;           // use outconverter) Tj T* (WriteValToFile\(repr, "simulation_backup"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 125.4599 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.49832 Tw (Certainly, it's nice to be able to convert between Vals and your user classes, but of course, you can't) Tj T* 0 Tw .925984 Tw (always change your classes \(perhaps someone else owns them and doesn't want them modified in any) Tj T* 0 Tw .087882 Tw (way\). You can always write global routines \(in another file so they don't mess up the original class\) that do) Tj T* 0 Tw (the same thing:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 80.25994 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val CreateValFromBiologicalSimulation \(const BiologicalSimulation) Tj (&) Tj ( b\);) Tj T* (BiologicalSimulation CreateBiologicalSimulationFromVal \(const Val) Tj (&) Tj ( v\);) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
% 'R126': class PDFStream 
126 0 obj
% page stream
<< /Length 2288 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.871163 Tw (This isn't quite as "compact", but still works and you can still take advantage of all the PicklingTools) Tj T* 0 Tw (infrastructure.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 687.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.749985 Tw (There are several nice things about being able to convert between Vals and User types: besides the) Tj T* 0 Tw 2.758735 Tw (obvious \(Vals can be pickled, saved to files, sent over sockets\), this is also useful for debugging:) Tj T* 0 Tw 1.61528 Tw (PrettyPrinting a Val is a human-readable way to see the state of a class without attaching a complex) Tj T* 0 Tw (debugger.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 669.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The two most common ways to write user-defined types like this it are:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 663.0236 cm
Q
q
1 0 0 1 62.69291 591.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 42 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .521318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Represent the state as a Tab \(like the ) Tj /F3 10 Tf (BiologicalSimulation ) Tj /F1 10 Tf (above\). Simply keep all the fields of) Tj T* 0 Tw (your class as entries to a table.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 36 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .262339 Tw 12 TL /F1 10 Tf 0 0 0 rg (Represent the state as a string. This is more for situations when you have binary data and need) Tj T* 0 Tw .044651 Tw (to "bit-blit" the data back. In fact, the ) Tj /F3 10 Tf (SockAddr ) Tj /F1 10 Tf (representation uses this because the socket data) Tj T* 0 Tw (needs to be plain binary data. See the ) Tj /F3 10 Tf (SockAddr ) Tj /F1 10 Tf (for an example.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 591.0236 cm
Q
 
endstream
endobj
% 'R127': class PDFPageLabels 
127 0 obj
% Document Root
<< /Nums [ 0
 128 0 R
 1
 129 0 R
 2
 130 0 R
 3
 131 0 R
 4
 132 0 R
 5
 133 0 R
 6
 134 0 R
 7
 135 0 R
 8
 136 0 R
 9
 137 0 R
 10
 138 0 R
 11
 139 0 R
 12
 140 0 R
 13
 141 0 R
 14
 142 0 R
 15
 143 0 R
 16
 144 0 R
 17
 145 0 R
 18
 146 0 R
 19
 147 0 R
 20
 148 0 R
 21
 149 0 R
 22
 150 0 R
 23
 151 0 R
 24
 152 0 R
 25
 153 0 R
 26
 154 0 R
 27
 155 0 R
 28
 156 0 R
 29
 157 0 R
 30
 158 0 R
 31
 159 0 R
 32
 160 0 R
 33
 161 0 R
 34
 162 0 R
 35
 163 0 R
 36
 164 0 R ] >>
endobj
% 'R128': class PDFPageLabel 
128 0 obj
% None
<< /S /D
 /St 1 >>
endobj
% 'R129': class PDFPageLabel 
129 0 obj
% None
<< /S /D
 /St 2 >>
endobj
% 'R130': class PDFPageLabel 
130 0 obj
% None
<< /S /D
 /St 3 >>
endobj
% 'R131': class PDFPageLabel 
131 0 obj
% None
<< /S /D
 /St 4 >>
endobj
% 'R132': class PDFPageLabel 
132 0 obj
% None
<< /S /D
 /St 5 >>
endobj
% 'R133': class PDFPageLabel 
133 0 obj
% None
<< /S /D
 /St 6 >>
endobj
% 'R134': class PDFPageLabel 
134 0 obj
% None
<< /S /D
 /St 7 >>
endobj
% 'R135': class PDFPageLabel 
135 0 obj
% None
<< /S /D
 /St 8 >>
endobj
% 'R136': class PDFPageLabel 
136 0 obj
% None
<< /S /D
 /St 9 >>
endobj
% 'R137': class PDFPageLabel 
137 0 obj
% None
<< /S /D
 /St 10 >>
endobj
% 'R138': class PDFPageLabel 
138 0 obj
% None
<< /S /D
 /St 11 >>
endobj
% 'R139': class PDFPageLabel 
139 0 obj
% None
<< /S /D
 /St 12 >>
endobj
% 'R140': class PDFPageLabel 
140 0 obj
% None
<< /S /D
 /St 13 >>
endobj
% 'R141': class PDFPageLabel 
141 0 obj
% None
<< /S /D
 /St 14 >>
endobj
% 'R142': class PDFPageLabel 
142 0 obj
% None
<< /S /D
 /St 15 >>
endobj
% 'R143': class PDFPageLabel 
143 0 obj
% None
<< /S /D
 /St 16 >>
endobj
% 'R144': class PDFPageLabel 
144 0 obj
% None
<< /S /D
 /St 17 >>
endobj
% 'R145': class PDFPageLabel 
145 0 obj
% None
<< /S /D
 /St 18 >>
endobj
% 'R146': class PDFPageLabel 
146 0 obj
% None
<< /S /D
 /St 19 >>
endobj
% 'R147': class PDFPageLabel 
147 0 obj
% None
<< /S /D
 /St 20 >>
endobj
% 'R148': class PDFPageLabel 
148 0 obj
% None
<< /S /D
 /St 21 >>
endobj
% 'R149': class PDFPageLabel 
149 0 obj
% None
<< /S /D
 /St 22 >>
endobj
% 'R150': class PDFPageLabel 
150 0 obj
% None
<< /S /D
 /St 23 >>
endobj
% 'R151': class PDFPageLabel 
151 0 obj
% None
<< /S /D
 /St 24 >>
endobj
% 'R152': class PDFPageLabel 
152 0 obj
% None
<< /S /D
 /St 25 >>
endobj
% 'R153': class PDFPageLabel 
153 0 obj
% None
<< /S /D
 /St 26 >>
endobj
% 'R154': class PDFPageLabel 
154 0 obj
% None
<< /S /D
 /St 27 >>
endobj
% 'R155': class PDFPageLabel 
155 0 obj
% None
<< /S /D
 /St 28 >>
endobj
% 'R156': class PDFPageLabel 
156 0 obj
% None
<< /S /D
 /St 29 >>
endobj
% 'R157': class PDFPageLabel 
157 0 obj
% None
<< /S /D
 /St 30 >>
endobj
% 'R158': class PDFPageLabel 
158 0 obj
% None
<< /S /D
 /St 31 >>
endobj
% 'R159': class PDFPageLabel 
159 0 obj
% None
<< /S /D
 /St 32 >>
endobj
% 'R160': class PDFPageLabel 
160 0 obj
% None
<< /S /D
 /St 33 >>
endobj
% 'R161': class PDFPageLabel 
161 0 obj
% None
<< /S /D
 /St 34 >>
endobj
% 'R162': class PDFPageLabel 
162 0 obj
% None
<< /S /D
 /St 35 >>
endobj
% 'R163': class PDFPageLabel 
163 0 obj
% None
<< /S /D
 /St 36 >>
endobj
% 'R164': class PDFPageLabel 
164 0 obj
% None
<< /S /D
 /St 37 >>
endobj
xref
0 165
0000000000 65535 f
0000000113 00000 n
0000000271 00000 n
0000000436 00000 n
0000000611 00000 n
0000000792 00000 n
0000000951 00000 n
0000001244 00000 n
0000001463 00000 n
0000001762 00000 n
0000002041 00000 n
0000002323 00000 n
0000002511 00000 n
0000002793 00000 n
0000002963 00000 n
0000003243 00000 n
0000003523 00000 n
0000003803 00000 n
0000004084 00000 n
0000004365 00000 n
0000004647 00000 n
0000004929 00000 n
0000005211 00000 n
0000005493 00000 n
0000005775 00000 n
0000006057 00000 n
0000006339 00000 n
0000006621 00000 n
0000006903 00000 n
0000007185 00000 n
0000007467 00000 n
0000007749 00000 n
0000008031 00000 n
0000008313 00000 n
0000008595 00000 n
0000008877 00000 n
0000009159 00000 n
0000009441 00000 n
0000009723 00000 n
0000010005 00000 n
0000010287 00000 n
0000010582 00000 n
0000010812 00000 n
0000011115 00000 n
0000011397 00000 n
0000011679 00000 n
0000011961 00000 n
0000012243 00000 n
0000012403 00000 n
0000012687 00000 n
0000012813 00000 n
0000012985 00000 n
0000013167 00000 n
0000013347 00000 n
0000013552 00000 n
0000013794 00000 n
0000013963 00000 n
0000014191 00000 n
0000014381 00000 n
0000014586 00000 n
0000014784 00000 n
0000014978 00000 n
0000015171 00000 n
0000015367 00000 n
0000015607 00000 n
0000015787 00000 n
0000015964 00000 n
0000016204 00000 n
0000016373 00000 n
0000016566 00000 n
0000016764 00000 n
0000016968 00000 n
0000017179 00000 n
0000017386 00000 n
0000017654 00000 n
0000017825 00000 n
0000018000 00000 n
0000018214 00000 n
0000018446 00000 n
0000018651 00000 n
0000018843 00000 n
0000019030 00000 n
0000019214 00000 n
0000019419 00000 n
0000019600 00000 n
0000019780 00000 n
0000019985 00000 n
0000020185 00000 n
0000020382 00000 n
0000020566 00000 n
0000020996 00000 n
0000029936 00000 n
0000038749 00000 n
0000045431 00000 n
0000050209 00000 n
0000055421 00000 n
0000062809 00000 n
0000068022 00000 n
0000071477 00000 n
0000076223 00000 n
0000082081 00000 n
0000088218 00000 n
0000095553 00000 n
0000102783 00000 n
0000108661 00000 n
0000115320 00000 n
0000120124 00000 n
0000125722 00000 n
0000131573 00000 n
0000137349 00000 n
0000141963 00000 n
0000148091 00000 n
0000152799 00000 n
0000157967 00000 n
0000164154 00000 n
0000168546 00000 n
0000174216 00000 n
0000180687 00000 n
0000185436 00000 n
0000191366 00000 n
0000195572 00000 n
0000200293 00000 n
0000204845 00000 n
0000210737 00000 n
0000218562 00000 n
0000223103 00000 n
0000227150 00000 n
0000229543 00000 n
0000230170 00000 n
0000230249 00000 n
0000230328 00000 n
0000230407 00000 n
0000230486 00000 n
0000230565 00000 n
0000230644 00000 n
0000230723 00000 n
0000230802 00000 n
0000230881 00000 n
0000230961 00000 n
0000231041 00000 n
0000231121 00000 n
0000231201 00000 n
0000231281 00000 n
0000231361 00000 n
0000231441 00000 n
0000231521 00000 n
0000231601 00000 n
0000231681 00000 n
0000231761 00000 n
0000231841 00000 n
0000231921 00000 n
0000232001 00000 n
0000232081 00000 n
0000232161 00000 n
0000232241 00000 n
0000232321 00000 n
0000232401 00000 n
0000232481 00000 n
0000232561 00000 n
0000232641 00000 n
0000232721 00000 n
0000232801 00000 n
0000232881 00000 n
0000232961 00000 n
0000233041 00000 n
trailer
<< /ID 
 % ReportLab generated PDF document -- digest (http://www.reportlab.com) 
 [(\347yD\376\207bd\342\014t\201\246\361\360\234\337) (\347yD\376\207bd\342\014t\201\246\361\360\234\337)] 

 /Info 48 0 R
 /Root 47 0 R
 /Size 165 >>
startxref
233090
%%EOF
