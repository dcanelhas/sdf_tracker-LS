VALPIPE - Transfers X-MIDAS T4000 pipes containing Vals between computers.
    
<hcb file name> - Input or Output XMIDAS file/pipe.
<port>          -  Socket number
<host>          - Host name or IP address if used as client
    
This primitive either creates a TCP server which will connect to a client
process using a TCP socket or a TCP client which will connect to a server
process via a TCP socket. By default a client is created. Using the /SERVER
qualifier will create a TCP server instead. There must be exactly one server
for the <port> on a given computer, but there can be many clients.
That is, the <port> used by the server can exist on different computers,
but may only exist once on each. The message:
    
    Problem: bind:Address already in use
    
indicates a server for the specified port already exists on the computer which
the VALZPIPE/SERVER call was implemented. Many clients can exist on the same
machine to the same server/host, but they must specify both the host they
are to connect with and the socket port number of the desired server.
    
Clients and servers can be setup to either input or output data between XMIDAS
and the socket connection. It is best to have one of each. The /XM_IN switch
transfers data from the socket and puts it into an XMIDAS pipe (file) (i.e.
socket reader, pipe writer). Using the /XM_OUT switch transfers data from an
XMIDAS pipe (file) to the socket (i.e. pipe reader, socket writer).
    
The connections can be established in any order without stopping a piped macro
to wait for a connection. Server connections have no noticeable timeout so
the same socket number can be used immediately after the server is brought
down.
    
A brief summary of the connection scenario choices is as follows. If you are
using single point connections, i.e. one socket reader, one socket writer then
it is entirely arbitrary as to who is the server, who is the client, which one
is the reader, and which one is the writer. If however you need a multipoint
connection, i.e. N writers, one reader or N readers, one writer then the
server must be the side that is only executed once. Note that interleaving
data in the latter scenario is totally arbitrary and not necessarily cyclical.
    
Examples:
    
      1. Transfer data from Node B to Node A
    
        Node A executes:
          valpipe/server/XM_IN _testa 25000
    
        Node B executes:
          valpipe/XM_OUT _testb, 25000, NODEA
    
     2. Multiple socket writers from nodes B and C to node A
        Node A executes:
          valpipe/server/XM_IN _testa 25000
    
        Node B executes:
          valpipe/XM_OUT _testl, 25000, NODEA
          valpipe/XM_OUT _test2, 25000, NODEA
          valpipe/XM_OUT _test3, 25000, NODEA
          valpipe/XM_OUT _test4, 25000, NODEA
    
        Node C executes:
          valpipe/XM_OUT _testl, 25000, NODEA
          valpipe/XM_OUT _test2, 25000, NODEA
          valpipe/XM-OUT _test3, 25000, NODEA
          valpipe/XM-OUT _test4, 25000, NODEA
    
     3. Multiple socket readers at nodes B and C using data sent from node A
        Node A executes:
          valpipe/server/XM_OUT _testa 25000
    
       Node B executes:
          valpipe/XM_IN _testl, 25000, NODEA
          valpipe/XM_IN _test2, 25000, NODEA
          valpipe/XM_IN _test3, 25000, NODEA
          valpipe/XM_IN _test4, 25000, NODEA
    
       Node C executes:
          valpipe/XM_IN _testl, 25000, NODEA
          valpipe/XM_IN _test2, 25000, NODEA
          valpipe/XM_IN _test3, 25000, NODEA
          valpipe/XM_IN _test4, 25000, NODEA


NOTE: You can set the serialization options (below: /SER /SOCK /ARRDISP)
and these are what the socket conversation will use when there's a question.
The good news is that, by default, this will use adaptive serialization.
The server recognizes the serialization of the client and simply talks
back in the same serialization.  Most of the time, the client (using its
serialization options) talks to the server first and sets the serialization. 
Occasionally, the server talks first (using its serialization options)
and sets the tone of the conversation.  Note that this is backwards compatible
with previous releases. Also, the server can have MULTIPLE TYPES of 
serializations with different clients happening concurrently.

    
Switches:
      /SERVER    - Create a TCP socket server (as opposed to client)
      /WAIT=d    - Time to wait before connection attempts (default = 2 Sec)
      /XM_IN     - Transfer data from a socket connection to an XMIDAS pipe/file
      /XM_OUT    - Transfer data from an XMIDAS pipe/file to a socket connection
      /VNAME=a   - Set as a filter to only transfers with this name.
      /DROP      - If the client is not connect, drop the data read from the
                   input pipe.  This is only applied if /XM_OUT is set.
      /CWARN=m   - Will warn every m minutes if there is no connection
                   to a server.  This is disabled if m <= 0
      /SER=n     - Set the serialization type of how the VALPIPE sends data
                   over the socket:  this can have a huge performance
                   difference.  The options are:
                    0 :  Use Python Pickling Protocol 0 
                         - slower, but works w/all versions of PTOOLS, Python
                    1 :  Use no serialization (just send the string data)
                         - useful if you want to send raw data
                    2 :  Use Python Pickling Protocol 2
                         - fast, but doesn't work with all versions
                   -2 :  As Python Pickling Protocol 2, but as Python 2.2.x
                         - Python 2.2.x dumps Protocol 2 subtlely differently
                           so this allows you to talk to older versions
                    4 : Use Midas 2k Binary Serialization.  Currently,
                        ONLY the C++ clients and servers (besides, of course,
                        M2k) can use this serialization.  Python clients
                        and servers do not currently support this.
                    5 : Use OpenContainers serialization.  Currently,
                        ONLY the M2k and C++ clients and servers can use this
                        serialization.  Python clients and server do
                        not currently support this.  Prefer this for
                        speed and preservation.

                   The default is Python Pickling Protocol 0 for backwards
                   compatibility but it is strongly suggested moving to
                   Protocol 2 for speed.
     /SOCK=n     - Set whether socket communications use dual socket
                   (/SOCK=2) or single socket (/SOCK=1) mode.  To get
                   around a bug in VMS TCP/IP, dual sockets needed to
                   be used for biderectional communication.  Modern
                   sockets don't have this problem.  Dual socket is the
                   usual default, as that's the default of Midas 2K
                   and X-Midas, but we suggest using Single Socket mode
                   when you can.  This primitive defaults to /SOCK=1

                   New feature: This can also be 777 (which means 
                   NORMAL_SOCKET) and avoids all the Midas socket
                   protocol nonsense.  With 777, you can talk to normal
                   sockets that do typical socket stuff (like CURL, etc.)

     /ARRDISP=n  - Set the array disposition if you use serialization
                   (Pickling Protocol 0 or 2). This is how VALPIPE sends
                   "homogeneous data" around the system (i.e., M2k Vectors,
                   PTOOLS Arrays, Python arrays, Numeric arrays).
                   The options are:
                    0 : Shuttle all homogeneous data as Numeric Arrays
                        (like the Numeric package from Python)
                    1 : Shuttle all homogeneous data as Python Lists
                        (this loses their "array-like" quality but 
                         is the most backwards compatible because all
                         versions of PTOOLS and Python support Python Lists)
                    2 : Shuttle all homogeneous data as Python Arrays
                        (like the Array package from Python):DEPRECATED!!!
                    3: Not supported
                    4 : NumPy
                   The default is 1 for backwards compatibility.
                   NumPy has replaced Numeric as the de-facto standard
                   (as Numeric is out of maintenance and NumPy is active),
                   so 4 is probably your best option: make sure you have
                   NumPy installed (import numpy).
                   If you are using XMPY<4.0.0, Numeric comes built and it is 
                   recommended to use 0 (for speed). 

                

