YELLER - Simple example of a C++ primitive using the MidasYeller
 
<host>   Hostname of the destination
<port>   Port number the server is running on

 
This C++ primitive provides an example to follow for writing your
own MidasYellers.  This is a very simple server that sends out
stamped Tabs across a UDP socket.  It only yells as one listener,
but could be easily augmented (with multiple calls to addListener)
to support multiple listener.


Example:

   ! In session 1, run the yeller 
   X-Midas> yeller localhost, 9711
   Opening Yeller on host LOCALHOST port 9711

   ! In session 2, running the listener
   X-Midas> listener localhost, 9711
   Starting to listen on LOCALHOST 9711


This is a very simple example.  Remember, because we are doing 
UDP, packets can be received out of order, or even dropped.
UDP tends to be very low overhead, so when we can tolerate such
packet dropping for need for speed, we use the Yeller/Listener combo.

There is no single socket/dual socket mode in the YELLER

There is NO adapative serialization for this primitive (for
backwards compatibility reasons).

Switches:
      /SER=n     - Set the serialization type of how the YELLER sends data
                   over the socket:  this can have a huge performance
                   difference.  The options are:
                    0 :  Use Python Pickling Protocol 0 
                         - slower, but works w/all versions of PTOOLS, Python
                    1 :  Use no serialization (just send the string data)
                         - useful if you want to send raw data
                    2 :  Use Python Pickling Protocol 2
                         - fast, but doesn't work with all versions
                   -2 :  As Python Pickling Protocol 2, but as Python 2.2.x
                         - Python 2.2.x dumps Protocol 2 subtlely differently
                           so this allows you to talk to older versions
                    4 : Use Midas 2k Binary Serialization.  Currently,
                        ONLY the C++ clients and servers (besides, of course,
                        M2k) can use this serialization.  Python clients
                        and servers do not currently support this.
                    5 : Use OpenContainers serialization.  Currently,
                        ONLY the M2k and C++ clients and servers can use this
                        serialization.  Python clients and server do
                        not currently support this.  Prefer this for
                        speed and preservation.

                   The default is Python Pickling Protocol 0 for backwards
                   compatibility but it is strongly suggested moving to
                   Protocol 2 for speed.

     /ARRDISP=n  - Set the array disposition if you use serialization
                   (Pickling Protocol 0 or 2). This is how YELLER sends
                   "homogeneous data" around the system (i.e., M2k Vectors,
                   PTOOLS Arrays, Python arrays, Numeric arrays).
                   The options are:
                    0 : Shuttle all homogeneous data as Numeric Arrays
                        (like the Numeric package from Python)
                    1 : Shuttle all homogeneous data as Python Lists
                        (this loses their "array-like" quality but 
                         is the most backwards compatible because all
                         versions of PTOOLS and Python support Python Lists)
                    2 : Shuttle all homogeneous data as Python Arrays
                        (like the Array package from Python):DEPRECATED!!!
                    3: Not supported
                    4 : NumPy
                   The default is 1 for backwards compatibility.
                   NumPy has replaced Numeric as the de-facto standard
                   (as Numeric is out of maintenance and NumPy is active),
                   so 4 is probably your best option: make sure you have
                   NumPy installed (import numpy).
                   If you are using XMPY<4.0.0, Numeric comes built and it is 
                   recommended to use 0 (for speed). 

     /CONVERT=1  - This option is really only necessary if you are talking
                   to some pre-exisiting (pre 1.2.0) PTOOLS installations.
                   Set the compatibility mode to True if you want
                   to convert OTab->Tab, Tup->Arr, BigInt->Str.  This
                   is for backwards compatibility with pre-existing PTOOLS
                   installations that don't have those data structures
                   implemented.  By default, the value is false, which
                   means OTab/Tup/BigInt are NOT converted (i.e, they
                   as passed as is).  NOTE: if you use SERIALIZE_M2k,
                   conversion ALWAYS happens because there is no
                   equivalent in M2k.
