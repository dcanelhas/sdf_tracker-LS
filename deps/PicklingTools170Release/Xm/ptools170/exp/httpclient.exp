HTTPCLIENT - Simple example of a C++ primitive using the HTTPClient
 
<host>  Name of the host the HTTP Server is running on
<port>  Number of the port the HTTP Server is running on

This is a simple example showing how to write a HTTPClient C++
X-Midas primitive.  This client talks to any HTTP Server in
general:  this example assumes the server simply
responds with the same message the client sends to it. 

This example shows how to use a HTTPClient: this models
the Python httplib HTTPConnection very closely.

See the httpserver explain page for more details.



  // Shows an example of how to use an HTTPConnection, HTTPResponse


  #include "httplib.h"
  #include "urllib.h"
  
  ///////////////Here is an example session that uses the GET method:
  
  void exampleGET ()
  {
    HTTPConnection conn("www.python.org");
    conn.request("GET", "/index.html");
    HTTPResponse r1 = conn.getresponse();
    cout << r1.status() << " " << r1.reason() << endl;
    // // output: 200 OK
    Array<char> data1 = r1.read();
    cout << data1 << endl;
  
    conn.request("GET", "/parrot.spam");
    HTTPResponse r2 = conn.getresponse();
    cout << r2.status() <<  r2.reason() << endl;
    // // output: 404 Not Found
    Array<char> data2 = r2.read();
    cout << data2.length() << endl;
    cout << data2 << endl;
    conn.close();
  }
  
  void exampleHEAD ()
  {
    //Here is an example session that uses the HEAD method. Note that the HEAD method never ret
  urns any data.>
    HTTPConnection conn("www.python.org");
    conn.request("HEAD","/index.html");
    HTTPResponse res = conn.getresponse();
    cout <<  res.status() << " " <<  res.reason() << endl;
    // 200 OK
    Array<char> data = res.read();
    cout << data.length() << endl;
    // 0
  }

  void examplePOST ()
  {
    string params = URLEncode(Tab("{'@number': 12524, '@type': 'issue', '@action': 'show'}"));
    cerr << params << endl;
    //string params = "%40action=show&%40number=12524&%40type=issue";
    OTab headers = "o{'Content-type': 'application/x-www-form-urlencoded', "
                   "  'Accept': 'text/plain'}";
    HTTPConnection conn("bugs.python.org");
    conn.request("POST", "", params, headers);
    HTTPResponse response = conn.getresponse();
    cout << response.status() << " " << response.reason() << endl;
    // 302 Found
    Array<char> data = response.read();
    //'Redirecting to <a href="http://bugs.python.org/issue12524">http://bugs.python.org/issue1
2524</a>'
    cerr << data << endl;
    cerr << " is closed? " << response.isclosed() << endl;
    Array<char> data2 = response.read(); // chunked response
    cerr << "next chunked response" << endl;
    conn.close();
  }


  void exampleCHUNKEDGET ()
  {
    HTTPConnection conn("localhost", 8888);
    conn.request("GET", "/index.html");
    HTTPResponse r1 = conn.getresponse();
    cout << r1.status() << " " << r1.reason() << endl;
    // // output: 200 OK
    Array<char> data1 = r1.read();
    cout << "data from chunk 1" << data1 << endl;

    Array<char> data2 = r1.read();
    cout << "data from chunk 2" << data2 << endl;
  } 


  int main ()
  {
    exampleGET();
    exampleHEAD();
    examplePOST();
    exampleCHUNKEDGET();
  }

