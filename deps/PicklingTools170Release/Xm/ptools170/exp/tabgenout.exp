TABGENOUT - Writes a Tab on T4000 pipe, with changeable serialization
 
<output>  Output pipe to write to

The main purpose of this primitive is to show an example of how
a C++ X-Midas primitive could ship Tabs over X-Midas pipes
and have the Python side read and understand those as dictionaries.
By default, the /SER=0 (SERIALIZE_P0), and /SER=2 (SERIALIZE_P2)
will also work with a Python primitive.  The other serializations
will only work if the other end understands that serialization
(C++).

There's an example the t4pytest.txt in the macro area
showing how this works, (replicated here as well)

startmacro

  xpipe on
    tabgenout _out       ! This is a C++ primitive
    tabinpytester _out   ! This is a Python primitive
  xpipe off

endmacro

 

Switches:

      /SER=n     - Set the serialization type of how the XMCLIENT sends data
                   over the socket:  this can have a huge performance
                   difference.  The options are:
                    0 :  Use Python Pickling Protocol 0
                         - slower, but works w/all versions of PTOOLS, Python
                    1 :  Use no serialization (just send the string data)
                         - useful if you want to send raw data
                    2 :  Use Python Pickling Protocol 2
                         - fast, but doesn't work with all versions
                   -2 :  As Python Pickling Protocol 2, but as Python 2.2.x
                         - Python 2.2.x dumps Protocol 2 subtlely differently
                           so this allows you to talk to older versions
                    4 : Use Midas 2k Binary Serialization.  Currently,
                        ONLY the C++ clients and servers (besides, of course,
                        M2k) can use this serialization.  Python clients
                        and servers do not currently support this.
                    5 : Use OpenContainers serialization.  Currently,
                        ONLY the M2k and C++ clients and servers can use this
                        serialization.  Python clients and server do
                        not currently support this.  Prefer this for
                        speed and preservation.
