%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
% 'BasicFonts': class PDFDictionary 
1 0 obj
% The standard fonts dictionary
<< /F1 2 0 R
 /F2 3 0 R
 /F3 4 0 R
 /F4 5 0 R
 /F5 10 0 R >>
endobj
% 'F1': class PDFType1Font 
2 0 obj
% Font Helvetica
<< /BaseFont /Helvetica
 /Encoding /WinAnsiEncoding
 /Name /F1
 /Subtype /Type1
 /Type /Font >>
endobj
% 'F2': class PDFType1Font 
3 0 obj
% Font Helvetica-Bold
<< /BaseFont /Helvetica-Bold
 /Encoding /WinAnsiEncoding
 /Name /F2
 /Subtype /Type1
 /Type /Font >>
endobj
% 'F3': class PDFType1Font 
4 0 obj
% Font Helvetica-Oblique
<< /BaseFont /Helvetica-Oblique
 /Encoding /WinAnsiEncoding
 /Name /F3
 /Subtype /Type1
 /Type /Font >>
endobj
% 'F4': class PDFType1Font 
5 0 obj
% Font Courier
<< /BaseFont /Courier
 /Encoding /WinAnsiEncoding
 /Name /F4
 /Subtype /Type1
 /Type /Font >>
endobj
% 'Annot.NUMBER1': class PDFDictionary 
6 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://json.org) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 426.3027
 131.3736
 492.5127
 143.3736 ]
 /Subtype /Link
 /Type /Annot >>
endobj
% 'Page1': class PDFPage 
7 0 obj
% Page dictionary
<< /Annots [ 6 0 R ]
 /Contents 70 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page2': class PDFPage 
8 0 obj
% Page dictionary
<< /Contents 71 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page3': class PDFPage 
9 0 obj
% Page dictionary
<< /Contents 72 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'F5': class PDFType1Font 
10 0 obj
% Font Helvetica-BoldOblique
<< /BaseFont /Helvetica-BoldOblique
 /Encoding /WinAnsiEncoding
 /Name /F5
 /Subtype /Type1
 /Type /Font >>
endobj
% 'Page4': class PDFPage 
11 0 obj
% Page dictionary
<< /Contents 73 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page5': class PDFPage 
12 0 obj
% Page dictionary
<< /Contents 74 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page6': class PDFPage 
13 0 obj
% Page dictionary
<< /Contents 75 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page7': class PDFPage 
14 0 obj
% Page dictionary
<< /Contents 76 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page8': class PDFPage 
15 0 obj
% Page dictionary
<< /Contents 77 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page9': class PDFPage 
16 0 obj
% Page dictionary
<< /Contents 78 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page10': class PDFPage 
17 0 obj
% Page dictionary
<< /Contents 79 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page11': class PDFPage 
18 0 obj
% Page dictionary
<< /Contents 80 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page12': class PDFPage 
19 0 obj
% Page dictionary
<< /Contents 81 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page13': class PDFPage 
20 0 obj
% Page dictionary
<< /Contents 82 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page14': class PDFPage 
21 0 obj
% Page dictionary
<< /Contents 83 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page15': class PDFPage 
22 0 obj
% Page dictionary
<< /Contents 84 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page16': class PDFPage 
23 0 obj
% Page dictionary
<< /Contents 85 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Annot.NUMBER2': class PDFDictionary 
24 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://www.picklingtools.com) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 272.6378
 660.5736
 417.644
 672.5736 ]
 /Subtype /Link
 /Type /Annot >>
endobj
% 'Page17': class PDFPage 
25 0 obj
% Page dictionary
<< /Annots [ 24 0 R ]
 /Contents 86 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page18': class PDFPage 
26 0 obj
% Page dictionary
<< /Contents 87 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page19': class PDFPage 
27 0 obj
% Page dictionary
<< /Contents 88 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page20': class PDFPage 
28 0 obj
% Page dictionary
<< /Contents 89 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page21': class PDFPage 
29 0 obj
% Page dictionary
<< /Contents 90 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page22': class PDFPage 
30 0 obj
% Page dictionary
<< /Contents 91 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page23': class PDFPage 
31 0 obj
% Page dictionary
<< /Contents 92 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page24': class PDFPage 
32 0 obj
% Page dictionary
<< /Contents 93 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page25': class PDFPage 
33 0 obj
% Page dictionary
<< /Contents 94 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page26': class PDFPage 
34 0 obj
% Page dictionary
<< /Contents 95 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Annot.NUMBER3': class PDFDictionary 
35 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://www.json.org) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 103.2629
 654.7736
 188.2929
 666.7736 ]
 /Subtype /Link
 /Type /Annot >>
endobj
% 'Page27': class PDFPage 
36 0 obj
% Page dictionary
<< /Annots [ 35 0 R ]
 /Contents 96 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page28': class PDFPage 
37 0 obj
% Page dictionary
<< /Contents 97 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page29': class PDFPage 
38 0 obj
% Page dictionary
<< /Contents 98 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page30': class PDFPage 
39 0 obj
% Page dictionary
<< /Contents 99 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page31': class PDFPage 
40 0 obj
% Page dictionary
<< /Contents 100 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page32': class PDFPage 
41 0 obj
% Page dictionary
<< /Contents 101 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page33': class PDFPage 
42 0 obj
% Page dictionary
<< /Contents 102 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page34': class PDFPage 
43 0 obj
% Page dictionary
<< /Contents 103 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page35': class PDFPage 
44 0 obj
% Page dictionary
<< /Contents 104 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page36': class PDFPage 
45 0 obj
% Page dictionary
<< /Contents 105 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page37': class PDFPage 
46 0 obj
% Page dictionary
<< /Contents 106 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page38': class PDFPage 
47 0 obj
% Page dictionary
<< /Contents 107 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'Page39': class PDFPage 
48 0 obj
% Page dictionary
<< /Contents 108 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 69 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
% 'R49': class PDFCatalog 
49 0 obj
% Document Root
<< /Outlines 51 0 R
 /PageLabels 109 0 R
 /PageMode /UseNone
 /Pages 69 0 R
 /Type /Catalog >>
endobj
% 'R50': class PDFInfo 
50 0 obj
<< /Author ()
 /CreationDate (D:20161222085524+07'00')
 /Creator (\(unspecified\))
 /Keywords ()
 /Producer (ReportLab PDF Library - www.reportlab.com)
 /Subject (\(unspecified\))
 /Title (Frequently Asked Questions for PicklingTools 1.7.0) >>
endobj
% 'R51': class PDFOutlines 
51 0 obj
<< /Count 17
 /First 52 0 R
 /Last 68 0 R
 /Type /Outlines >>
endobj
% 'Outline.0': class OutlineEntryObject 
52 0 obj
<< /Dest [ 7 0 R
 /XYZ
 62.69291
 705.0236
 0 ]
 /Next 53 0 R
 /Parent 51 0 R
 /Title (General Questions) >>
endobj
% 'Outline.1': class OutlineEntryObject 
53 0 obj
<< /Dest [ 11 0 R
 /XYZ
 62.69291
 659.8236
 0 ]
 /Next 54 0 R
 /Parent 51 0 R
 /Prev 52 0 R
 /Title (Python) >>
endobj
% 'Outline.2': class OutlineEntryObject 
54 0 obj
<< /Dest [ 12 0 R
 /XYZ
 62.69291
 177.6236
 0 ]
 /Next 55 0 R
 /Parent 51 0 R
 /Prev 53 0 R
 /Title (C++) >>
endobj
% 'Outline.3': class OutlineEntryObject 
55 0 obj
<< /Dest [ 19 0 R
 /XYZ
 62.69291
 277.8236
 0 ]
 /Next 56 0 R
 /Parent 51 0 R
 /Prev 54 0 R
 /Title (C++ and Proxys:  New in PicklingTools 1.0.0) >>
endobj
% 'Outline.4': class OutlineEntryObject 
56 0 obj
<< /Dest [ 25 0 R
 /XYZ
 62.69291
 593.8236
 0 ]
 /Next 57 0 R
 /Parent 51 0 R
 /Prev 55 0 R
 /Title (C++ and OTab/Tup/int_un/int_n:  New in PicklingTools 1.2.0) >>
endobj
% 'Outline.5': class OutlineEntryObject 
57 0 obj
<< /Dest [ 29 0 R
 /XYZ
 62.69291
 463.4236
 0 ]
 /Next 58 0 R
 /Parent 51 0 R
 /Prev 56 0 R
 /Title (C++ and the new PickleLoader: New in PicklingTools 1.2.0) >>
endobj
% 'Outline.6': class OutlineEntryObject 
58 0 obj
<< /Dest [ 32 0 R
 /XYZ
 62.69291
 573.0236
 0 ]
 /Next 59 0 R
 /Parent 51 0 R
 /Prev 57 0 R
 /Title (XML Support: New in PicklingTools 1.3.0) >>
endobj
% 'Outline.7': class OutlineEntryObject 
59 0 obj
<< /Dest [ 36 0 R
 /XYZ
 62.69291
 729.0236
 0 ]
 /Next 60 0 R
 /Parent 51 0 R
 /Prev 58 0 R
 /Title (C++ and JSON:  New in PicklingTools 1.3.2) >>
endobj
% 'Outline.8': class OutlineEntryObject 
60 0 obj
<< /Dest [ 36 0 R
 /XYZ
 62.69291
 162.4833
 0 ]
 /Next 61 0 R
 /Parent 51 0 R
 /Prev 59 0 R
 /Title (Conformance or Validation  Support: New in PicklingTools 1.3.3) >>
endobj
% 'Outline.9': class OutlineEntryObject 
61 0 obj
<< /Dest [ 38 0 R
 /XYZ
 62.69291
 765.0236
 0 ]
 /Next 62 0 R
 /Parent 51 0 R
 /Prev 60 0 R
 /Title (Java Support: New as of PicklingTools 1.5.1) >>
endobj
% 'Outline.10': class OutlineEntryObject 
62 0 obj
<< /Dest [ 38 0 R
 /XYZ
 62.69291
 599.0236
 0 ]
 /Next 63 0 R
 /Parent 51 0 R
 /Prev 61 0 R
 /Title (Python C Extension Modules: New as of PicklingTools 1.6.0 \(and 1.3.3\)) >>
endobj
% 'Outline.11': class OutlineEntryObject 
63 0 obj
<< /Dest [ 40 0 R
 /XYZ
 62.69291
 635.8236
 0 ]
 /Next 64 0 R
 /Parent 51 0 R
 /Prev 62 0 R
 /Title (cx_t: New as of PicklingTools 1.6.0) >>
endobj
% 'Outline.12': class OutlineEntryObject 
64 0 obj
<< /Dest [ 42 0 R
 /XYZ
 62.69291
 669.0236
 0 ]
 /Next 65 0 R
 /Parent 51 0 R
 /Prev 63 0 R
 /Title (M2k) >>
endobj
% 'Outline.13': class OutlineEntryObject 
65 0 obj
<< /Dest [ 42 0 R
 /XYZ
 62.69291
 210.0236
 0 ]
 /Next 66 0 R
 /Parent 51 0 R
 /Prev 64 0 R
 /Title (X-Midas) >>
endobj
% 'Outline.14': class OutlineEntryObject 
66 0 obj
<< /Dest [ 43 0 R
 /XYZ
 62.69291
 445.6661
 0 ]
 /Next 67 0 R
 /Parent 51 0 R
 /Prev 65 0 R
 /Title (SerialLib) >>
endobj
% 'Outline.15': class OutlineEntryObject 
67 0 obj
<< /Dest [ 44 0 R
 /XYZ
 62.69291
 171.5302
 0 ]
 /Next 68 0 R
 /Parent 51 0 R
 /Prev 66 0 R
 /Title (Serialization) >>
endobj
% 'Outline.16': class OutlineEntryObject 
68 0 obj
<< /Dest [ 47 0 R
 /XYZ
 62.69291
 318.0236
 0 ]
 /Parent 51 0 R
 /Prev 67 0 R
 /Title (Misc) >>
endobj
% 'R69': class PDFPages 
69 0 obj
% page tree
<< /Count 39
 /Kids [ 7 0 R
 8 0 R
 9 0 R
 11 0 R
 12 0 R
 13 0 R
 14 0 R
 15 0 R
 16 0 R
 17 0 R
 18 0 R
 19 0 R
 20 0 R
 21 0 R
 22 0 R
 23 0 R
 25 0 R
 26 0 R
 27 0 R
 28 0 R
 29 0 R
 30 0 R
 31 0 R
 32 0 R
 33 0 R
 34 0 R
 36 0 R
 37 0 R
 38 0 R
 39 0 R
 40 0 R
 41 0 R
 42 0 R
 43 0 R
 44 0 R
 45 0 R
 46 0 R
 47 0 R
 48 0 R ]
 /Type /Pages >>
endobj
% 'R70': class PDFStream 
70 0 obj
% page stream
<< /Length 6226 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 717.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 28 Tm /F2 20 Tf 24 TL 15.44488 0 Td (Frequently Asked Questions for PicklingTools) Tj T* 197.26 0 Td (1.7.0) Tj T* -212.7049 0 Td ET
Q
Q
q
1 0 0 1 62.69291 684.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (General Questions) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 672.0236 cm
Q
q
1 0 0 1 62.69291 672.0236 cm
Q
q
1 0 0 1 62.69291 504.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 153 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 153 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What are the PicklingTools?) Tj T* ET
Q
Q
q
1 0 0 1 23 99 cm
q
BT 1 0 0 1 0 38 Tm 2.73498 Tw 12 TL /F1 10 Tf 0 0 0 rg (The PicklingTools are an open-source collection of tools for communicating between C++ and) Tj T* 0 Tw .03561 Tw (Python components \(and Java as of PicklingTools 1.5.1\): they allow a developer to write pieces of an) Tj T* 0 Tw 1.406457 Tw (application in C++ and other pieces in Python, yet still have those pieces talk ) Tj /F3 10 Tf (easily) Tj /F1 10 Tf (. ) Tj /F2 10 Tf (All code is) Tj T* 0 Tw (plain C++ or plain Python so any framework can incorporate the PicklingTools code easily) Tj T* ET
Q
Q
q
1 0 0 1 23 45 cm
q
BT 1 0 0 1 0 38 Tm .243555 Tw 12 TL /F1 10 Tf 0 0 0 rg (The PicklingTools supports multiple legacy frameworks \(M2k, X-Midas, XMPY\), ) Tj /F3 10 Tf (but it is not bound to) Tj T* 0 Tw 1.198221 Tw (those frameworks) Tj /F1 10 Tf (: it's all raw Python and raw C++ \(and raw Java\) that is all compatible. You can) Tj T* 0 Tw .945988 Tw (write a server in M2k and a client in XMPY and another client in raw C++ and another client in an) Tj T* 0 Tw (X-Midas primitive and they all work together.) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.162485 Tw (A minor goal of the PicklingTools is to make the C++ experience as friendly as the Python) Tj T* 0 Tw (experience. \(And Java as well\).) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In the end, this is just a library. Use it or not.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 498.0236 cm
Q
q
1 0 0 1 62.69291 366.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 116.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 116.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why are they called the PicklingTools?) Tj T* ET
Q
Q
q
1 0 0 1 23 98.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The main currency of PicklingTools is essentially Python dictionaries. For example:) Tj T* ET
Q
Q
q
1 0 0 1 23 65 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL ({ 'key1': 323.1, 'key2': 'available' }) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (is a Python Dictionary.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm 1.731412 Tw 12 TL /F1 10 Tf 0 0 0 rg (When you serialize Python dictionaries, Python says that they are ) Tj /F3 10 Tf (pickled) Tj /F1 10 Tf (: that's where the term) Tj T* 0 Tw 2.655366 Tw (PicklingTools comes from. All clients and servers talk and send Python Dictionaries around in) Tj T* 0 Tw (requests.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 360.8236 cm
Q
q
1 0 0 1 62.69291 91.62362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 254.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 254.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why do you use Python Dictionaries as the "common currency" of PicklingTools?) Tj T* ET
Q
Q
q
1 0 0 1 23 236.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Python dictionaries are a very good "recursive, heterogeneous" data structure.) Tj T* ET
Q
Q
q
1 0 0 1 23 182.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.471412 Tw (For encoding data in requests and responses from clients, Python dictionaries are a very simple,) Tj T* 0 Tw .234147 Tw (easy-to-read, easy-to-write data structure based on a widely accepted standard. A Python Dictionary) Tj T* 0 Tw 2.229269 Tw (can contain any number of 'key-value' pairs where the values themselves can be other Python) Tj T* 0 Tw (Dictionaries. For example:) Tj T* ET
Q
Q
q
1 0 0 1 23 149 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL ({ 'REQUEST': { 'PingRequest':1000.1 }, 'Host': "dl380" } }) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 99 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.112485 Tw (is a simple Python Dictionary for encoding what might be a ping request every 1000.1 seconds to) Tj T* 0 Tw 3.602651 Tw (host machine named "dl380". Note that the structure can be dynamic, which is one of the) Tj T* 0 Tw (advantages of Python Dictionaries.) Tj T* ET
Q
Q
q
1 0 0 1 23 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .489985 Tw (The original currency of Midas 2k \(the precursor of the PicklingTools\) was the OpalTable, but it was) Tj T* 0 Tw (a bit of a stovepipe construction at the time.) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 26 Tm .250697 Tw 12 TL /F1 10 Tf 0 0 0 rg (There is a standard called "JSON" \(JavaScript Object Notation\) which specifies a standard for tables) Tj T* 0 Tw 2.83998 Tw (which is "kind of" backwards compatible with Python Dictionaries: See ) Tj 0 0 .501961 rg (http://json.org ) Tj 0 0 0 rg (for more) Tj T* 0 Tw (discussion and examples.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .69811 Tw (Those of you familiar with XML should think of Python Dictionaries as a smaller, cleaner, and more) Tj T* 0 Tw (user-friendly version of XML.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 91.62362 cm
Q
q
1 0 0 1 62.69291 85.62362 cm
Q
q
1 0 0 1 62.69291 85.62362 cm
Q
 
endstream
endobj
% 'R71': class PDFStream 
71 0 obj
% page stream
<< /Length 8190 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 651.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 99 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 99 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Where did the PicklingTools come from?) Tj T* ET
Q
Q
q
1 0 0 1 23 81 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (They were created to allow easy access/use of a a popular software product.) Tj T* ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .454651 Tw (A popular software product used the Midas2k OpalDaemon as a "server" and historically you had to) Tj T* 0 Tw 2.16186 Tw (use a Midas2k OpalSocketMsg as a "client" to talk to it. The product was popular enough that) Tj T* 0 Tw (non-Midas2k users wanted to be able to talk to the product without having to use Midas 2k.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .45561 Tw (The first versions of the PicklingTools included only code to write clients. Currently, a user can write) Tj T* 0 Tw .891984 Tw (a server or client easily in one of many different systems/languages: raw C++, raw Python, XMPY,) Tj T* 0 Tw (X-Midas C++ Primitives, Midas 2k. Raw Java is newly supported.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 645.0236 cm
Q
q
1 0 0 1 62.69291 411.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why do I want to use the PicklingTools?) Tj T* ET
Q
Q
q
1 0 0 1 23 189 cm
q
BT 1 0 0 1 0 14 Tm .121318 Tw 12 TL /F3 10 Tf 0 0 0 rg (Answer 1: ) Tj /F1 10 Tf (If you wish to use the "popular software product" mentioned above, PicklingTools makes it) Tj T* 0 Tw (VERY easy.) Tj T* ET
Q
Q
q
1 0 0 1 23 135 cm
q
BT 1 0 0 1 0 38 Tm 1.11332 Tw 12 TL /F3 10 Tf 0 0 0 rg (Answer 2: ) Tj /F1 10 Tf (If you have a legacy product written in Midas 2k that you wish to transition to X-Midas,) Tj T* 0 Tw .227318 Tw (PicklingTools makes it very easy. There is an X-Midas option tree called PTOOLS \(which is included) Tj T* 0 Tw 1.891984 Tw (in the PTOOLS distribution\) that contains several tools to make it easy to transition legacy M2k) Tj T* 0 Tw (products to X-Midas:) Tj T* ET
Q
Q
q
1 0 0 1 23 129 cm
Q
q
1 0 0 1 23 75 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (a.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (OpalTable tools: read and write OpalTables from/to disk) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (b.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (M2k Binary Serialization tools: understand M2k Serialization) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 6.22 0 Td (c.) Tj T* -6.22 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Interface with OpalDaemon and OpalSocketMsg) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 23 75 cm
Q
q
1 0 0 1 23 45 cm
q
BT 1 0 0 1 0 14 Tm 2.429988 Tw 12 TL /F3 10 Tf 0 0 0 rg (Answer 3: ) Tj /F1 10 Tf (If you wish to talk to X-Midas, but prefer to write code in raw C++ or raw Python,) Tj T* 0 Tw (PicklingTools enables that paradigm.) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Answer 4: ) Tj /F1 10 Tf (You want tools with cross language support for C++ and Python and Java.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.281567 Tw (In the end, PicklingTools is just a LIBRARY you can use or not. It is not tightly bound to any) Tj T* 0 Tw (particular product.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 405.0236 cm
Q
q
1 0 0 1 62.69291 345.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What languages does PicklingTools support?) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Python and C++ and Java.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .864987 Tw (The Java interface is a bit more immature than the C++ and Python, but it is supported. There are) Tj T* 0 Tw (currently some features missing from the Java codebase \(see the Java docs\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 339.0236 cm
Q
q
1 0 0 1 62.69291 201.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 123 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 123 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is a MidasTalker/MidasServer/MidasYeller/MidasListener?) Tj T* ET
Q
Q
q
1 0 0 1 23 105 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (These are the PicklingTools clients and servers.) Tj T* ET
Q
Q
q
1 0 0 1 23 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.935697 Tw (A MidasTalker is a client that talks to MidasServers over TCP/IP. Multiple clients can talk) Tj T* 0 Tw (concurrently to the same server.) Tj T* ET
Q
Q
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.413318 Tw (A MidasListener is a client that listens to a MidasYeller over UDP. Multiple clients can talk) Tj T* 0 Tw (concurrently to the same server.) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.123318 Tw (The "Midas" forename is to represent that these are compatible with the Midas 2k system: For) Tj T* 0 Tw (example, the PicklingTools MidasServer gives the same functionality as the Midas 2k OpalDaemon.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (At this point, though, you do not need to have Midas 2k anymore for these tools to be useful.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 195.0236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 103.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 103.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Can I use PicklingTools to enable easy back and forth between C++ and Python and Java?) Tj T* ET
Q
Q
q
1 0 0 1 23 85.15748 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Absolutely, that's one of the design goals) Tj T* ET
Q
Q
q
1 0 0 1 23 43.15748 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.285251 Tw (If you do a lot of cross language development in C++ and Python, you know that C++ is good at) Tj T* 0 Tw .262339 Tw (certain things and Python is good at certain things. The PicklingTools makes it easy to talk back and) Tj T* 0 Tw (forth between C++ and Python. In particular:) Tj T* ET
Q
Q
q
1 0 0 1 23 37.15748 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 34.15748 cm
Q
q
1 0 0 1 20 34.15748 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 19.15748 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 7.15748 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .23311 Tw (Interactions via files: It is very easy to read and write Python dictionaries from Python \(as it) Tj T* 0 Tw 2.989318 Tw (is built into Python\), and the PicklingTools allows the user to do that just as easily) Tj T* 0 Tw ET
Q
Q
q
Q
Q
q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R72': class PDFStream 
72 0 obj
% page stream
<< /Length 5755 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 609.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 143 Tm  T* ET
q
1 0 0 1 23 39 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 54 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 47 Tm  T* ET
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (from C++.) Tj T* ET
Q
Q
q
1 0 0 1 23 39 cm
Q
q
1 0 0 1 23 39 cm
Q
q
1 0 0 1 23 27 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (a.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If readability is a concern, files can contain textual \(ASCII\) Python Dictionaries) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 21 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (b.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.496647 Tw (If speed and size are concerns, files can contain binary serialized \(pickled\) Python) Tj T* 0 Tw (Dictionaries) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .406235 Tw (Interactions via sockets: As stated many times, it is easy to talk back and forth via sockets) Tj T* 0 Tw 4.01372 Tw (using the PicklingTools Midastalker, MidasSocket, MidasYeller and MidasYeller. For) Tj T* 0 Tw .116136 Tw (example, A Python MidasTalker can talk interoperably with a C++ MidasServer or a Python) Tj T* 0 Tw (MidasServer.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 23 39 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .38436 Tw (An alternative is to consider embedding Python within a C++ program or writing a C/C++ module for) Tj T* 0 Tw .161412 Tw (Python. For most interactions, consider using the PicklingTools as they should be simpler than either) Tj T* 0 Tw (of the above options.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 603.0236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 511.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 511.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is the easiest way to get started with the PicklingTools?) Tj T* ET
Q
Q
q
1 0 0 1 23 481.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .519269 Tw (The cPickle module in Python allows you to manipulate files and dump/load dictionaries very easily.) Tj T* 0 Tw (The chooserser.h file from C++ allows to manipulate files and dump/load dictionaries very easily.) Tj T* ET
Q
Q
q
1 0 0 1 23 451.1575 cm
q
BT 1 0 0 1 0 14 Tm 1.219987 Tw 12 TL /F1 10 Tf 0 0 0 rg (Example 1 \(Python -) Tj (> C++\): you want to dump a dictionary from Python into a file and have C++) Tj T* 0 Tw (read that file. Use the cPickle module in Python \(note we are using Pickling Protocol 0\):) Tj T* ET
Q
Q
q
1 0 0 1 23 393.9575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( my_dict = {'a':1, 'b':2}      # My dictionary to dump) Tj T* (>) Tj (>) Tj (>) Tj ( import cPickle) Tj T* (>) Tj (>) Tj (>) Tj ( cPickle.dump\( my_dict, file\('myfile.p0'\), 0\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 367.9575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Then, from C++, use the chooseser.h include:) Tj T* ET
Q
Q
q
1 0 0 1 23 226.7575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F4 10 Tf 0 0 0 rg (// C++: Want to load a file from python) Tj T* (#include "chooseser.h") Tj T*  T* (int main\(\)) Tj T* ({) Tj T* (  Val result;  // put it here!) Tj T* (  LoadValFromFile\("myfile.p0", result, SERIALIZE_P0\);) Tj T*  T* (  cout ) Tj (<) Tj (<) Tj ( result ) Tj (<) Tj (<) Tj ( endl;  // print it out! {'a':1, 'b':2}) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 188.7575 cm
q
BT 1 0 0 1 0 14 Tm 1.219987 Tw 12 TL /F1 10 Tf 0 0 0 rg (Example 2 \(C++ -) Tj (> Python\): you want to dump a dictionary from C++ into a file and have Python) Tj T* 0 Tw (read that file \(note we are using Pickling Protocol 2\):) Tj T* ET
Q
Q
q
1 0 0 1 23 71.55748 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F4 10 Tf 12 TL (// C++: Want to pickle a dictionary into a file from C++) Tj T* (#include "chooseser.h") Tj T*  T* (int main\(\)) Tj T* ({) Tj T* (  Val my_dict = Tab\("{ 'key1': 1, 'key2': 2.2 }"\);) Tj T* (  DumpValToFile\(my_dict, "my_file.p2", SERIALIZE_P2\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 45.55748 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now, load the file from Python:) Tj T* ET
Q
Q
q
1 0 0 1 23 -11.64252 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import cPickle) Tj T* (>) Tj (>) Tj (>) Tj ( result = cPickle.load\( file\('my_file2.p2'\) \)) Tj T* (           # Python load figures out whether P0 or P2) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R73': class PDFStream 
73 0 obj
% page stream
<< /Length 6492 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 671.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 80.2 Tm  T* ET
q
1 0 0 1 23 53 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( print result) Tj T* (           # {'key1': 1, 'key2': 2.2}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.594651 Tw (If you want to do stuff over sockets, read on about the MidasTalker, the MidasServer, the) Tj T* 0 Tw (MidasListener and the MidasYeller.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (See the Java documentation for how to work with Java.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 671.8236 cm
Q
q
1 0 0 1 62.69291 638.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Python) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 626.8236 cm
Q
q
1 0 0 1 62.69291 626.8236 cm
Q
q
1 0 0 1 62.69291 566.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What versions of Python does PicklingTools support?) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .318555 Tw (Historically, versions 2.1.x to 2.6.x have been tested extensively. More recently, 2.7 has been tested) Tj T* 0 Tw (and should work, but it has not been tested as much as the other versions.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3.x has not been tested: We are waiting for our main paying customer to adopt the 3.x series.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 560.8236 cm
Q
q
1 0 0 1 62.69291 305.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 240.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 240.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What do I need to use the PicklingTools in Python?) Tj T* ET
Q
Q
q
1 0 0 1 23 222.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (A handful of Python files and an ) Tj /F4 10 Tf (import) Tj T* ET
Q
Q
q
1 0 0 1 23 192.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.446457 Tw (All the Python files live in the "Python" area of the PicklingTools distribution. If you are using the) Tj T* 0 Tw (X-Midas option tree PTOOLS, the Python area under that option tree contains the exact same files.) Tj T* ET
Q
Q
q
1 0 0 1 23 150.2 cm
q
BT 1 0 0 1 0 26 Tm 1.448221 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are no C or C++ modules you "have to build". All the PicklingTools modules are written in) Tj T* 0 Tw .01528 Tw (straight Python, so all you have to do is ) Tj /F4 10 Tf (import ) Tj /F1 10 Tf (the proper module and move forward. For example,) Tj T* 0 Tw (to create a client to talk to a server on machine dl380, port 8888:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 144 re B*
Q
q
BT 1 0 0 1 0 122 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # Simple example in Python) Tj T* (>) Tj (>) Tj (>) Tj ( import midastalker   # Make sure midastalker.py on PYTHONPATH) Tj T* (>) Tj (>) Tj (>) Tj ( a = midastalker.MidasTalker\("dl380", 8888\)) Tj T* (>) Tj (>) Tj (>) Tj ( a.open\(\)) Tj T* (>) Tj (>) Tj (>) Tj ( data = a.recv\(\)  # Read a Python Dictionary from server) Tj T*  T* (UPDATE: There are now two Python C Extension modules.  The first) Tj T* (allows very fast XML/dict conversions.  The second allows using OC) Tj T* (serialization \(for example, if you want pickles over 4G, OC may be) Tj T* (your only option\).  These modules have to be built specially.) Tj T* (See the later section on the Python C Extension Modules.) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 299.6236 cm
Q
q
1 0 0 1 62.69291 82.62362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 202 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 202 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Where can I find examples?) Tj T* ET
Q
Q
q
1 0 0 1 23 184 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (In the same area where all the Python files are.) Tj T* ET
Q
Q
q
1 0 0 1 23 154 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .075318 Tw (There several examples in the Python area demonstrating several uses of all the different clients and) Tj T* 0 Tw (servers.) Tj T* ET
Q
Q
q
1 0 0 1 23 148 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 139 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (midastalker_ex.py) Tj /F1 10 Tf (: Simple usage of a Python MidasTalker \(TCP Client\)) Tj T* ET
Q
Q
q
1 0 0 1 20 121 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (midastalker_ex2.py) Tj /F1 10 Tf (: More complex example, showing how to reconnect) Tj T* ET
Q
Q
q
1 0 0 1 20 103 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (midasserver_ex.py) Tj /F1 10 Tf (: Simple MidasServer, works with midasTalker examples) Tj T* ET
Q
Q
q
1 0 0 1 20 85 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (permutation_client.py) Tj /F1 10 Tf (: More realistic MidasTalker example) Tj T* ET
Q
Q
q
1 0 0 1 20 67 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (permutation_server.py) Tj /F1 10 Tf (: More realistic MidasServer example, with threads) Tj T* ET
Q
Q
q
1 0 0 1 20 49 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (midasyeller_ex.py) Tj /F1 10 Tf (: Simple MidasYeller \(UDP Server\) example) Tj T* ET
Q
Q
q
1 0 0 1 20 33 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (midaslistener_ex.py) Tj /F2 10 Tf (: Simple MidasListener \(UDP Client\) example, works) Tj T* ET
Q
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (with the midasyeller_ex.py) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are also some examples in PythonCExt area.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 76.86614 cm
Q
 
endstream
endobj
% 'R74': class PDFStream 
74 0 obj
% page stream
<< /Length 7192 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 394.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 355.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 355.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What are Numeric and NumPy and why do I need them from Python?) Tj T* ET
Q
Q
q
1 0 0 1 23 325.4 cm
q
BT 1 0 0 1 0 14 Tm 3.418221 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (No, you don't need them, but they can be useful if you do lots of scientific) Tj T* 0 Tw (computation.) Tj T* ET
Q
Q
q
1 0 0 1 23 283.4 cm
q
BT 1 0 0 1 0 26 Tm .42881 Tw 12 TL /F3 10 Tf 0 0 0 rg (Numeric ) Tj /F1 10 Tf (and ) Tj /F3 10 Tf (NumPy ) Tj /F1 10 Tf (are Python modules written in C that allows you to do very fast numeric vector) Tj T* 0 Tw .348735 Tw (operations. Because they are written in C, it does those operations very fast. For some DSP, having) Tj T* 0 Tw (these operations available from Python is very useful.) Tj T* ET
Q
Q
q
1 0 0 1 23 241.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .668651 Tw (The reason you care about Numeric/NumPy: If you want to send large amounts of data \(resampled) Tj T* 0 Tw 3.579985 Tw (data, demod data, etc.\) over sockets, it is generally MUCH faster if you hold your data in) Tj T* 0 Tw (Numeric/NumPy arrays. For example:) Tj T* ET
Q
Q
q
1 0 0 1 23 208.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL ({ 'DATA' : array\(1,2,3,....\) }   # 1e6 data in Numeric array) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 182.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (vs.:) Tj T* ET
Q
Q
q
1 0 0 1 23 149 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL ({ 'DATA' : [1,2,3,....]  }# 1e6 data in standard Python List) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 99 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .454985 Tw (Everything will still work with holding data in standard Python Lists, but you may see some dramatic) Tj T* 0 Tw 1.11748 Tw (speed increases \(and dramatic memory reductions\) if you use Numeric arrays for holding/shipping) Tj T* 0 Tw (around numeric data.) Tj T* ET
Q
Q
q
1 0 0 1 23 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .838555 Tw (The problem is that Numeric does NOT come with most machine-installed versions of Python. You) Tj T* 0 Tw .74332 Tw (have to install it on your machine either by compiling it yourself with your version of Python, or you) Tj T* 0 Tw (have to find the RPM for it.) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .967045 Tw (NumPy seems to be installed on most machines as a standard package these days. If it's not, the) Tj T* 0 Tw (RPM/aptget/whatever is usually very easy to install on your machine.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .153984 Tw 12 TL /F1 10 Tf 0 0 0 rg (XMPY \(The X-Midas Python\) comes with Numeric installed already. XMPY as of 4.0.0 will ) Tj /F3 10 Tf (only ) Tj /F1 10 Tf (come) Tj T* 0 Tw (with NumPy. If you need Numeric, you will have to use earlier versions of XMPY.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 388.6236 cm
Q
q
1 0 0 1 62.69291 249.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 124 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 124 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Can I have both Numeric and NumPy in Python?) Tj T* ET
Q
Q
q
1 0 0 1 23 106 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer) Tj /F1 10 Tf (: No \(Well ... Mostly No\)) Tj T* ET
Q
Q
q
1 0 0 1 23 28 cm
q
BT 1 0 0 1 0 62 Tm 1.524692 Tw 12 TL /F1 10 Tf 0 0 0 rg (We can only support ) Tj /F3 10 Tf (ONE ) Tj /F1 10 Tf (of ) Tj /F3 10 Tf (Numeric ) Tj /F1 10 Tf (or ) Tj /F3 10 Tf (NumPy ) Tj /F1 10 Tf (inside of Python \(C++ and M2k don't have this) Tj T* 0 Tw 1.414597 Tw (restriction\). ) Tj /F3 10 Tf (Numeric ) Tj /F1 10 Tf (was the original de-facto package for handling arrays, but maintenance for it) Tj T* 0 Tw 2.74436 Tw (has faded. ) Tj /F3 10 Tf (NumPy ) Tj /F1 10 Tf (is now the de-facto standard. One of the ) Tj /F3 10 Tf (NumPy ) Tj /F1 10 Tf (design goals was to be) Tj T* 0 Tw .891235 Tw (backwards compatible with ) Tj /F3 10 Tf (Numeric) Tj /F1 10 Tf (, so they both have about the same API, which is why it's very) Tj T* 0 Tw 1.113735 Tw (difficult to support them both inside of Python as the same time. For more information on NumPy,) Tj T* 0 Tw (take a look at the web page.) Tj T* ET
Q
Q
q
1 0 0 1 23 12 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (\(We have seen systems with both installed, but it's messy.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (It can work, but it's better not to open this can of worms unless you have to.\)) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 243.6236 cm
Q
q
1 0 0 1 62.69291 189.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Do you recommend Numeric or NumPy?) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .562126 Tw (For backwards compatibility, Numeric may be your only choice. However, we strongly urge users to) Tj T* 0 Tw 1.877485 Tw (move forward to NumPy, as Numeric seems to be out of maintenance, and bugs are no longer) Tj T* 0 Tw (getting fixed. NumPy is very active.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 189.6236 cm
Q
q
1 0 0 1 62.69291 156.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (C++) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 144.6236 cm
Q
q
1 0 0 1 62.69291 144.6236 cm
Q
q
1 0 0 1 62.69291 102.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What versions of C++ does PicklingTools works with?) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.699213 Tw (Earlier versions of PicklingTools worked with ARM C++ and ANSI C++. Current versions take) Tj T* 0 Tw (advantage of complicated templates, so you need ANSI C++.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 78.62362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 11 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .153876 Tw (Almost all testing has been done on Linux \(Red Hat, Fedora\) under g++. A fair amount of testing has) Tj T* 0 Tw (been done under Tru64 C++ compiler CC. Some testing has been done with the Intel compiler \(icc\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 76.86614 cm
Q
 
endstream
endobj
% 'R75': class PDFStream 
75 0 obj
% page stream
<< /Length 4828 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 433.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 316.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 304.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL 1.714597 Tw (If Python Dictionaries are the "currency" of PicklingTools, how does C++ deal with them?) Tj T* 0 Tw (After all, C++ does not have Python Dictionaries built into the language.) Tj T* ET
Q
Q
q
1 0 0 1 23 286.6 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (A library provides "Python-like" Dictionaries) Tj T* ET
Q
Q
q
1 0 0 1 23 256.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .39498 Tw (The OpenContainers library provides the "Val/Tab/Arr" abstraction. The Tab gives us a "Python-like") Tj T* 0 Tw (Python Dictionary:) Tj T* ET
Q
Q
q
1 0 0 1 23 211.4 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (Python:  t = {'a': 1}) Tj T* (C++:     Tab t\("{ 'a': 1 }"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 185.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Arr gives us a "Python-like" Python List:) Tj T* ET
Q
Q
q
1 0 0 1 23 140.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (Python:  a = [1,2,3]) Tj T* (C++:     Arr a\("[1,2,3]"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 102.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .125251 Tw (The Val gives us a "Python-like" dynamic type \(a variable that can hold all the basic types, as well as) Tj T* 0 Tw (Arr and Tab\):) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 96 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F4 10 Tf 12 TL (Python:  a = 1) Tj T* (         a = "string") Tj T* (         a = { }) Tj T*  T* (C++:     Val a = 1;) Tj T* (         a = "string";) Tj T* (         a = Tab\("{ }"\);) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 427.4236 cm
Q
q
1 0 0 1 62.69291 81.02362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 331.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 331.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How do Tab, Val and Arr in OpenContainers work in C++?) Tj T* ET
Q
Q
q
1 0 0 1 23 313.4 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (As close to Python as C++ will allow) Tj T* ET
Q
Q
q
1 0 0 1 23 271.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .477126 Tw (Python obviously comes with Python Dictionaries built into the language and integrated well. In fact,) Tj T* 0 Tw 1.259984 Tw (because Python is a dynamically typed language, tables are very easy to build and manipulate in) Tj T* 0 Tw (Python, as a variable can contain a table, an integer, a real number or any type:) Tj T* ET
Q
Q
q
1 0 0 1 23 178.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # Python) Tj T* (>) Tj (>) Tj (>) Tj (  n = 10) Tj T* (>) Tj (>) Tj (>) Tj (  a = { 'sample': None }) Tj T* (>) Tj (>) Tj (>) Tj (  a['sample'] = n) Tj T* (>) Tj (>) Tj (>) Tj (  t = { }) Tj T* (>) Tj (>) Tj (>) Tj (  t['new entry'] = a) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 140.2 cm
q
BT 1 0 0 1 0 14 Tm 2.616457 Tw 12 TL /F1 10 Tf 0 0 0 rg (C++ is a statically typed language, so every variable has to have a type at compile time. To) Tj T* 0 Tw (represent that a variable can contain a table or array or number or integer, we use the type ) Tj /F3 10 Tf (Val) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 47 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL (// C++) Tj T* (Val n = 10;) Tj T* (Val a = Tab\("{ 'sample' : None }"\);) Tj T* (a["sample"] = n;) Tj T* (Val t = Tab\(\);) Tj T* (t["new entry"] = a;) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .926647 Tw (One major difference between Python and the C++ OpenContainers Val/Tab/Arr abstraction is that) Tj T* 0 Tw 2.39152 Tw (Python does reference counting and OpenContainers does deep copies by default, but can do) Tj T* 0 Tw (reference counting \(see below\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 76.86614 cm
Q
 
endstream
endobj
% 'R76': class PDFStream 
76 0 obj
% page stream
<< /Length 5652 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 275.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 474.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 474.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How does OpenContainers Val/Tab/Arr differ from Python?) Tj T* ET
Q
Q
q
1 0 0 1 23 456.6 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (They tend to look similar, but by default they copy data differently) Tj T* ET
Q
Q
q
1 0 0 1 23 390.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 2.86998 Tw (Python uses reference counting for copying, and OpenContainers uses both deep copies and) Tj T* 0 Tw 1.261984 Tw (reference counting. By default, if you are NOT using Proxies \(see below\), everything is copied by) Tj T* 0 Tw 1.114269 Tw (deep copies, meaning EVERYTHING is recursively copied. If you are using a Proxy, then copying) Tj T* 0 Tw 2.207126 Tw (happens just like Python. Here's some examples of what happens when we copy by reference) Tj T* 0 Tw (counting vs. deep copy.) Tj T* ET
Q
Q
q
1 0 0 1 23 372.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (## In Python:) Tj T* ET
Q
Q
q
1 0 0 1 23 291.4 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = [1,2]) Tj T* (>) Tj (>) Tj (>) Tj ( b = a      # Uses reference counting, a and b SHARE the list) Tj T* (>) Tj (>) Tj (>) Tj ( b[0] = 17) Tj T* (>) Tj (>) Tj (>) Tj ( print a,b  # BOTH a and b have changed!!) Tj T* (*****[17, 2] [17,2]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 265.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (// In C++:) Tj T* ET
Q
Q
q
1 0 0 1 23 184.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (Arr a\("[1,2]"\);) Tj T* (Arr b = a;    // Makes a deep copy) Tj T* (b[0] = 17;) Tj T* (cout ) Tj (<) Tj (<) Tj ( a ) Tj (<) Tj (<) Tj ( " " ) Tj (<) Tj (<) Tj ( b ) Tj (<) Tj (<) Tj ( endl  // ONLY b has changed!!) Tj T* (*****[1,2] [17.2]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 146.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .77061 Tw (If you wish to 'completely' emulate Python semantics, you can use Proxies in C++ \(see below\), but) Tj T* 0 Tw (there are issues to be aware of \(see the later FAQ below\).) Tj T* ET
Q
Q
q
1 0 0 1 23 128.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (// In C++:) Tj T* ET
Q
Q
q
1 0 0 1 23 47 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val a = new Arr\("[1,2]"\);   // This creates a PROXY) Tj T* (Val b = a;    // Use reference counting, a and b SHARE the list) Tj T* (b[0] = 17;) Tj T* (cout ) Tj (<) Tj (<) Tj ( a ) Tj (<) Tj (<) Tj ( " " ) Tj (<) Tj (<) Tj ( b ) Tj (<) Tj (<) Tj ( endl  # BOTH a and b have changed!!) Tj T* (*****[17,2] [17.2]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.231984 Tw (Thus, Python users are used to "sharing" data when they copy \(unless they explicitly deep copy\).) Tj T* 0 Tw .164104 Tw (The OpenContainers does a full deep copy \(unless they explicitly uses Proxies\) so that a and b have) Tj T* 0 Tw (their own explicit, unshared copy of the data.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 269.4236 cm
Q
q
1 0 0 1 62.69291 83.42362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 171 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 159 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL .734597 Tw (Why does the Val/Tab/Arr abstractions do deep copies by default but Python uses reference) Tj T* 0 Tw (counting by default?) Tj T* ET
Q
Q
q
1 0 0 1 23 141 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (For more intuitive copy semantics and to allow better threads performance in C++) Tj T* ET
Q
Q
q
1 0 0 1 23 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .460697 Tw (Most people, when they copy a table \(until they are used to Python's mutable/immutable semantics\)) Tj T* 0 Tw .489318 Tw (are surprised when the table they "copied" changes underneath them: this is because the table was) Tj T* 0 Tw .28784 Tw (shared. PicklingTools does the more "functional" copy \(full deep-copy\) by default because it tends to) Tj T* 0 Tw 1.748555 Tw (be more intuitive for new users. Experience has shown that sharing is usually better understood) Tj T* 0 Tw (when EXPLICIT \(which is why we have Proxies, see below\).) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .313735 Tw (The other issues is that Python does not have TRUE concurrent threads \(i.e., multiple threads in the) Tj T* 0 Tw 1.949147 Tw (same interpreter running concurrently within the same process on different CPUS\). Python uses) Tj T* 0 Tw .041163 Tw (something called the "Global Interpreter Lock" \(GIL\) and a thread must hold the lock in order to make) Tj T* 0 Tw .154987 Tw (progress inside the interpreter. Since only only one thread can hold the lock at a time, all threads are) Tj T* 0 Tw .198555 Tw (inherently serialized. Although Python supports the notion of threads, they cannot truly run in parallel) Tj T* 0 Tw (due to the GIL.) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R77': class PDFStream 
77 0 obj
% page stream
<< /Length 6674 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 633.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 119 Tm  T* ET
q
1 0 0 1 23 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 4.047251 Tw (The OpenContainers collection, however, was written with truly concurrent threads in mind.) Tj T* 0 Tw 2.277251 Tw (Experience with Midas 2k \(the birthplace of the OpenContainers collection\) demonstrated many) Tj T* 0 Tw (issues of threads with container classes: See the wikipedia: OpenContainers for more discussion.) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 2.177765 Tw (So, once a thread has its own deep copy of a data structure, it shouldn't have to worry about) Tj T* 0 Tw 3.808443 Tw (synchronization with other threads \(not all libraries, including the STL \(until 2009\) give this) Tj T* 0 Tw .631984 Tw (guarantee\). OpenContainers was written so that a thread with its own Dictionary does NOT have to) Tj T* 0 Tw .479983 Tw (worry about synchronization with other threads: One lesson from Midas 2k is that synchronization is) Tj T* 0 Tw (VERY expensive, and that any any excessive synchronization is very limiting.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 5.862706 Tw (Deep copies of tables allow threads to independently process tables without excessive) Tj T* 0 Tw (synchronization or false sharing or extra serialization.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 627.0236 cm
Q
q
1 0 0 1 62.69291 243.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 368.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 368.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (So how does Val work?) Tj T* ET
Q
Q
q
1 0 0 1 23 350.4 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Val is a simple container for any kind of type) Tj T* ET
Q
Q
q
1 0 0 1 23 332.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A Val is a dynamic container that can hold any of the following types:) Tj T* ET
Q
Q
q
1 0 0 1 23 326.4 cm
Q
q
1 0 0 1 23 239.4 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 81 cm
Q
q
1 0 0 1 20 81 cm
Q
q
1 0 0 1 20 69 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Ints: int_1, int_u1, int_2, int_u2, int_4, int_u4, int_8, int_u8) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 63 cm
Q
q
1 0 0 1 20 51 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Reals and Complexes: real_4, real_8, complex_8, complex_16) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 45 cm
Q
q
1 0 0 1 20 33 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Specials: None and bools \(True and False\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 27 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 12 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 12 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Complex Containers: Tab \(like Python Dictionary\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Arr \(like Python Lists\)) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 23 239.4 cm
Q
q
1 0 0 1 23 221.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For example:) Tj T* ET
Q
Q
q
1 0 0 1 23 116.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val a = 4;       // Put an int into variable a) Tj T* (cout ) Tj (<) Tj (<) Tj ( a.tag;   // See what type is in there 's' means int_4) Tj T* (a = 3.3;         // ... now a holds a real_8) Tj T* (cout ) Tj (<) Tj (<) Tj ( a.tag;   // 'd' means real_8) Tj T* (a = Tab\(\);) Tj T* (a = real_4\(3.3\); // Force it to be a real_4 instead of real_8) Tj T* (a = None;        // Empty value) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 90.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Getting the values out is just as easy: the natural conversion will occur for you:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (int_4 actual = a; // a is currently real_4\(3.3\), will be truncated and) Tj T* (                  // turned into int_4 as expected) Tj T* (cout ) Tj (<) Tj (<) Tj ( actual;   // .. value in actual is 3) Tj T*  T* (Tab t = a;        // Throws an exception!  No natural conversion) Tj T* (                  // from 3.3 to a Tab) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 237.6236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 145.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 145.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (So how does Arr work?) Tj T* ET
Q
Q
q
1 0 0 1 23 127.7575 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Like a Python List \(or an "array"\)) Tj T* ET
Q
Q
q
1 0 0 1 23 97.75748 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .369988 Tw (The only "gotcha" is that Arrs have to be filled either with \(a\) string literals or \(b\) using append or \(c\)) Tj T* 0 Tw (using fill) Tj T* ET
Q
Q
q
1 0 0 1 23 79.75748 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Creation Examples:) Tj T* ET
Q
Q
q
1 0 0 1 23 -1.44252 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (Arr a;  // Empty list) Tj T* (cout ) Tj (<) Tj (<) Tj ( a[0];  // Throws an exception!  Nothing in the list!) Tj T*  T* (Arr a\("[1,2,3]"\);  // Initialize with string literal, using []) Tj T* (cout ) Tj (<) Tj (<) Tj ( a[2];  // Okay, value 3) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R78': class PDFStream 
78 0 obj
% page stream
<< /Length 4720 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 477.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 274.6 Tm  T* ET
q
1 0 0 1 23 259.4 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (cout ) Tj (<) Tj (<) Tj ( a[3];  // Exception!  Beyond the ends) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 233.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Append Examples:) Tj T* ET
Q
Q
q
1 0 0 1 23 68.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 156 re B*
Q
q
BT 1 0 0 1 0 134 Tm 12 TL /F4 10 Tf 0 0 0 rg (Arr a\(10\);   // Creates EMPTY Array with space for 10 elements) Tj T* (cout ) Tj (<) Tj (<) Tj ( a[0]; // Throws an exception!  Nothing in list!) Tj T*  T* (a[0] = 10;    // WON'T WORK!!! Throws an exception because list empty) Tj T*  T* (// In order to initialize, you have to APPEND elements into the list) Tj T* (for \(int ii=0; ii) Tj (<) Tj (10; ii++\) {) Tj T* (  a.append\(ii\);) Tj T* (}) Tj T*  T* (a.append\(100\);  // Capacity was only 10, so this causes a resize) Tj T* (                // of the array capacity to 20, and now a[10]==100.) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 42.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Fill Examples:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (Arr a\(10\);    // Empty, with capacity of 10) Tj T* (a.fill\(None\); // ... fills with 10 Nones, a now has 10 elements) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 471.4236 cm
Q
q
1 0 0 1 62.69291 182.179 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 274.2446 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (8.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 274.2446 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (So how does Tab work?) Tj T* ET
Q
Q
q
1 0 0 1 23 256.2446 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Like Python Dictionaries) Tj T* ET
Q
Q
q
1 0 0 1 23 226.2446 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .110488 Tw (A Tab is basically a container for a bunch of Key-Value pairs. Both the Key and the Value are of type) Tj T* 0 Tw (Val.) Tj T* ET
Q
Q
q
1 0 0 1 23 208.2446 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Creation Examples:) Tj T* ET
Q
Q
q
1 0 0 1 23 163.4 cm
q
q
.990447 0 0 .990447 0 0 cm
q
1 0 0 1 6.6 6.663657 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 450 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (Tab a;   // Empty) Tj T* (Tab b\("{ 'a': 1 }"\);  // String literal looks just like Python Dictionary) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 137.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Insertion Examples:) Tj T* ET
Q
Q
q
1 0 0 1 23 80.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (a["hello"] = "there";  // Insert key "hello" with value "there") Tj T* (a[100] = 3.3;          // Insert int key 100 with real_8 value 3.3) Tj T* (cout ) Tj (<) Tj (<) Tj ( a\(100\);        // Show value\(3.3\) associated with key 100) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 54.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Lookups:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (if \(a.contains\("Hello"\)\) {  // Case matters) Tj T* (  cout ) Tj (<) Tj (<) Tj ( "there" ) Tj (<) Tj (<) Tj ( endl;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 176.179 cm
Q
q
1 0 0 1 62.69291 116.179 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (9.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why do I use [] sometimes and \(\) sometimes with a Tab?) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 14 Tm .174724 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (When inserting into the table, use [] on the left hand side. When looking up a key, use) Tj T* 0 Tw (\(\).) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Canonical Usage:) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R79': class PDFStream 
79 0 obj
% page stream
<< /Length 5181 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 328.2236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 423.8 Tm  T* ET
q
1 0 0 1 23 396.6 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (a[101] = "hi";    // [] on left hand side of =) Tj T* (cout ) Tj (<) Tj (<) Tj ( a\(100\);   // \(\) on right hand side) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 346.6 cm
q
BT 1 0 0 1 0 26 Tm .608084 Tw 12 TL /F1 10 Tf 0 0 0 rg (Why? Both [] and \(\) do the right thing if the key is already in the table, but they behave differently if) Tj T* 0 Tw 1.01999 Tw (the key is NOT in the table. With [], if the key is NOT in the table, it inserts it into the table with a) Tj T* 0 Tw (default Value of ) Tj /F3 10 Tf (None) Tj /F1 10 Tf (. For example:) Tj T* ET
Q
Q
q
1 0 0 1 23 265.4 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (// DO NOT DO THIS!!) Tj T* (Val xx = a["Nope"]; // Nope is NOT a key in table, so it forces) Tj T* (                    // changes to the table.  This behaves as if:) Tj T* (                    // a["Nope"] = None;) Tj T* (                    // Val xx = a\("Nope"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 239.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (With \(\), if they key is NOT in the table, an exception is thrown:) Tj T* ET
Q
Q
q
1 0 0 1 23 182.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (// DO NOT DO THIS!!) Tj T* (a\("NotThere"\) = 10; // Will throw exception because NotThere NOT in) Tj T* (                    // table and will NOT insert into table) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 144.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .556098 Tw (Experience has shown that you WANT an exception thrown if you lookup a key that is not there, so) Tj T* 0 Tw (use \(\) on the right hand side, [] on left.) Tj T* ET
Q
Q
q
1 0 0 1 23 126.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Here's how an example of how you want to use the \(\) and []:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F4 10 Tf 0 0 0 rg (int start=0, end=0;) Tj T* (try {) Tj T* (  start = a\("start"\);) Tj T* (  end   = a\("end"\);) Tj T* (} catch \(const exception) Tj (&) Tj ( e\) {) Tj T* (  // Has failed key in exception message so can see which lookup failed) Tj T* (  cerr ) Tj (<) Tj (<) Tj ( "Oops!  Forgot to populate table with:" ) Tj (<) Tj (<) Tj ( e.what\(\);) Tj T* (}) Tj T* (a["interval"] = end-start;  // Insert diff into table) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 322.2236 cm
Q
q
1 0 0 1 62.69291 120.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 187.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL .1 0 Td (10.) Tj T* -0.1 0 Td ET
Q
Q
q
1 0 0 1 23 175.2 cm
q
BT 1 0 0 1 0 14 Tm .10811 Tw 12 TL /F2 10 Tf 0 0 0 rg (Why do I sometimes see a Tab) Tj (& returned and sometimes a Tab? \(Similarly, sometimes I see a) Tj T* 0 Tw (Arr) Tj (& returned and sometimes a Arr\)) Tj T* ET
Q
Q
q
1 0 0 1 23 159.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 0 rg (Short Answer: ) Tj /F2 10 Tf (Tab) Tj (& is for changing the Tab in place.) Tj T* ET
Q
Q
q
1 0 0 1 23 144.2 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Tab is for getting a whole new copy out.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 126.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For example:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val v = Tab\(\);) Tj T* (Tab) Tj (&) Tj ( t = v;     // Get a reference to the Tab) Tj T* (t[0] = 17;) Tj T* (cout ) Tj (<) Tj (<) Tj ( v ) Tj (<) Tj (<) Tj ( t; // Changing t changes the Tab inside v) Tj T*  T* (Val z = Tab\(\);) Tj T* (Tab copy = z;   // Makes a full COPY of the table in z) Tj T* (copy[0] = 17;) Tj T* (cout ) Tj (<) Tj (<) Tj ( z ) Tj (<) Tj (<) Tj ( copy;  // z and copy are DIFFERENT COPIES) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 114.0236 cm
Q
q
1 0 0 1 62.69291 84.02362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL .1 0 Td (11.) Tj T* -0.1 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How can I get a stringized version of the my variable?) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can either call "Stringize" directly, or ask for a string version of your Val.) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R80': class PDFStream 
80 0 obj
% page stream
<< /Length 5296 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 683.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 68.2 Tm  T* ET
q
1 0 0 1 23 66.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For example:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (Val a = 1.3;) Tj T* (string a_string = string\(a\);  // Stringizes 1.3 for you) Tj T*  T* (string s = Stringize\(1.3\);) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 677.8236 cm
Q
q
1 0 0 1 62.69291 524.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 138.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL .1 0 Td (12.) Tj T* -0.1 0 Td ET
Q
Q
q
1 0 0 1 23 138.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Can I cascade lookups and inserts into Tabs and Arrs?) Tj T* ET
Q
Q
q
1 0 0 1 23 120.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Yes) Tj T* ET
Q
Q
q
1 0 0 1 23 102.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For example:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab t\("{ 'a': 1, 'nested': { 'start': 1.1, 'end': 2.2 } }"\);) Tj T* (t["nested"]["start"] = 1.11;  // cascading inserts) Tj T* (cout ) Tj (<) Tj (<) Tj ( t\("nested"\)\("end"\);   // cascading lookups) Tj T*  T* (Arr a\("[0,[1,2,3],555]"\);) Tj T* (a[1][0] = "hello";) Tj T* (cout ) Tj (<) Tj (<) Tj ( a;   //  [0, ["hello",2,3], 555]) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 518.6236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 426.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL .1 0 Td (13.) Tj T* -0.1 0 Td ET
Q
Q
q
1 0 0 1 23 414.7575 cm
q
BT 1 0 0 1 0 14 Tm .58528 Tw 12 TL /F2 10 Tf 0 0 0 rg (I like that I can do cascading lookups/insertions with Arrs and Tabs. Why can't I do that with) Tj T* 0 Tw (strings and Array) Tj (<) Tj (T) Tj (>) Tj (?) Tj T* ET
Q
Q
q
1 0 0 1 23 396.7575 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Limitations of C++) Tj T* ET
Q
Q
q
1 0 0 1 23 378.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (It would be nice if you could do this:) Tj T* ET
Q
Q
q
1 0 0 1 23 333.5575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (Val a = "abc";) Tj T* (a[0] = "A";   // WILL THROW AN EXCEPTION, a is a STRING) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 307.5575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (or similarly:) Tj T* ET
Q
Q
q
1 0 0 1 23 262.3575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (Val b = Array) Tj (<) Tj (real_8) Tj (>) Tj (\(10\);) Tj T* (cout ) Tj (<) Tj (<) Tj ( b[0];  // WILL THROW AN EXCEPTION, b is an Array) Tj (<) Tj (real_8) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 236.3575 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The problem is that the [] operation always returns a ) Tj /F4 10 Tf (Val) Tj (&) Tj /F1 10 Tf (: It's the static typing of C++.) Tj T* ET
Q
Q
q
1 0 0 1 23 218.3575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Consider:) Tj T* ET
Q
Q
q
1 0 0 1 23 185.1575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (Val a = "abc"; a[0] = "A";   // THIS DOESN'T WORK!!!!) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 135.1575 cm
q
BT 1 0 0 1 0 26 Tm .219988 Tw 12 TL /F1 10 Tf 0 0 0 rg (In order for this to work, [] would have to return a ) Tj /F4 10 Tf (char) Tj (&) Tj /F1 10 Tf (. Or for the ) Tj /F4 10 Tf (Array) Tj (<) Tj (real_8) Tj (> ) Tj /F1 10 Tf (to work, the []) Tj T* 0 Tw 1.094104 Tw (operation would have to return a ) Tj /F4 10 Tf (real_8) Tj (&) Tj /F1 10 Tf (. \(Some kind of proxy may fix this, but makes the code) Tj T* 0 Tw (even more complex and slow\).) Tj T* ET
Q
Q
q
1 0 0 1 23 117.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The workaround: Get the value out, and mess with it. See the examples:) Tj T* ET
Q
Q
q
1 0 0 1 23 -12.04252 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F4 10 Tf 0 0 0 rg (// With Array) Tj (<) Tj (T) Tj (>) Tj (, you can get a reference out and mess with it in place) Tj T* (Val vv = Array) Tj (<) Tj (real_8\)\(10\);) Tj T* (Array) Tj (<) Tj (real_8) Tj (>) Tj (&) Tj ( a = vv;) Tj T* (a.expandTo\(100\);   // changing a changes the value inside) Tj T*  T* (// With strings, all you can do is copy it back in,) Tj T* (// you CAN NOT get a string) Tj (&) Tj  T* (Val vvv = "abc";) Tj T* (string s = vvv;) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R81': class PDFStream 
81 0 obj
% page stream
<< /Length 6162 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 24.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (s[0] = "A";) Tj T* (vvv = s;) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 721.8236 cm
Q
q
1 0 0 1 62.69291 529.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 177 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL .1 0 Td (14.) Tj T* -0.1 0 Td ET
Q
Q
q
1 0 0 1 23 177 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is the difference between OpenContainers and PicklingTools?) Tj T* ET
Q
Q
q
1 0 0 1 23 147 cm
q
BT 1 0 0 1 0 14 Tm 1.766647 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (PicklingTools is a library that ships with the OpenContainers library: PicklingTools) Tj T* 0 Tw (USES OpenContainers.) Tj T* ET
Q
Q
q
1 0 0 1 23 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 4.763615 Tw (OpenContainers is "essentially" the C++ containers collection from Midas2k that used the) Tj T* 0 Tw 2.882706 Tw (RogueWave interfaces. The main philosophy is that these classes are open-source, inlineable) Tj T* 0 Tw .97436 Tw (container classes with an eye towards speed for the core classes and an eye towards usability for) Tj T* 0 Tw (the Val classes.) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 3.219983 Tw (PicklingTools is a library for writing socket servers and clients C++ and Python. The central) Tj T* 0 Tw 1.982485 Tw (philosophy is that it should be easy to write interoperable socket servers or clients in raw C++,) Tj T* 0 Tw 1.522651 Tw (X-Midas, raw Python, XMPY, or Midas 2k. \(By interoperable, we mean that clients written in one) Tj T* 0 Tw .034431 Tw (system \(such as raw C++\) should be able to talk directly to servers written in a different system \(such) Tj T* 0 Tw (as Python\).) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .868443 Tw (The C++ PicklingTools uses the OpenContainers libraries to allow a more "Python like" experience) Tj T* 0 Tw (when using dictionaries.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 523.8236 cm
Q
q
1 0 0 1 62.69291 355.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 153 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL .1 0 Td (15.) Tj T* -0.1 0 Td ET
Q
Q
q
1 0 0 1 23 153 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why do the Tab/Val/Arr classes not use the C++ Standard Template Library \(STL\)?) Tj T* ET
Q
Q
q
1 0 0 1 23 135 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Usability issues, threads issues, historic issues, preference issues) Tj T* ET
Q
Q
q
1 0 0 1 23 105 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.450976 Tw (Historically, the OpenContainers were a re-implementation of the RogueWave containers classes.) Tj T* 0 Tw (They used the RogueWave interfaces.) Tj T* ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .837126 Tw (From a threads perspective, the STL \(until TR2, supposedly available in February 2009\) was silent) Tj T* 0 Tw .35683 Tw (on the issues of threads. You had to "hope" that the STL was built with thread issues in mind. Being) Tj T* 0 Tw .66186 Tw (a thread-friendly class has much more to do than just simple locking and unlocking issues. See the) Tj T* 0 Tw 1.059976 Tw (wikipedia: OpenContainers for more discussion. The OpenContainers cares strongly about threads) Tj T* 0 Tw (and couldn't depend on the STL to get it right.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .892651 Tw (From a usability issue, the STL tends to be very long-winded and clumsy. The Val/Tab/Arr classes) Tj T* 0 Tw 2.578443 Tw (were written to be simple, friendly, easy-to-use and look like Python. Providing a "Python-like") Tj T* 0 Tw (experience with C++ tends to be at odds with using the STL.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 349.8236 cm
Q
q
1 0 0 1 62.69291 289.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL .1 0 Td (16.) Tj T* -0.1 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL .314987 Tw (Now that C++ TR2 is out, are you going to rewrite pieces of the PicklingTools to be more STL) Tj T* 0 Tw (like?) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Grumble, maybe.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (See above for discussion.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 289.8236 cm
Q
q
1 0 0 1 62.69291 256.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (C++ and Proxys: New in PicklingTools 1.0.0) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 244.8236 cm
Q
q
1 0 0 1 62.69291 244.8236 cm
Q
q
1 0 0 1 62.69291 103.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 126.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 126.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is a Proxy?) Tj T* ET
Q
Q
q
1 0 0 1 23 96.2 cm
q
BT 1 0 0 1 0 14 Tm .41104 Tw 12 TL /F1 10 Tf 0 0 0 rg (As of PicklingTools 1.00, Val can support Proxies. A Proxy is a way of adopting a Tab, OTab, Arr or) Tj T* 0 Tw (Array) Tj (<) Tj (T) Tj (> so that it can be shared.) Tj T* ET
Q
Q
q
1 0 0 1 23 78.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In its simplest form:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (Proxy p = new Tab\("{'a': 1}"\);  // Share this table) Tj T*  T* (Val v1 = p;   // shared copy) Tj T* (Val v2 = p;   // shared copy) Tj T* (v1["a"] = 17;   // v1 and v2 BOTH see the change!) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R82': class PDFStream 
82 0 obj
% page stream
<< /Length 5790 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 657.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 95 Tm  T* ET
q
1 0 0 1 23 81 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .356179 Tw (The Proxy exists as a value for a type of "link" or "pointer": a way to share data without having to do) Tj T* 0 Tw (a full copy. There are three current ways to really use this:) Tj T* ET
Q
Q
q
1 0 0 1 23 75 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 72 cm
Q
q
1 0 0 1 20 72 cm
Q
q
1 0 0 1 20 60 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In a system with no threads \(EASY\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 54 cm
Q
q
1 0 0 1 20 30 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .065697 Tw (In a system with threads where you have to worry about coordinating data sharing between) Tj T* 0 Tw (threads \(MEDIUM\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 24 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .768651 Tw (In a system with multiple processes sharing a piece of memory, where you have to worry) Tj T* 0 Tw (about coordinating data sharing between processes \(HARD\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 651.0236 cm
Q
q
1 0 0 1 62.69291 401.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 234.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 234.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why do I want a Proxy?) Tj T* ET
Q
Q
q
1 0 0 1 23 180.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.225697 Tw (Recall that everything in OpenContainers is passed by DEEP COPY. When you copy a Proxy,) Tj T* 0 Tw .522927 Tw (however, you only copy a handle \(not the entire piece of data\). In order to avoid excessive copying,) Tj T* 0 Tw .723516 Tw (you may want larger tables and/or arrays inside of Proxies. Or you may simply wish to share some) Tj T* 0 Tw (data structure among multiple tables.) Tj T* ET
Q
Q
q
1 0 0 1 23 162.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For example:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 156 re B*
Q
q
BT 1 0 0 1 0 134 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tab t;) Tj T*  T* (Array) Tj (<) Tj (real_8) Tj (>) Tj ( a\(1000\);) Tj T* (fillWithZeroes\(a\);) Tj T*  T* (t["full copy"] = a;  // FULL, DEEP COPY of a: 1000 elements copied) Tj T*  T* (Proxy p = new Array) Tj (<) Tj (real_8) Tj (>) Tj (\(1000\);) Tj T* (Array) Tj (<) Tj (real_8) Tj (>) Tj (&) Tj ( ar = p;) Tj T* (fillWithZeroes\(ar\);) Tj T*  T* (t["proxy"] = p;     // Just a copy of the handle, much cheaper! 4 bytes) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 395.8236 cm
Q
q
1 0 0 1 62.69291 183.4375 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 197.3861 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 197.3861 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Does a Proxy handle the memory management for you?) Tj T* ET
Q
Q
q
1 0 0 1 23 179.3861 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Yes, if you want it to.) Tj T* ET
Q
Q
q
1 0 0 1 23 149.3861 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .103988 Tw (By default, the Proxy "adopts" pointer to data given to it. \(You can change this, but it's rare to want to) Tj T* 0 Tw (do this\).) Tj T* ET
Q
Q
q
1 0 0 1 23 107.3861 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .298651 Tw (The Proxy uses a reference-counting scheme, so everytime you copy or destruct a Proxy, it updates) Tj T* 0 Tw 1.284985 Tw (the reference count. When the reference count goes to 0, the item is destructed and the memory) Tj T* 0 Tw (handed back to the allocator.) Tj T* ET
Q
Q
q
1 0 0 1 23 89.3861 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For example:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.990447 0 0 .990447 0 0 cm
q
1 0 0 1 6.6 6.663657 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 450 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL ({) Tj T* (  Proxy p = new Tab\(\);  // ref count at 1) Tj T* (  {) Tj T* (     Proxy p2 = p;      // ref count up to 2) Tj T* (  }          // back to 1 when p2 goes away) Tj T* (}  // ref count at 0 when p goes away, so Tab destructed, memory returned) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 177.4375 cm
Q
q
1 0 0 1 62.69291 117.4375 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is the easiest way to use a Proxy?) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 14 Tm 1.09832 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (If I don't worry about threads or processes and I just want to share some data and) Tj T* 0 Tw (avoid excessive copying) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For example:) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R83': class PDFStream 
83 0 obj
% page stream
<< /Length 4883 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 655.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 96.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg (// Example: CREATION) Tj T* (Proxy p = new Tab\("{'a':1}"\);) Tj T* (   // or) Tj T* (Proxy p\(new Tab\("{'a':1}"\), true, false\);) Tj T*  T* (// Example: USAGE) Tj T* (Tab) Tj (&) Tj ( t = p;      // Get table pointed to by proxy) Tj T* (t["b"] = "add";) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 655.8236 cm
Q
q
1 0 0 1 62.69291 649.8236 cm
Q
q
1 0 0 1 62.69291 496.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 129.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .136654 Tw (This proxy adopts the memory so when the last proxy goes away, the table will be destructed and the) Tj T* 0 Tw (memory will go away:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 120 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 98 Tm /F4 10 Tf 12 TL (// Common idiom) Tj T* (Proxy p = new Tab\("{'a':1}"\);) Tj T* (Val v = p;) Tj T*  T* (// ... so below is supported to "automatically" create a Proxy in v) Tj T* (Val v = new Tab\("{'a':1}"\);) Tj T*  T* (// Once the proxy for a Tab is in a Val, you can use [] notation) Tj T* (v["changing the table in proxy"] = "yup";) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 496.6236 cm
Q
q
1 0 0 1 62.69291 490.6236 cm
Q
q
1 0 0 1 62.69291 490.6236 cm
Q
q
1 0 0 1 62.69291 84.22362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 391.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 391.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (If I am worried about Threads, how does that change how I use a Proxy?) Tj T* ET
Q
Q
q
1 0 0 1 23 361.4 cm
q
BT 1 0 0 1 0 14 Tm .075318 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Creation is slightly different, and you have to use a ) Tj /F3 10 Tf (TransactionLock ) Tj /F1 10 Tf (to enforce mutual) Tj T* 0 Tw (exclusion when you you write or read from a table that is shared among threads.) Tj T* ET
Q
Q
q
1 0 0 1 23 307.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .589985 Tw (When using threads, you are probably aware that you have to be careful when sharing data among) Tj T* 0 Tw .330574 Tw (threads so it doesn't get corrupted. In general for Vals, you don't worry about this too much because) Tj T* 0 Tw .118409 Tw (Vals are copied by DEEP COPY for this very reason: once a thread has its own DEEP COPY, then it) Tj T* 0 Tw (can usually use the table without worrying.) Tj T* ET
Q
Q
q
1 0 0 1 23 277.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .34936 Tw (If you use Proxies, however, you have to make sure you co-ordinate sharing. The Proxy gives some) Tj T* 0 Tw ("controlled sharing" capabilities.) Tj T* ET
Q
Q
q
1 0 0 1 23 247.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.061163 Tw (Creation is slightly different. Note that you will create a Proxy that contains a Lock so you can) Tj T* 0 Tw (enforce single thread access:) Tj T* ET
Q
Q
q
1 0 0 1 23 214.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (Proxy p = Locked\(new Tab\("{'a':1}"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 164.2 cm
q
BT 1 0 0 1 0 26 Tm .078735 Tw 12 TL /F1 10 Tf 0 0 0 rg (By saying "Locked", you are are creating a Proxy that is managed atomically and you expect multiple) Tj T* 0 Tw .401654 Tw (threads to copy proxies around. Note that you only have to use a ) Tj /F3 10 Tf (Locked ) Tj /F1 10 Tf (Proxy if you know multiple) Tj T* 0 Tw (threads will be copying this table:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F4 10 Tf 0 0 0 rg (// Usage:) Tj T* (Tab) Tj (&) Tj ( t = p;   // Rare: I know NO OTHER THREAD is looking at) Tj T* (   // or) Tj T* ({) Tj T* (  TransactionLock tl\(p\);   // yes, this is the same Proxy p) Tj T*  T* (  Tab) Tj (&) Tj ( t = p;) Tj T* (  t["b"] = "add";) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .399987 Tw (Inside the { }, only one thread at a time may hold the TransationLock: This guarantees that only one) Tj T* 0 Tw (thread may read or write the table. In other words, you can "lock" your table for atomic transactions.) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R84': class PDFStream 
84 0 obj
% page stream
<< /Length 6187 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 699.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 53 Tm  T* ET
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.191163 Tw (Note that memory is still managed for you by the Proxy and the data destroyed when the last) Tj T* 0 Tw (reference goes away.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .381412 Tw (TransactionLocks now support timeouts, so a runway thread can't inhinit progress. If an exception is) Tj T* 0 Tw 1.07686 Tw (thrown, then that means the TransactionLock timeout expired, and the user may want to see if he) Tj T* 0 Tw (needs to clean up.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
Q
q
1 0 0 1 62.69291 338.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 339.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 339.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Can I use Proxies with custom allocators? I need to use a special region of memory.) Tj T* ET
Q
Q
q
1 0 0 1 23 321.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Yes.) Tj T* ET
Q
Q
q
1 0 0 1 23 305.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (You may wish to put all your tables in one piece of shared memory:) Tj T* ET
Q
Q
q
1 0 0 1 23 266.2 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (a.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (to facilitate sharing) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (b.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (to cross process boundaries \(HARD! see below\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 23 224.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 3.65748 Tw (By default, OpenContainers 1.6.0 and beyond contain some default allocators you can use.) Tj T* 0 Tw 4.347251 Tw (Currently, the only allocators supported are the custom StreamingAllocator and the default) Tj T* 0 Tw ("new/delete". But, the entire Val/Str/Tab/Arr suite contained support for the allocators:) Tj T* ET
Q
Q
q
1 0 0 1 23 47 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 168 re B*
Q
q
BT 1 0 0 1 0 146 Tm 12 TL /F4 10 Tf 0 0 0 rg (// Example: CREATION) Tj T* (Proxy  p = Shared\(SHM, Tab\("{'a': 1}"\)\);) Tj T*  T* (// Example: USE) Tj T* (Tab) Tj (&) Tj ( t = p;  // I __KNOW__ no one else has the lock .. rare ...) Tj T* (         // or) Tj T* ({ // Lock is held so no one else in any process \(or this one\) may use) Tj T* (  // or modify this) Tj T* (  TransactionLock tl\(p\);) Tj T*  T* (  Tab) Tj (&) Tj ( t = p;) Tj T* (  t["b"]  = "add";    // all components of t \(key, value\) IN SHARED MEM!) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .011163 Tw (The "SHM" is an allocator that allocates memory from some shared memory pool. The pool may be a) Tj T* 0 Tw .914983 Tw (simple allocated with new/delete or may be a pool mapped and shared among multiple processes.) Tj T* 0 Tw (When the last proxy goes away, the Tab is deallocated from OUT of the pool.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 332.8236 cm
Q
q
1 0 0 1 62.69291 86.82362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 231 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 231 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Can I use Proxies with Shared Memory across multiple processes?) Tj T* ET
Q
Q
q
1 0 0 1 23 213 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (You can, but there are limitations and it's difficult.) Tj T* ET
Q
Q
q
1 0 0 1 23 183 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.076412 Tw (The PicklingTools contains wrapper code to use the UNIX shared memory facilities of UNIX. They) Tj T* 0 Tw (are in "sharedmem.h,.cc") Tj T* ET
Q
Q
q
1 0 0 1 23 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.337318 Tw (The easiest way to use Tabs/Vals, etc. with memory shared among processes is to follow the) Tj T* 0 Tw .209269 Tw (example in "sharedmem_test.cc". In that example, you create a shared memory region in the parent,) Tj T* 0 Tw 1.743984 Tw (fork a child, then that child \(through inheritance without extra work\) maps the same region. This) Tj T* 0 Tw (works and works well.) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL .063672 Tw (If you wish to use processes which don't share a common lineage, it's a lot harder and may not work.) Tj T* 0 Tw .744651 Tw (It basically requires you to use SHMCreate to create shared memory region in one process, record) Tj T* 0 Tw 1.482651 Tw (where the region gets mapped into memory, then force a SHMAttach to attach to EXACTLY that) Tj T* 0 Tw 1.462485 Tw (region. This is difficult and may or may nor work \(depending on how well your implementation of) Tj T* 0 Tw .112651 Tw (mmap supports the MAP_FIXED option\). One thing we have found is that certain versions of RedHat) Tj T* 0 Tw 2.187251 Tw (have the "Address Randomization" optimization \(to keep hackers from exploiting address space) Tj T* 0 Tw .411797 Tw (regularity\). This optimization prevents the SHMCreate/SHMAttach method from working and you will) Tj T* 0 Tw (have to turn it off to get this to work.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.337318 Tw (Later versions of PicklingTools will support this better, but right now only the parent/child idiom is) Tj T* 0 Tw (recommended.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 80.82362 cm
Q
 
endstream
endobj
% 'R85': class PDFStream 
85 0 obj
% page stream
<< /Length 6559 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 424.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 325.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (8.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 313.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL .857984 Tw (When I use shared memory \(between processes\) with Tabs, etc., why does it matter that we) Tj T* 0 Tw (map the shared memory to the same address space?) Tj T* ET
Q
Q
q
1 0 0 1 23 283.4 cm
q
BT 1 0 0 1 0 14 Tm .037984 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Tabs contain pointers, and those pointers MUST have the same value in both address) Tj T* 0 Tw (spaces.) Tj T* ET
Q
Q
q
1 0 0 1 23 241.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .622927 Tw (When we we put a Tab in shared memory, its data contains pointers to nodes, pointers to memory,) Tj T* 0 Tw .084488 Tw (etc. To make sure that all pointers point to the same thing, \(1\) all the data must be in shared memory) Tj T* 0 Tw (and \(2\) All the data must be at the same address.) Tj T* ET
Q
Q
q
1 0 0 1 23 223.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If \(1\) is not met, then the data is not in shared memory and it cannot be seen by the other process.) Tj T* ET
Q
Q
q
1 0 0 1 23 193.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.995488 Tw (If \(2\) is not met, then if we try to "look" at the data via the pointer, we'll get different answers!) Tj T* 0 Tw (\(because they point to different locations\)) Tj T* ET
Q
Q
q
1 0 0 1 23 163.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.25186 Tw (In other words, if you are using shared memory between processes, you need to be very careful.) Tj T* 0 Tw (This is why there is a special interface for initially creating a table in shared memory:) Tj T* ET
Q
Q
q
1 0 0 1 23 130.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (Proxy p = Shared\(shm, Tab\("{ }"\)\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 80.2 cm
q
BT 1 0 0 1 0 26 Tm .497882 Tw 12 TL /F1 10 Tf 0 0 0 rg (This ensures the table and all its data are stored in the shared memory. Once the table is in shared) Tj T* 0 Tw 1.790697 Tw (memory, PicklingTools makes sure that inserts into Tabs and Arrs and Array) Tj (<) Tj (T) Tj (> stay in Shared) Tj T* 0 Tw (memory:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (Val v=p;) Tj T* (v["allin"] = "shared memory";  // All inserted data in shared memory) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.205984 Tw 12 TL /F1 10 Tf 0 0 0 rg (Let's repeat that: The PicklingTools, if you use standard operations like [] ) Tj /F3 10 Tf (guarantee ) Tj /F1 10 Tf (that the keys) Tj T* 0 Tw (and values of the Tab will be in shared memory.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 418.6236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 326.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (9.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 326.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is the RedHat "Address Randomization" and why does it affect SHMAttach?) Tj T* ET
Q
Q
q
1 0 0 1 23 296.7575 cm
q
BT 1 0 0 1 0 14 Tm .361412 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (It randomizes where memory maps in address spaces, and causes SHMAttach to fail) Tj T* 0 Tw (if you have to "force" a memory address.) Tj T* ET
Q
Q
q
1 0 0 1 23 230.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.25498 Tw (Details: Basically, to stop hackers from exploiting address space regularities, the RedHat Address) Tj T* 0 Tw .521797 Tw (Randomization \(also referred to as ExecShield\) makes mmap picks "random" addresses throughout) Tj T* 0 Tw 2.968651 Tw (memory \(as well as other process data structures\). The end result is that if memory chosen) Tj T* 0 Tw .341318 Tw ('randomly' conflicts with the address space you need, mmap will segfault. The problem, of course, is) Tj T* 0 Tw (that it is random and sometimes will work, and sometimes won't!) Tj T* ET
Q
Q
q
1 0 0 1 23 176.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .268651 Tw (By turning "Address Randomization" off, you can have a MUCH better chance of not having address) Tj T* 0 Tw .00284 Tw (space conflicts between processes \(because the address spaces will be grown the same way\). Thus,) Tj T* 0 Tw .209985 Tw (if two processes do not share the same lineage, they can still mmap the same addresses confidently) Tj T* 0 Tw (and share memory, tables, etc.) Tj T* ET
Q
Q
q
1 0 0 1 23 146.7575 cm
q
BT 1 0 0 1 0 14 Tm 2.543318 Tw 12 TL /F1 10 Tf 0 0 0 rg (To turn off the Address Randomization feature on a per process basis, use ) Tj /F4 10 Tf (setarch ) Tj /F1 10 Tf (on the) Tj T* 0 Tw (executable you are going to run. For example, when you run the ) Tj /F3 10 Tf (sharedmem_test ) Tj /F1 10 Tf (from this baseline:) Tj T* ET
Q
Q
q
1 0 0 1 23 113.5575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (% setarch i386 sharedmem_test 0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 75.55748 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .289269 Tw (Turning off the "Address Randomization" feature for the whole machine is more difficult and requires) Tj T* 0 Tw (root privies and a reboot:) Tj T* ET
Q
Q
q
1 0 0 1 23 69.55748 cm
Q
q
1 0 0 1 23 18.35748 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 45.2 cm
Q
q
1 0 0 1 20 45.2 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 30.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 30.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Add the following to /etc/sysctl.conf file:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 393.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (kernel.exec-shield = 0) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R86': class PDFStream 
86 0 obj
% page stream
<< /Length 6074 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 719.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 32.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 33.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\(It can be made effective for the current session by using\):) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 422.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (# sysctl -w kernel.exec-shield=0) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 713.8236 cm
Q
q
1 0 0 1 62.69291 701.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL .1 0 Td (10.) Tj T* -0.1 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Where can I find more information shared memory in PicklingTools?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 701.8236 cm
Q
q
1 0 0 1 62.69291 695.8236 cm
Q
q
1 0 0 1 62.69291 605.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 42 cm
q
BT 1 0 0 1 0 38 Tm 1.345366 Tw 12 TL /F1 10 Tf 0 0 0 rg (As of PicklingTools 1.4.1, there is better documentation \(as well as better abstractions\) discussing) Tj T* 0 Tw 4.671412 Tw (how to use Vals and shared memory. Check out the "Shared Memory" document in the) Tj T* 0 Tw 16.63622 Tw (Documentation area on the ) Tj 0 0 .501961 rg (http://www.picklingtools.com ) Tj 0 0 0 rg (web site or the) Tj T* 0 Tw (PicklingTools141Release/Docs/shm.txt file.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .49284 Tw (As of PicklingTools 1.6.0, the Shared Memory abstractions have been augmented to be more robust) Tj T* 0 Tw .187485 Tw (and handle errors better: you can specify timeouts, and break handlers when things fail. See code for) Tj T* 0 Tw (more details.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 605.8236 cm
Q
q
1 0 0 1 62.69291 551.8236 cm
q
BT 1 0 0 1 0 24.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (C++ and OTab/Tup/int_un/int_n: New in PicklingTools) Tj T* (1.2.0) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 539.8236 cm
Q
q
1 0 0 1 62.69291 539.8236 cm
Q
q
1 0 0 1 62.69291 374.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 150.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 150.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is an OTab?) Tj T* ET
Q
Q
q
1 0 0 1 23 120.2 cm
q
BT 1 0 0 1 0 14 Tm 2.913984 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (An OTab is like the Python OrderedDictionary: It's just like a dictionary, but it) Tj T* 0 Tw (preserves the insertion order.) Tj T* ET
Q
Q
q
1 0 0 1 23 78.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .813059 Tw (Starting with Python 2.7, the Python collections module supports the OrderedDict data structure. In) Tj T* 0 Tw 1.041318 Tw (terms of implementation, speed, and interface, it really is just a Dictionary. What distinguishes it is) Tj T* 0 Tw (that the iteration order preserves the order of insertion:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from collections import OrderedDict) Tj T* (>) Tj (>) Tj (>) Tj ( a = OrderedDict\([\('a',1, 'b',2\)]\)) Tj T* (                    # like {'a':1, 'b':2}, but order preserved) Tj T* (>) Tj (>) Tj (>) Tj ( for key in a :) Tj T* (...    print key     # iterates in order of insertion 'a', then 'b') Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 374.6236 cm
Q
q
1 0 0 1 62.69291 368.6236 cm
Q
q
1 0 0 1 62.69291 189.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 155.2 cm
q
BT 1 0 0 1 0 14 Tm .145251 Tw 12 TL /F1 10 Tf 0 0 0 rg (Note that the notion of order has nothing to with the sort order: it's the order things are ) Tj /F3 10 Tf (inserted) Tj /F1 10 Tf (. From) Tj T* 0 Tw (C++:) Tj T* ET
Q
Q
q
1 0 0 1 20 38 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F4 10 Tf 0 0 0 rg (OTab o = "OrderedDict\([\('a',1\)]\)";  // like Python syntax) Tj T* (n["key12"] = 17;) Tj T* (n["again"] = 18;) Tj T* (for \(It ii\(n\); ii\(\); \) {) Tj T* (   const Val) Tj (&) Tj ( key = ii.key\(\);) Tj T* (   Val) Tj (&) Tj ( value = ii.value\(\);) Tj T* (   cout ) Tj (<) Tj (<) Tj ( key ) Tj (<) Tj (<) Tj ( endl;        // Insertion order: a key12 again) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.73498 Tw (In general, the collections.OrderedDict behaves like the dict except for preserving insertion order.) Tj T* 0 Tw (Similarly, the OTab behaves like the Tab except for preserving insertion order.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 189.4236 cm
Q
q
1 0 0 1 62.69291 183.4236 cm
Q
q
1 0 0 1 62.69291 183.4236 cm
Q
q
1 0 0 1 62.69291 111.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL .671984 Tw (The syntax for OTab and collections.OrderedDict is clumsy. Is there a better way to enter an) Tj T* 0 Tw (OrderedDict literal?) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Yes and No.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.086235 Tw (Since we always want the PicklingTools C++ side to feel as much like Python as possible, the) Tj T* 0 Tw (PicklingTools must support the clumsy literal syntax:) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R87': class PDFStream 
87 0 obj
% page stream
<< /Length 5910 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 493.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 258.6 Tm  T* ET
q
1 0 0 1 23 231.4 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (// C++ OTab) Tj T* (OTab ot\("OrderedDict\([\('a',1\), \('b',2\)]\)"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 193.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.054724 Tw (By default, this is how they print as well: again, this is to stay compatible with Python as much as) Tj T* 0 Tw (possible:) Tj T* ET
Q
Q
q
1 0 0 1 23 148.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (// C++) Tj T* (cout ) Tj (<) Tj (<) Tj ( ot ) Tj (<) Tj (<) Tj ( endl;    // output: OrderedDict\(['a',1, 'b',2\)]\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 110.2 cm
q
BT 1 0 0 1 0 14 Tm .002765 Tw 12 TL /F1 10 Tf 0 0 0 rg (However, from the C++ side, we currently support a simpler syntax: simply add the single letter ) Tj /F3 10 Tf (o ) Tj /F1 10 Tf (to a) Tj T* 0 Tw (dictionary literal, and that makes it an OrderedDict:) Tj T* ET
Q
Q
q
1 0 0 1 23 65 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (OTab o\(" o{ 'a':1, 'b':2 }" \);  // like dict literal, but the) Tj T* (                                // o distinguishes it) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .720574 Tw (We are hopeful something like this makes it into Python. Right now, you can recompile and set the) Tj T* 0 Tw (OTabRepr to 2 in ocval.cc to use the short behavior.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .401098 Tw (Although we like the short form better, we have to stay true to out Python roots until Python decides) Tj T* 0 Tw (to create a better literal.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 487.4236 cm
Q
q
1 0 0 1 62.69291 415.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why would I want an OTab or an OrderedDict?) Tj T* ET
Q
Q
q
1 0 0 1 23 39 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (XML, C/C++ structs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .988876 Tw (If you deal with XML or C/C++ structs, then the order of the keys/elements matters. If you want to) Tj T* 0 Tw .975814 Tw (process those data structures, an OTab/OrderedDict can make dealing with those structures much) Tj T* 0 Tw (easier.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 409.4236 cm
Q
q
1 0 0 1 62.69291 207.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 187.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 187.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is a Tup?) Tj T* ET
Q
Q
q
1 0 0 1 23 169.4 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (A Tup is like a Python tuple) Tj T* ET
Q
Q
q
1 0 0 1 23 151.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (A Python tuple is useful for creating an immutable heterogeneous list:) Tj T* ET
Q
Q
q
1 0 0 1 23 106.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( t = \(1, 2.2, 'three', None, {}\) #  Python tuple) Tj T* (>) Tj (>) Tj (>) Tj ( print t[1]  # 2.2) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 80.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Similarly, a Tup is very much like a Python tuple, but used within C++:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (Tup t\(1, 2.2, "three", None, Tab\(\)\); // C++ tuple) Tj T* (cout ) Tj (<) Tj (<) Tj ( t[1];   # 2.2) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.392927 Tw (Like python tuples, you can't resize or grow tuples once you grown them. They really just are an) Tj T* 0 Tw ("easy" way to pass around a bunch of heterogeneous data, just like Python.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 201.0236 cm
Q
q
1 0 0 1 62.69291 99.82362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 86.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 86.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why is the first argument of the Tup constructor not working?) Tj T* ET
Q
Q
q
1 0 0 1 23 68.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (In other words, why isn't ) Tj /F3 10 Tf (t ) Tj /F1 10 Tf (below a tuple of three arguments?:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (Tup t\("\(1,2.2,'three'\)"\); /// NOT a TUPLE of three arguments???) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.483984 Tw (Tup is slightly different than Tab/Arr/OTab: In those data structures, the first argument is a string) Tj T* 0 Tw (argument that's MEANT to be Eval'ed:) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R88': class PDFStream 
88 0 obj
% page stream
<< /Length 5991 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 464.2236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 287.8 Tm  T* ET
q
1 0 0 1 23 248.6 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (Tab t = "{'a':1}";    // Like:  Val tv = Eval\("{'a':1}"\);) Tj T* (Arr a = "['a', 'b']"; // Like:  Val av = Eval\("['a', 'b']"\);) Tj T* (OTab o=  "o{'a':1}";  // Like:  Val ov = Eval\("o{'a':1}"\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 222.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The first \(and all\) arguments of a Tup are simply Vals that are taken as is:) Tj T* ET
Q
Q
q
1 0 0 1 23 165.4 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (Tup a\("17"\);  // Tup is a 1-element tuple with a single string: '17') Tj T* (Tup b\("{}"\);  // Tup is a 1-element tuple with a single string: '{}') Tj T* (Tup c\(1,2\);   // Tup is a 2-element tuple: int, int) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 139.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Understanding this, we revisit the example:) Tj T* ET
Q
Q
q
1 0 0 1 23 94.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (Tup t\("\(1,2.2,'three'\)"\); // 1-element tuple of single string:) Tj T* (                          //   '\(1,2.2,"three"\)') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 68.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This means t is a 1-element string. Probably what the user wanted was a 3-element tuple like:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (Tup tt\(1, 2.2, 'three'\);) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .668488 Tw (The point is that the Tup does NOT Eval any of its arguments like the Tab or OTab: it simply takes) Tj T* 0 Tw (them as-is.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 458.2236 cm
Q
q
1 0 0 1 62.69291 177.6688 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 265.5548 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 265.5548 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What are the int_n and int_un?) Tj T* ET
Q
Q
q
1 0 0 1 23 235.5548 cm
q
BT 1 0 0 1 0 14 Tm 1.926905 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (The int_n is equivalent to the Python arbitrary-sized integer \(sometime called the) Tj T* 0 Tw (long\). The int_un is just the unsigned version.) Tj T* ET
Q
Q
q
1 0 0 1 23 205.5548 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.26284 Tw (If you need to compute with larger integers than int_u8, then PicklingTools 1.2.0 now supports) Tj T* 0 Tw (arbitrary-sized integers. From Python:) Tj T* ET
Q
Q
q
1 0 0 1 23 136.3548 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( a = 700;                         // small enough to be normal int) Tj T* (>) Tj (>) Tj (>) Tj ( b = 700L;                        // force to Python long) Tj T* (>) Tj (>) Tj (>) Tj ( c = 1000000000000000000000000L;  // only fits in Python long) Tj T* (>) Tj (>) Tj (>) Tj ( google = 10**100) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 110.3548 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (From C++:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.964788 0 0 .964788 0 0 cm
q
1 0 0 1 6.6 6.840882 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 462 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F4 10 Tf 12 TL (// C++ int_un, int_n) Tj T* (int_4 a = 700;                       // small enough for normal int) Tj T* (int_n b = 700;                       // force to C++ arbitrary-sized int) Tj T* (int_n c = StringToBigInt\("1000000000000000000000000L"\);) Tj T* (          // We can't represent literals too large in C++, so we have) Tj T* (          // to turn larger ints into strings.) Tj T* (int_n d = "10000000000000000000000";   // NEW syntax in PicklingTools 1.4.1) Tj T* (int_n google = IntExp\(10, 100\);) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 171.6688 cm
Q
q
1 0 0 1 62.69291 117.6688 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What's the performance of the int_n?) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.377209 Tw (The int_n seems to be about as fast as the Python long. The main test of this assertion was) Tj T* 0 Tw 4.233828 Tw (computing large combinations \(n choose k\) in both C++ and Python: incidentally, there is) Tj T* 0 Tw (tremendous support for combinations in PicklingTools 1.2.0.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 111.6688 cm
Q
q
1 0 0 1 62.69291 99.66878 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why do I have to use StringToBigInt? It seems clumsy.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 87.66878 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 -1 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Short Answer: You don't if you update to PicklingTools 1.4.1.) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R89': class PDFStream 
89 0 obj
% page stream
<< /Length 6166 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 610.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 141.4 Tm  T* ET
q
1 0 0 1 23 139.4 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Yes, using ) Tj /F3 10 Tf (StringToBigInt ) Tj /F1 10 Tf (to make very integers is clumsy:) Tj T* ET
Q
Q
q
1 0 0 1 23 106.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (int_n c = StringToBigInt\("10000000000000000000000"\); // Pre 1.4.1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 80.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This interface still works, but as of PicklingTools 1.4.1, you can use strings directly:) Tj T* ET
Q
Q
q
1 0 0 1 23 23 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (int_n c1 = "100000000000000000000";  // In 1.4.1 and beyond) Tj T* (string s\("24736578924305243523475789234"\);) Tj T* (int_n c2 = s;) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This should make using int_un and int_n much easier to use.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 604.6236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 512.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (8.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 512.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Some of the interactions with plain ints and int_n/int_un don't work?) Tj T* ET
Q
Q
q
1 0 0 1 23 494.7575 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (In PicklingTools ) Tj /F3 10 Tf (before ) Tj /F1 10 Tf (1.4.1, this code compiles ...) Tj T* ET
Q
Q
q
1 0 0 1 23 449.5575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (int_un ii = StringToBigUInt\("1000000000000000000000000"\) + 1;) Tj T* (cout ) Tj (<) Tj (<) Tj ( ii ) Tj (<) Tj (<) Tj ( endl;) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 423.5575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (...but gives the wrong answer!) Tj T* ET
Q
Q
q
1 0 0 1 23 390.3575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (2003764205206896641   // Should be 1000000000000000000000001) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 340.3575 cm
q
BT 1 0 0 1 0 26 Tm 2.245366 Tw 12 TL /F1 10 Tf 0 0 0 rg (Why? Because when overloading ) Tj /F3 10 Tf (int_un ) Tj /F1 10 Tf (+ ) Tj /F3 10 Tf (int) Tj /F1 10 Tf (, the compiler chooses to downconvert \(using the) Tj T* 0 Tw 2.352339 Tw (operator ) Tj /F3 10 Tf (int_8 ) Tj /F1 10 Tf (of the ) Tj /F3 10 Tf (int_un ) Tj /F1 10 Tf (class\) rather than upgrade the ) Tj /F3 10 Tf (int ) Tj /F1 10 Tf (to a ) Tj /F3 10 Tf (int_un) Tj /F1 10 Tf (. In other words, the) Tj T* 0 Tw (downcast forces the addition to be ) Tj /F3 10 Tf (int ) Tj /F1 10 Tf (+ ) Tj /F3 10 Tf (int ) Tj /F1 10 Tf (which exceeds the size of a normal int.) Tj T* ET
Q
Q
q
1 0 0 1 23 310.3575 cm
q
BT 1 0 0 1 0 14 Tm 1.02248 Tw 12 TL /F1 10 Tf 0 0 0 rg (The interactions with overloadings and outcastings are complex: especially when native types \(like) Tj T* 0 Tw /F3 10 Tf (int) Tj /F1 10 Tf (\) are involved.) Tj T* ET
Q
Q
q
1 0 0 1 23 292.3575 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The way around this in early PicklingTools? Force the ) Tj /F3 10 Tf (int\(1\) ) Tj /F1 10 Tf (to a ) Tj /F3 10 Tf (int_un\(1\)) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 247.1575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (int_un ii = int_un\("1000000000000000000000000"\) + int_un\(1\);) Tj T* (cout ) Tj (<) Tj (<) Tj ( ii ) Tj (<) Tj (<) Tj ( endl;) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 221.1575 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (BUT ) Tj /F1 10 Tf (as of PicklingTools 1.4.1, ) Tj /F2 10 Tf (this is all fixed!) Tj T* ET
Q
Q
q
1 0 0 1 23 175.9575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (int_un ii = int_un\("1000000000000000000000000"\) + 1;) Tj T* (cout ) Tj (<) Tj (<) Tj ( ii ) Tj (<) Tj (<) Tj ( endl;) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 149.9575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This gives what's expected:) Tj T* ET
Q
Q
q
1 0 0 1 23 116.7575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (1000000000000000000000001) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 42.75748 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .721163 Tw (A few minor changes were made to make int_un/int_n work better with plain ints. One result is that) Tj T* 0 Tw .759461 Tw (we got rid of the need to use StringToBigInt \(see point above\), another is that we can use ints and) Tj T* 0 Tw .86811 Tw (big ints as expected. The only interface that changed \(yes, this should be a major release change,) Tj T* 0 Tw .000574 Tw (but considering that it was fundamentally flawed, this is excusable\) as that you cannot ask for ints out) Tj T* 0 Tw (of an int_n:) Tj T* ET
Q
Q
q
1 0 0 1 23 -26.44252 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (int_n in = "10000";) Tj T* (int_8 out = in;     // WORKS in ) Tj (<) Tj ( PicklingTools 1.4.0) Tj T* (                    // FAILS in PicklingTools 1.4.1 and above) Tj T*  T* ET
Q
Q
Q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R90': class PDFStream 
90 0 obj
% page stream
<< /Length 5812 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 475.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 276.6 Tm  T* ET
q
1 0 0 1 23 261.4 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 444 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F4 10 Tf 0 0 0 rg (int_8 out = in.as\(\); // How to get out in PicklingTools 1.4.1. and above) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 199.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 3.336651 Tw (Allowing the int_8 outcast simply allows too many ways for the overload engine to run into) Tj T* 0 Tw 1.330542 Tw (ambiguities: we prefer to make int_n work well with plain ints. In our tests, there were only a few) Tj T* 0 Tw 1.487988 Tw (places where we did, so we justify that this shouldn't be too big a code change. But it is a code) Tj T* 0 Tw (change. There is a macro you can put in your code:) Tj T* ET
Q
Q
q
1 0 0 1 23 118.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (#if defined\(OC_BIGINT_OUTCONVERT_AS\)) Tj T* (#  define AS\(x\) \(\(x\).as\(\)\)) Tj T* (#else) Tj T* (#  define AS\(x\) \(\(x\).operator int_8\(\)\)) Tj T* (#endif) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 92.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (With this macro, you can use the following code, and it will work with any version of PicklingTools:) Tj T* ET
Q
Q
q
1 0 0 1 23 47 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (int_n ii = "10000";) Tj T* (int_8 n = AS\(ii\);    // Works with all versions of PicklingTools) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .32881 Tw 12 TL /F1 10 Tf 0 0 0 rg (In C++11, there is support for ) Tj /F3 10 Tf (explicit ) Tj /F1 10 Tf (outcasts which would fix the problem, but currently, as most of) Tj T* 0 Tw .606654 Tw (our users are back in C++0x or earlier, we can't take this upgrade right now. This is very frustrating) Tj T* 0 Tw (and we are looking into cleaning this up.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 475.4236 cm
Q
q
1 0 0 1 62.69291 421.4236 cm
q
BT 1 0 0 1 0 24.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (C++ and the new PickleLoader: New in PicklingTools) Tj T* (1.2.0) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 409.4236 cm
Q
q
1 0 0 1 62.69291 409.4236 cm
Q
q
1 0 0 1 62.69291 196.2236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 198.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 198.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why is there a new implementation for loading Pickling Protocol 0 and 2?) Tj T* ET
Q
Q
q
1 0 0 1 23 180.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Speed, simplicity, maintainability, features.) Tj T* ET
Q
Q
q
1 0 0 1 23 126.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .29528 Tw (As of PicklingTools 1.2.0, there is a new implementation of the the loader for Pickling Protocol 0 and) Tj T* 0 Tw 1.479982 Tw (2. It's significantly faster than the previous versions, usually 2-10x faster. From the speed_test.cc) Tj T* 0 Tw 1.413059 Tw (metric: this shows version 1.2.0, where the new implementation appeared and version 1.3.1, with) Tj T* 0 Tw (minor speed improvements:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 120 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 98 Tm /F4 10 Tf 12 TL (# C++ is on par with Python with Unpickling 0) Tj T* (OLD IMPL: Unpickling 0: 36.66 seconds) Tj T* (NEW IMPL: Unpickling 0:  7.48 seconds  # 5 times faster! \(1.2.0\)) Tj T* (NEW IMPL: Unpickling 0:  7.20 seconds  #                  1.3.1) Tj T*  T* (# C++ implementation is 2x faster than previous implementation) Tj T* (OLD IMPL: Unpickling 2:  9.24 seconds) Tj T* (NEW IMPL: Unpickling 2:  6.24 seconds  # 1.5x faster   \(1.2.0\)) Tj T* (NEW IMPL: Unpickling 2:  4.34 seconds  # 2x   faster   \(1.3.1\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 196.2236 cm
Q
q
1 0 0 1 62.69291 190.2236 cm
Q
q
1 0 0 1 62.69291 112.2236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .229986 Tw (The core of the new loader supports BOTH protocols \(Pickling 0 and Pickling 2\) easily so there aren't) Tj T* 0 Tw 1.287251 Tw (two separate implementations: this makes maintenance significantly easier. Also, the older loaders) Tj T* 0 Tw 1.090697 Tw (DO NOT support all the new features of PicklingTools 1.2.0 \(OTab/Tup/int_un/int_n\) very well, if at) Tj T* 0 Tw (all. ONLY the new loader supports the new features.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .610651 Tw (In general, the new loader code is significantly simpler, and reflects much more closely what Python) Tj T* 0 Tw (does. It really is better on all axes. By default, all the MidasThingees use the new loader.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 112.2236 cm
Q
q
1 0 0 1 62.69291 106.2236 cm
Q
q
1 0 0 1 62.69291 106.2236 cm
Q
q
1 0 0 1 62.69291 94.22362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What if I really want to use the old loaders?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 94.22362 cm
Q
q
1 0 0 1 62.69291 88.22362 cm
Q
 
endstream
endobj
% 'R91': class PDFStream 
91 0 obj
% page stream
<< /Length 5637 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 592.0362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 136.9874 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .277674 Tw (You can. When you specify your serialization protocol \(to LoadValFromArray for example\), use either) Tj T* 0 Tw .250814 Tw (SERIALIZE_P0_OLDIMPL to get the old Protocol 0 depickler or SERIALIZE_P2_OLDIMPL to the the) Tj T* 0 Tw (old Protocol 2 depickler:) Tj T* ET
Q
Q
q
1 0 0 1 20 56 cm
q
q
.997096 0 0 .997096 0 0 cm
q
1 0 0 1 6.6 6.619222 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 450 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (// From C++:  Load using new loader for Pickling Protocol 2) Tj T* (LoadValFromArray\(result, buffer, SERIALIZE_P2\); // uses new better loader) Tj T*  T* (// Use older loader for Pickling Protocol 2) Tj T* (LoadValFromArray\(result, buffer, SERIALIZE_P2_OLDIMPL\); // old loader) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 30 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Caveat Emptor. The older loaders do not support the newer features found in PicklingTools 1.2.0.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .889461 Tw (The real reason we support the old loaders is just in case you really need to go back \(because the) Tj T* 0 Tw (new loader doesn't work\), you can.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 592.0362 cm
Q
q
1 0 0 1 62.69291 586.0362 cm
Q
q
1 0 0 1 62.69291 586.0362 cm
Q
q
1 0 0 1 62.69291 574.0362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why is there not a newer *saver* for Pickling Protocol 0 and 2?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 574.0362 cm
Q
q
1 0 0 1 62.69291 568.0362 cm
Q
q
1 0 0 1 62.69291 358.8362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 197.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (There is no major reason currently.) Tj T* ET
Q
Q
q
1 0 0 1 20 167.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .163318 Tw (Currently, we can dump data close to Python speeds \(these numbers are from the speed_test.py and) Tj T* 0 Tw (speed_test.cc where we serialize "about" the same dictionary in both\):) Tj T* ET
Q
Q
q
1 0 0 1 20 38 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 120 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 98 Tm /F4 10 Tf 12 TL (# Speedup so that C++ is on par with Python Pickling 0) Tj T* (Python Pickling 0:  Python  12.70 seconds  # pre 1.2.0) Tj T* (Python Pickling 0:  C++     14.56 seconds  # 1.2.0) Tj T* (Python Pickling 0:  C++     12.23 seconds  # 1.3.1) Tj T*  T* (# C++ 6x faster than Python Pickling!) Tj T* (Python Pickling 2: Python:   8.05 seconds  # pre 1.2.0) Tj T* (Python Pickling 2:  C++      1.36 seconds  # version 1.2.0) Tj T* (Python Pickling 2:  C++      1.30 seconds  # version 1.3.1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.024198 Tw (We are about as fast as Python for Pickling, so there's no real need to rewrite it. The picklers also) Tj T* 0 Tw (support all features of PicklingTools 1.2.0.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 358.8362 cm
Q
q
1 0 0 1 62.69291 352.8362 cm
Q
q
1 0 0 1 62.69291 352.8362 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 260.97 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 260.97 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How can I verify these speeds or other speeds of the PicklingTools?) Tj T* ET
Q
Q
q
1 0 0 1 23 230.97 cm
q
BT 1 0 0 1 0 14 Tm 1.84186 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Take a look at the speed_test.cc in the C++ directory of the PicklingTools or the) Tj T* 0 Tw (speed_test.py in the Python directory of the PicklingTools.) Tj T* ET
Q
Q
q
1 0 0 1 23 212.97 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Here are some recent results from PicklingTools 1.2.0:) Tj T* ET
Q
Q
q
1 0 0 1 23 -0.229955 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 204 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 182 Tm /F4 10 Tf 12 TL ( Current speeds in seconds: \(-O4 on 64-bit Fedora 13 machine\)) Tj T* (                          C++        Python) Tj T* (                          g++ 4.4.4   2.6   # Comments) Tj T* (                          -----------------------------) Tj T* (Pickle Text                5.64       5.12  # About equiv) Tj T* (Pickle Protocol 0         14.56      12.70  # Python slightly faster) Tj T* (Pickle Protocol 2          1.36       8.05  # C++ significantly faster) Tj T* (Pickle M2k                 3.03        N/A) Tj T* (Pickle OpenContainers      1.31        N/A  # OC is fastest overall) Tj T*  T* (UnPickle Text             32.55      38.23  # About equiv) Tj T* (UnPickle Protocol OLD 0   36.66       7.20  # Why OLD P0 is deprecated!) Tj T* (UnPickle Protocol NEW 0    7.48       7.20  # About equiv) Tj T* (UnPickle Protocol OLD 2    9.24       4.46  # Why OLD P2 is deprecated!) Tj T* (UnPickle Protocol NEW 2    6.24       4.46  # Python still faster) Tj T* (UnPickle M2k               9.00        N/A) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R92': class PDFStream 
92 0 obj
% page stream
<< /Length 5995 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 426.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 325.4 Tm  T* ET
q
1 0 0 1 23 310.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (UnPickle OpenContainers    4.12        N/A  # OC is fastest overall) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 284.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (More recent results from PicklingTools 1.3.1 \(Notice the speedups!\):) Tj T* ET
Q
Q
q
1 0 0 1 23 59 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 216 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 194 Tm /F4 10 Tf 12 TL ( Current speeds in seconds: \(-O4 on 64-bit Fedora 14 machine\)) Tj T* (                          C++        Python) Tj T* (                          g++ 4.5.1   2.7   # Comments) Tj T* (                          -----------------------------) Tj T* (Pickle Text                5.90       4.82  # Python slightly faster) Tj T* (Pickle Protocol 0         12.23      12.65  #) Tj T* (Pickle Protocol 2          1.30       3.41  # C++ significantly faster) Tj T* (Pickle M2k                 2.98        N/A  #) Tj T* (Pickle OpenContainers      1.25        N/A  # OC is fastest overall) Tj T*  T* (UnPickle Text             23.40      38.19  # C++ faster) Tj T* (UnPickle Protocol OLD 0   29.53       7.13  # Why OLD P0 is deprecated!) Tj T* (UnPickle Protocol NEW 0    7.24       7.13  #) Tj T* (UnPickle Protocol OLD 2    8.23       3.66  # Why OLD P2 is deprecated!) Tj T* (UnPickle Protocol NEW 2    4.34       3.66  # Python still faster) Tj T* (UnPickle M2k               9.72        N/A  #) Tj T* (UnPickle OpenContainers    2.41        N/A  # OC is fastest overall) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The speed of pickling2/unpickling2 in Python 2.7 = 3.41+3.66 = 7.07 secs) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The speed of pickling2/unpickling2 in Ptools 1.3.1 = 1.30+4.34 = 5.64 secs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The round trip time of the C++ impl is about 15-20% faster than Python 2.7.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 420.6236 cm
Q
q
1 0 0 1 62.69291 300.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 105 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL 2.826976 Tw (Why aren't the PicklingTools C++/Val pickling/unpickling routines always faster than the) Tj T* 0 Tw (Python version?) Tj T* ET
Q
Q
q
1 0 0 1 23 51 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .439269 Tw (Short Answer: The Python routines use the cPickle module \(used by speed_test.py\) which is written) Tj T* 0 Tw 5.09748 Tw (in C already. Thus the Python is comparable to the PicklingTools C++/Val PickleLoader) Tj T* 0 Tw (implementation.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 4.449982 Tw (Discussion: The speed_test.py uses cPickle, which is a Python module written in C. The) Tj T* 0 Tw 3.338314 Tw (speed_test.cc uses LoadValFromArray, which is written purely in C++. The tight-loops in the) Tj T* 0 Tw .97436 Tw (speed_test are all in the pickling modules are written in C/C++, so they are substantially the same) Tj T* 0 Tw (speed.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 294.6236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 202.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 190.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F2 10 Tf 12 TL 2.785697 Tw (Do you want to talk about why the Unpickling with C++/Val seems slightly slower than) Tj T* 0 Tw (cPickle/Python?) Tj T* ET
Q
Q
q
1 0 0 1 23 172.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Short Answer: Yes.) Tj T* ET
Q
Q
q
1 0 0 1 23 154.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Pickling/Unpickling is very much tied into the dynamic objects of the implementation.) Tj T* ET
Q
Q
q
1 0 0 1 23 52.75748 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL .10561 Tw (In Python, all PyObject objects are passed around by pointer, and moving them around is trivial. This) Tj T* 0 Tw .752651 Tw (fact is important for unpickling because the "values" stack \(for temporary storage\) can be small \(an) Tj T* 0 Tw .106303 Tw (array of pointers\): it's trivial to move things on and off of that stack \(by moving a pointer\). That simple) Tj T* 0 Tw .48436 Tw (notion contributes quite a bit to the speed of the Python unpickling. Also, the creation and allocation) Tj T* 0 Tw 1.185984 Tw (of Python objects has been very heavily optimized for a single threaded engine: For example: the) Tj T* 0 Tw 3.259269 Tw (PyList_New \(for both dict and list\) has a cached freelist that makes many allocations trivial.) Tj T* 0 Tw .376235 Tw (Internally, allocating lists and dicts and lists don't have to necessarily hit a generic "malloc", and that) Tj T* 0 Tw (can be a major speedup: especially since those dict/lists tend to get reused.) Tj T* ET
Q
Q
q
1 0 0 1 23 -1.24252 cm
q
BT 1 0 0 1 0 38 Tm 1.098651 Tw 12 TL /F1 10 Tf 0 0 0 rg (In C++, all Val objects are passed around by value. Using the move-semantics and/or swaps, we ) Tj T* 0 Tw 1.859398 Tw (can still move objects around in constant time, just not as fast a pointer move. This "by value" ) Tj T* 0 Tw 2.866647 Tw (characteristic unfortunately means the "values" stack \(for unpickling\) has a bigger footprint in ) Tj T* 0 Tw 1.025318 Tw (memory than a plain array of pointers: that extra memory makes the speed_test slower. Also, the) Tj T* 0 Tw ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R93': class PDFStream 
93 0 obj
% page stream
<< /Length 4991 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 585.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 167 Tm  T* ET
q
1 0 0 1 23 81 cm
q
BT 1 0 0 1 0 86 Tm 1.955697 Tw 12 TL /F1 10 Tf 0 0 0 rg (creation and allocation of objects \(Val, Tab, etc.\) ) Tj /F3 10 Tf (on purpose ) Tj /F1 10 Tf (relies on the generic "new/malloc") Tj T* 0 Tw 2.129069 Tw (machinery for allocating memory: this makes ) Tj /F3 10 Tf (some ) Tj /F1 10 Tf (object creation significantly more expensive.) Tj T* 0 Tw .24832 Tw (Thus the creation of some objects \(strings, dicts\) for unpickling is not as fast a Python. Note that this) Tj T* 0 Tw 1.113735 Tw (decision to use the generic memory allocation pool is on purpose for two major reasons. One, we) Tj T* 0 Tw .389431 Tw (can use valgrind directly to help us find memory leaks \(although Python can as well, it's not quite as) Tj T* 0 Tw .319984 Tw (easy\) Two, the data structures can be used generically by threads. We have considered adding "per) Tj T* 0 Tw 2.369983 Tw (data structure" allocators \(specialize allocation for Tab, Arr, etc.\), but this takes away from the) Tj T* 0 Tw (thread-neutrality of the OpenContainers data structures.) Tj T* ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 3.261318 Tw (The Python choices make some objects easier to move, create, allocate, but at the cost of) Tj T* 0 Tw .55998 Tw (disallowing concurrent threads. The C++ choices make some objects some objects more expensive) Tj T* 0 Tw (to move, create, allocate, but allow threads \(and valgrind\).) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.273555 Tw (Simply speaking, pickling and unpickling is tied directly to the object model: the limits/strengths of) Tj T* 0 Tw 1.14811 Tw (that object model affect the speed. Creation dynamic objects in C \(PyObject\) or C++ \(Val\) has an) Tj T* 0 Tw (inherent cost.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 585.0236 cm
Q
q
1 0 0 1 62.69291 552.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (XML Support: New in PicklingTools 1.3.0) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 540.0236 cm
Q
q
1 0 0 1 62.69291 540.0236 cm
Q
q
1 0 0 1 62.69291 147.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 377.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 377.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Do the PicklingTools support XML?) Tj T* ET
Q
Q
q
1 0 0 1 23 347.4 cm
q
BT 1 0 0 1 0 14 Tm 1.56686 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (If the XML is strictly a recursive key-value structure, yes. If the XML represents a) Tj T* 0 Tw (generic document, no.) Tj T* ET
Q
Q
q
1 0 0 1 23 317.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.661412 Tw (If the XML just represents recursive key-value entries, then there is a equivalent and obvious) Tj T* 0 Tw (mapping between Python dictionaries and XML. Consider:) Tj T* ET
Q
Q
q
1 0 0 1 23 176.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F4 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (  ) Tj (<) Tj (Futurama) Tj (>) Tj  T* (   ) Tj (<) Tj (name) Tj (>) Tj (Phillip) Tj (<) Tj (/name) Tj (>) Tj  T* (   ) Tj (<) Tj (age) Tj (>) Tj (1036) Tj (<) Tj (/age) Tj (>) Tj  T* (  ) Tj (<) Tj (/Futurama) Tj (>) Tj  T* (  ) Tj (<) Tj (Simpsons) Tj (>) Tj  T* (   ) Tj (<) Tj (name) Tj (>) Tj (Homer) Tj (<) Tj (/name) Tj (>) Tj  T* (   ) Tj (<) Tj (age) Tj (>) Tj (36) Tj (>) Tj (<) Tj (/age) Tj (>) Tj  T* (  ) Tj (<) Tj (/Simpsons) Tj (>) Tj  T* (<) Tj (top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 138.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .40332 Tw (There is nested structure, but all the tags are either simple keys or just containers for other keys, so) Tj T* 0 Tw (there is an obvious XML correspondence:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( top = {) Tj T* (...    'Futurama': {) Tj T* (...        'name': 'Phillip',) Tj T* (...        'age': 1036) Tj T* (...    },) Tj T* (...    'Simpsons': {) Tj T* (...        'name': 'Homer',) Tj T* (...        'age': 36) Tj T* (...    }) Tj T* (... }) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 147.6236 cm
Q
q
1 0 0 1 62.69291 141.6236 cm
Q
q
1 0 0 1 62.69291 117.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm 1.686905 Tw 12 TL /F1 10 Tf 0 0 0 rg (A ) Tj /F3 10 Tf (document ) Tj /F1 10 Tf (\(which the PicklingTools have real trouble supporting\) is something with content and) Tj T* 0 Tw (keys interspersed. For example:) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R94': class PDFStream 
94 0 obj
% page stream
<< /Length 5608 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 558.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 145.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (  ) Tj (<) Tj (text) Tj (>) Tj (It was the ) Tj (<) Tj (it) Tj (>) Tj (best) Tj (<) Tj (/it) Tj (>) Tj ( of times,) Tj T* (        it was the ) Tj (<) Tj (/it) Tj (>) Tj (worst) Tj (<) Tj (it) Tj (>) Tj (of times) Tj (<) Tj (/text) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 107.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.26186 Tw (In the example above, the text has content and tags interspersed together: what would be a good) Tj T* 0 Tw (equivalent Python dictionary?:) Tj T* ET
Q
Q
q
1 0 0 1 20 38 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( # SOME HACKS?  DOES NOT WORK THIS WAY!!!!!!!!!!) Tj T* (>) Tj (>) Tj (>) Tj ( top = { 'text': ['It was the', { 'it':'best' }, 'of times,'] }) Tj T* (...         #  or) Tj T* (>) Tj (>) Tj (>) Tj ( top = { 'text': o{0:'It was the', 'it':'best', 1:' of times,' } }) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .417765 Tw (There's not really a good correspondence, so we don't support it; In that case, the tools will throw an) Tj T* 0 Tw (exception or ignore the content, depending on what the context and/or user specification.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 558.6236 cm
Q
q
1 0 0 1 62.69291 552.6236 cm
Q
q
1 0 0 1 62.69291 552.6236 cm
Q
q
1 0 0 1 62.69291 540.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Do the PicklingTools XML tools handle lists?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 540.6236 cm
Q
q
1 0 0 1 62.69291 534.6236 cm
Q
q
1 0 0 1 62.69291 320.2236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 190.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.02311 Tw (Yes, there is support for lists \(but take a look at the PicklingTools XML Documentation, included in) Tj T* 0 Tw (this distro, for more details for corner cases\):) Tj T* ET
Q
Q
q
1 0 0 1 20 121.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (<) Tj (top) Tj (>) Tj  T* (  ) Tj (<) Tj (friend) Tj (>) Tj (Zoidberg) Tj (<) Tj (/friend) Tj (>) Tj  T* (  ) Tj (<) Tj (friend) Tj (>) Tj (Lrrr) Tj (<) Tj (/friend) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 95.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The equivalent Python dictionary would be:) Tj T* ET
Q
Q
q
1 0 0 1 20 38 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( top = {) Tj T* (...     'friend': [ 'Zoidberg', 'Lrrr' ]) Tj T* (... }) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .339269 Tw (Lists can be arbitrarily complex \(just like Python dictionaries\) containing primitive types, other lists, or) Tj T* 0 Tw (other dictionaries.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 320.2236 cm
Q
q
1 0 0 1 62.69291 314.2236 cm
Q
q
1 0 0 1 62.69291 314.2236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 222.3575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 222.3575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What about attributes in XML?) Tj T* ET
Q
Q
q
1 0 0 1 23 204.3575 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (As long as the XML is strictly recursive key-value, yes.) Tj T* ET
Q
Q
q
1 0 0 1 23 174.3575 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .713555 Tw (There are a few conventions \(depending on user options\), but attributes are supported. The default) Tj T* 0 Tw (is make a special dictionary called __attrs__:) Tj T* ET
Q
Q
q
1 0 0 1 23 81.15748 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (<) Tj (?xml version="1.0" encoding="UTF-8"?) Tj (>) Tj  T* (<) Tj (top) Tj (>) Tj  T* (     ) Tj (<) Tj (book title="A Tale of Two Cities" date="1859") Tj (>) Tj  T* (        ) Tj (<) Tj (chapter) Tj (>) Tj (text) Tj (<) Tj (/chapter) Tj (>) Tj  T* (     ) Tj (<) Tj (/book) Tj (>) Tj  T* (<) Tj (/top) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 55.15748 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The attributes get put in a special table:) Tj T* ET
Q
Q
q
1 0 0 1 23 -2.04252 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( {) Tj T* (...   'book':{) Tj T* (...      '__attrs__':{) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R95': class PDFStream 
95 0 obj
% page stream
<< /Length 7029 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 522.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 229.4 Tm  T* ET
q
1 0 0 1 23 166.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F4 10 Tf 0 0 0 rg (...         'date':1859,) Tj T* (...         'title':'A Tale of Two Cities') Tj T* (...   },) Tj T* (...   'chapter':'text') Tj T* (>) Tj (>) Tj (>) Tj ( }) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 128.2 cm
q
BT 1 0 0 1 0 14 Tm 1.61816 Tw 12 TL /F1 10 Tf 0 0 0 rg (If you use the ) Tj /F3 10 Tf (unfolding ) Tj /F1 10 Tf (feature \(XML_LOAD_UNFOLD_ATTRS\), then the attributes are unfolded) Tj T* 0 Tw (into the book table as keys that start with '_':) Tj T* ET
Q
Q
q
1 0 0 1 23 23 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( {) Tj T* (...   'book':{) Tj T* (...      '_date':1859,) Tj T* (...      '_title':'A Tale of Two Cities',) Tj T* (...      'chapter':'text') Tj T* (...    }) Tj T* (... }) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There is also an option to drop attributes all together.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 516.6236 cm
Q
q
1 0 0 1 62.69291 369.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 132.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 132.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Can I go back and forth between XML and Python Dictionaries?) Tj T* ET
Q
Q
q
1 0 0 1 23 114.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Yes.) Tj T* ET
Q
Q
q
1 0 0 1 23 60.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.727765 Tw (A lot of effort has gone into making the tools be able convert back and forth between XML and) Tj T* 0 Tw .914983 Tw (Python dictionaries, preserving all structure and information. There are a number of options for the) Tj T* 0 Tw .032209 Tw (tools which seem silly, but are there for allowing the user to fine-tune the transformations so as to not) Tj T* 0 Tw (lose information \(if possible\). Again, this assumes a recursive key-value structure only.) Tj T* ET
Q
Q
q
1 0 0 1 23 42.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The transformations are completely invertible \(depending on how the options are tweaked\):) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (XML_to_dict\(dict_to_XML\(something\)\)-) Tj (>) Tj ( something) Tj T* (dict_to_XML\(XML_to_dict\(something\)\)-) Tj (>) Tj ( something) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 369.4236 cm
Q
q
1 0 0 1 62.69291 363.4236 cm
Q
q
1 0 0 1 62.69291 363.4236 cm
Q
q
1 0 0 1 62.69291 351.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Where can I find further information on the PicklingTools XML tools?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 351.4236 cm
Q
q
1 0 0 1 62.69291 345.4236 cm
Q
q
1 0 0 1 62.69291 309.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .01784 Tw (There is relatively comprehensive document \(about 20 pages\) full of examples and descriptions of the) Tj T* 0 Tw .79881 Tw (tools: this document is included in the docs area of the PicklingTools distribution. The docs are in 3) Tj T* 0 Tw (formats: text document, PDF document, and HTML version describing the how the XML tools work.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 309.4236 cm
Q
q
1 0 0 1 62.69291 303.4236 cm
Q
q
1 0 0 1 62.69291 303.4236 cm
Q
q
1 0 0 1 62.69291 291.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What advanced features of XML does the PicklingTools support?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 291.4236 cm
Q
q
1 0 0 1 62.69291 285.4236 cm
Q
q
1 0 0 1 62.69291 213.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 48 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.224692 Tw (There is no current support or planned support for DTDs \(the world seems to have turned to XML) Tj T* 0 Tw (schemas anyway, which are written in XML\). As of 1.3.1, we read but completely ignore DTD.) Tj T* ET
Q
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .732339 Tw (There is currently no namespace support, although we intend to support it in a future release. As of) Tj T* 0 Tw (1.3.1, we recognize namespaces \(and the :\) but don't do much with them.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There is currently only support for UTF-8.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 213.4236 cm
Q
q
1 0 0 1 62.69291 207.4236 cm
Q
q
1 0 0 1 62.69291 207.4236 cm
Q
q
1 0 0 1 62.69291 195.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why are there two different versions of the XML tools for Python?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 195.4236 cm
Q
q
1 0 0 1 62.69291 189.4236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 96 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Short Answer: speed.) Tj T* ET
Q
Q
q
1 0 0 1 20 42 cm
q
BT 1 0 0 1 0 38 Tm .342339 Tw 12 TL /F1 10 Tf 0 0 0 rg (The original version of the XML tools \(in xmltools.py\) was written in pure Python: it used ) Tj /F3 10 Tf (pure Python) Tj T* 0 Tw 4.784431 Tw /F1 10 Tf (to parse and do I/O. It's easy to get going and try out the raw Python \(as simple as) Tj T* 0 Tw .12186 Tw /F4 10 Tf (import) Tj ( ) Tj (xmltools) Tj /F1 10 Tf (\), but those routines tended to be slow. For smaller XML tables, this was fine, but) Tj T* 0 Tw (larger XML tables really felt the slowness.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.302485 Tw (As of PicklingTools 1.4.1, there is a C Extension module \(in cxmltools.py\) which does all the XML) Tj T* 0 Tw 1.256457 Tw (to/from dict conversion from C++ which increases the speed of the dict to XML by 6x-10x and the) Tj T* 0 Tw (speed of XML to dict by 60x-100x.) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R96': class PDFStream 
96 0 obj
% page stream
<< /Length 6943 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.36936 Tw (The Python C Extension module is more difficult to build and use, but significantly faster. See the) Tj T* 0 Tw (README in the PythonCExt directory or the XMLtools document \(mentioned in item 3 above\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 741.0236 cm
Q
q
1 0 0 1 62.69291 708.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (C++ and JSON: New in PicklingTools 1.3.2) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 696.0236 cm
Q
q
1 0 0 1 62.69291 696.0236 cm
Q
q
1 0 0 1 62.69291 684.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is JSON?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 684.0236 cm
Q
q
1 0 0 1 62.69291 678.0236 cm
Q
q
1 0 0 1 62.69291 602.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 51.2 cm
q
BT 1 0 0 1 0 14 Tm .310814 Tw 12 TL /F1 10 Tf 0 0 0 rg (JSON stands for "JavaScript Object Notation": it comes from the JavaScript Programming Language.) Tj T* 0 Tw (See ) Tj 0 0 .501961 rg (http://www.json.org) Tj T* ET
Q
Q
q
1 0 0 1 20 33.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (JSON is, with a very few differences, just plain textual dictionaries:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL ({ "a": True, "b":11, "c":3.1 }) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 602.8236 cm
Q
q
1 0 0 1 62.69291 596.8236 cm
Q
q
1 0 0 1 62.69291 596.8236 cm
Q
q
1 0 0 1 62.69291 584.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What are the differences between JSON and Python Dictionaries?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 584.8236 cm
Q
q
1 0 0 1 62.69291 578.8236 cm
Q
q
1 0 0 1 62.69291 485.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 57.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.319269 Tw (JSON uses 'true', 'false' and 'null' for 'True', 'False', and 'None' \(respectively\). Strings are unicode,) Tj T* 0 Tw .421318 Tw (and quotes around strings are ONLY double-quotes \(no single quotes\). Other than that, they are just) Tj T* 0 Tw (like Python Dictionaries:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL ({ 'a':1, 'b':True, "c":None}   # Python Dictionary) Tj T*  T* ({ "a":1, "b":true, "c":null}   # Equivalent JSON) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 485.6236 cm
Q
q
1 0 0 1 62.69291 479.6236 cm
Q
q
1 0 0 1 62.69291 479.6236 cm
Q
q
1 0 0 1 62.69291 467.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What kind of support does PicklingTools offer for JSON?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 467.6236 cm
Q
q
1 0 0 1 62.69291 461.6236 cm
Q
q
1 0 0 1 62.69291 222.4833 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 203.1403 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.018651 Tw (From Python, there are already many tools available \(already built-in\), so there is no reason for) Tj T* 0 Tw 1.221412 Tw (PicklingTools to extra work to support JSON. From Python, the 'json' module \('import json'\) should) Tj T* 0 Tw (have all you need.) Tj T* ET
Q
Q
q
1 0 0 1 20 185.1403 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (From raw C++, there is a new reader that turns JSON files/text into Tab/Arr/Vals:) Tj T* ET
Q
Q
q
1 0 0 1 20 103.9403 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (#include "jsonreader.h") Tj T* (Val json;) Tj T* (ReadValFromJSONFile\("filename.txt", json\)) Tj T* (// json now contains a Tab which represents) Tj T* (//   the JSON structure) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 65.94035 cm
q
BT 1 0 0 1 0 14 Tm .01332 Tw 12 TL /F1 10 Tf 0 0 0 rg (You can take any Tab/Arr and turn it into a JSON text file or textual representation with the ) Tj /F3 10 Tf (JSONPrint) Tj T* 0 Tw /F1 10 Tf (routine:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
.946738 0 0 .946738 0 0 cm
q
1 0 0 1 6.6 6.971308 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F4 10 Tf 12 TL (#include "jsonprint.h") Tj T* (Val v = Tab\("{ 'a':1, 'b':2.2, 'c':'three' }"\); // Manipulate like plain Tabs) Tj T*  T* (JSONPrint\(std::cout, v\);  // ... but print out as JSON) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 222.4833 cm
Q
q
1 0 0 1 62.69291 216.4833 cm
Q
q
1 0 0 1 62.69291 216.4833 cm
Q
q
1 0 0 1 62.69291 204.4833 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Do the MidasTalkers, etc. support JSON?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 204.4833 cm
Q
q
1 0 0 1 62.69291 198.4833 cm
Q
q
1 0 0 1 62.69291 174.4833 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .11936 Tw (Not right now. We are evaluating whether it makes sense. Most people just use the tools orthogonally) Tj T* 0 Tw (to the MidasTalker/MidasServers.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 174.4833 cm
Q
q
1 0 0 1 62.69291 120.4833 cm
q
BT 1 0 0 1 0 24.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Conformance or Validation Support: New in) Tj T* (PicklingTools 1.3.3) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 108.4833 cm
Q
q
1 0 0 1 62.69291 108.4833 cm
Q
q
1 0 0 1 62.69291 96.48327 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Do the PicklingTools support something like an XML schema for Python dicts?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 96.48327 cm
Q
q
1 0 0 1 62.69291 90.48327 cm
Q
 
endstream
endobj
% 'R97': class PDFStream 
97 0 obj
% page stream
<< /Length 6343 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 687.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 42 cm
q
BT 1 0 0 1 0 26 Tm 1.488555 Tw 12 TL /F1 10 Tf 0 0 0 rg (Yes. There is a new routine in the C++ opencontainers library called ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (which implements) Tj T* 0 Tw 1.32784 Tw (something like XML schema checking for Python dicts. There is also a standalone Python module) Tj T* 0 Tw (\(called ) Tj /F3 10 Tf (conforms.py) Tj /F1 10 Tf (\) in the Python area which behaves almost exactly like the C++ version.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 26 Tm 2.240651 Tw 12 TL /F1 10 Tf 0 0 0 rg (A key customer has asked for something like an XML schema for Python dictionaries. An XML) Tj T* 0 Tw .32832 Tw (schema allows a user to "validate" an XML document against a template to see if the structure of the) Tj T* 0 Tw (document matches the schema. ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (allows a similar type of operation.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 687.0236 cm
Q
q
1 0 0 1 62.69291 681.0236 cm
Q
q
1 0 0 1 62.69291 681.0236 cm
Q
q
1 0 0 1 62.69291 669.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How does Conforms work?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 669.0236 cm
Q
q
1 0 0 1 62.69291 663.0236 cm
Q
q
1 0 0 1 62.69291 519.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 119.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.579984 Tw (The user provides a message to be "validated" and a prototype which demonstrates what a valid) Tj T* 0 Tw (message looks like.) Tj T* ET
Q
Q
q
1 0 0 1 20 26 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL (// C++) Tj T* (if \(Conforms\(message, prototype\)\) {) Tj T* (    // message is valid) Tj T* (} else {) Tj T* (    // message is malformed) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Python is similar.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 519.8236 cm
Q
q
1 0 0 1 62.69291 513.8236 cm
Q
q
1 0 0 1 62.69291 513.8236 cm
Q
q
1 0 0 1 62.69291 501.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What structure do messages to Conforms look like?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 501.8236 cm
Q
q
1 0 0 1 62.69291 495.8236 cm
Q
q
1 0 0 1 62.69291 215.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 268.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Typically Python dicts or lists, but any valid type will work. For example, in C++:) Tj T* ET
Q
Q
q
1 0 0 1 20 187.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (#include "occonforms.h") Tj T*  T* (Val instance = Tab\("{ 'host': 'ai1', 'port': 8888 }"\);) Tj T* (Val prototype= Tab\("{ 'host': '',    'port': 0    }"\);) Tj T* (if \(Conforms\(instance, prototype\)\) { ... }) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 149.2 cm
q
BT 1 0 0 1 0 14 Tm .475542 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (Conforms ) Tj /F1 10 Tf (routine sees if the structure and keys of the instance match the keys and types of the) Tj T* 0 Tw (prototype. If they do \(as they do in this case\), the instance is considered conformant.) Tj T* ET
Q
Q
q
1 0 0 1 20 131.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The equivalent Python would be:) Tj T* ET
Q
Q
q
1 0 0 1 20 38 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( from conforms import *) Tj T* (>) Tj (>) Tj (>) Tj  T* (>) Tj (>) Tj (>) Tj ( instance = { 'host': 'ai1', 'port': 8888 }) Tj T* (>) Tj (>) Tj (>) Tj ( prototype= { 'host': '',    'port': 0    }) Tj T* (>) Tj (>) Tj (>) Tj ( if conforms\(instance, prototype\) :   # conformance check) Tj T* (...    pass) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .460651 Tw (The Python version is more lenient of types under a LOOSE_MATCH than the C++ version because) Tj T* 0 Tw (Python has a plethora of types.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 215.4236 cm
Q
q
1 0 0 1 62.69291 209.4236 cm
Q
q
1 0 0 1 62.69291 209.4236 cm
Q
q
1 0 0 1 62.69291 197.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Where can I find more information about conforms?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 197.4236 cm
Q
q
1 0 0 1 62.69291 191.4236 cm
Q
q
1 0 0 1 62.69291 92.22362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 63.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .111318 Tw (The PicklingTools 1.3.3 User's Guide has a dedicated section discussing all the gory options in detail.) Tj T* 0 Tw 3.439213 Tw (It mostly discusses the C++ version, but Python usage is almost identical \(modulo language) Tj T* 0 Tw (differences between C++ and Python\).) Tj T* ET
Q
Q
q
1 0 0 1 20 45.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The help page for the Python ) Tj /F3 10 Tf (conforms ) Tj /F1 10 Tf (is also quite informative:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (>) Tj (>) Tj (>) Tj ( import conforms) Tj T* (>) Tj (>) Tj (>) Tj ( help\(conforms\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 92.22362 cm
Q
 
endstream
endobj
% 'R98': class PDFStream 
98 0 obj
% page stream
<< /Length 7040 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Java Support: New as of PicklingTools 1.5.1) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 732.0236 cm
Q
q
1 0 0 1 62.69291 732.0236 cm
Q
q
1 0 0 1 62.69291 665.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 52 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 52 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Is there Java support in PicklingTools?) Tj T* ET
Q
Q
q
1 0 0 1 23 36 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Yes. As of PicklingTools 1.5.1. The goals are two-fold:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (a.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Allow Java to talk to C++ and Python easily) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (b.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Make Python dictionaries easy to manipulate in Java) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 659.0236 cm
Q
q
1 0 0 1 62.69291 647.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What documentation and examples are there?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 647.0236 cm
Q
q
1 0 0 1 62.69291 641.0236 cm
Q
q
1 0 0 1 62.69291 611.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Java subdirectory contains the needed code: anything that ends with "_ex*.java" is an example.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There is a full-fledged Java document in the Docs area \(and on the Web site\) for Java.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 611.0236 cm
Q
q
1 0 0 1 62.69291 557.0236 cm
q
BT 1 0 0 1 0 24.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Python C Extension Modules: New as of PicklingTools) Tj T* (1.6.0 \(and 1.3.3\)) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 545.0236 cm
Q
q
1 0 0 1 62.69291 545.0236 cm
Q
q
1 0 0 1 62.69291 485.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What are Python C Extension Modules?) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.703735 Tw (Python C Extension are just new Python libraries. They call be called from Python, but they are) Tj T* 0 Tw (written in C and "linked in" to Python.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Python C Extension Modules are written in C usually because they need the extra speed of C.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 479.0236 cm
Q
q
1 0 0 1 62.69291 245.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 218.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 218.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What are the Python C Extension Modules?) Tj T* ET
Q
Q
q
1 0 0 1 23 200.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are currently two as of PicklingTools 1.6.0.) Tj T* ET
Q
Q
q
1 0 0 1 23 134.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .181751 Tw (The first is the pyocconvert module. It's purpose is to be able to convert between Python objects and) Tj T* 0 Tw .361751 Tw (C++ Val objects so that we can use the very fast XML/Dict conversion modules written in C++. Most) Tj T* 0 Tw 4.440751 Tw (people won't use this module directly, but use the "cxmltools" module \(which imports the) Tj T* 0 Tw .122651 Tw ("pyocconvert" module and wraps it nicely\). There is currently a full document describing this: See the) Tj T* 0 Tw (XML documentation for more information about the XML/dict conversion tools.) Tj T* ET
Q
Q
q
1 0 0 1 23 104.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .681098 Tw (The second is the pyocser module. It is a very simple module with only two functions, and they are) Tj T* 0 Tw (inverse of each other:) Tj T* ET
Q
Q
q
1 0 0 1 23 59 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (ser = ocdumps\(pyobject\)   : Serialize pyobject into string ser) Tj T* (pyobject = ocloads\(ser\)   : Deserialize from string ser into pyobject) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm 1.274983 Tw 12 TL /F1 10 Tf 0 0 0 rg (The pyocser module allows the use of OC serialization \(instead of pickling from the pickle/cPickle) Tj T* 0 Tw .594651 Tw (modules\). Currently, OC Serialization tends to be 1.5-2x faster than Python pickling, and is the ) Tj /F3 10 Tf (only) Tj T* 0 Tw .073735 Tw /F1 10 Tf (way to serialize very large \(over 4G\) strings and numpy arrays \(as Python pickling \(until Python 3.5?\)) Tj T* 0 Tw (doesn't work for strings or numpy arrays over 4Gig\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 239.8236 cm
Q
q
1 0 0 1 62.69291 104.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 120.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 120.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How do you build the Python C Extension modules?) Tj T* ET
Q
Q
q
1 0 0 1 23 102.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (It depends.) Tj T* ET
Q
Q
q
1 0 0 1 23 72.2 cm
q
BT 1 0 0 1 0 14 Tm 2.22436 Tw 12 TL /F1 10 Tf 0 0 0 rg (If you are using the PTOOLS X-Midas option tree, it gets built for you automatically when you) Tj T* 0 Tw /F4 10 Tf (xmbopt) Tj ( ) Tj (ptools) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 23 42.2 cm
q
BT 1 0 0 1 0 14 Tm .494985 Tw 12 TL /F1 10 Tf 0 0 0 rg (If you are just building straight out of the PicklingTools basline, change to the ) Tj /F4 10 Tf (PythonCExt ) Tj /F1 10 Tf (dir and) Tj T* 0 Tw (type 'python setup.py build'. E.g.:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (% cd PicklingTools170Release/PythonCExt) Tj T* (% python setup.py build) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R99': class PDFStream 
99 0 obj
% page stream
<< /Length 11005 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 691.965 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 60.05866 Tm  T* ET
q
1 0 0 1 23 34.05866 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .52683 Tw (Make sure the python you want to use is the python you build with. The C extension module is only) Tj T* 0 Tw .622927 Tw (compatible with the very of Python it was built with. When you build, you should see something like) Tj T* 0 Tw (this \(and it might be a little slow\):) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
.150407 0 0 .150407 0 0 cm
q
1 0 0 1 6.6 43.88089 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 2970 192 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 170 Tm /F4 10 Tf 12 TL (running build) Tj T* (running build_ext) Tj T* (building 'pyobjconvertmodule' extension) Tj T* (creating build) Tj T* (creating build/temp.linux-x86_64-2.6) Tj T* (gcc -pthread -fno-strict-aliasing -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -I../C++ -I../C++/opencontainers_1_8_1/include -I/usr/include/python2.6 -c pyobjconvertmodule.cc -o build/temp.linux-x86_64-2.6/pyobjconvertmodule.o) Tj T* (gcc -pthread -fno-strict-aliasing -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -I../C++ -I../C++/opencontainers_1_8_1/include -I/usr/include/python2.6 -c pyobjconverter.cc -o build/temp.linux-x86_64-2.6/pyobjconverter.o) Tj T* (creating build/lib.linux-x86_64-2.6) Tj T* (g++ -pthread -shared build/temp.linux-x86_64-2.6/pyobjconvertmodule.o build/temp.linux-x86_64-2.6/pyobjconverter.o -L/usr/lib64 -lpython2.6 -o build/lib.linux-x86_64-2.6/pyobjconvertmodule.so) Tj T* (running build) Tj T* (running build_ext) Tj T* (building 'pyocsermodule' extension) Tj T* (gcc -pthread -fno-strict-aliasing -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -I../C++ -I../C++/opencontainers_1_8_1/include -I/usr/include/python2.6 -c pyocsermodule.cc -o build/temp.linux-x86_64-2.6/pyocsermodule.o) Tj T* (gcc -pthread -fno-strict-aliasing -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -I../C++ -I../C++/opencontainers_1_8_1/include -I/usr/include/python2.6 -c pyocser.cc -o build/temp.linux-x86_64-2.6/pyocser.o) Tj T* (g++ -pthread -shared build/temp.linux-x86_64-2.6/pyocsermodule.o build/temp.linux-x86_64-2.6/pyocser.o -L/usr/lib64 -lpython2.6 -o build/lib.linux-x86_64-2.6/pyocsermodule.so) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 691.965 cm
Q
q
1 0 0 1 62.69291 685.965 cm
Q
q
1 0 0 1 62.69291 661.965 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm .081647 Tw 12 TL /F1 10 Tf 0 0 0 rg (There should be a ) Tj /F4 10 Tf (build ) Tj /F1 10 Tf (directory. Under there should be something like ) Tj /F4 10 Tf (lib.linuxx86_64-2.6) Tj T* 0 Tw /F1 10 Tf (with two files: ) Tj /F4 10 Tf (pyosermodule.so ) Tj /F1 10 Tf (and ) Tj /F4 10 Tf (pyobjconverrmodule.so) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 661.965 cm
Q
q
1 0 0 1 62.69291 655.965 cm
Q
q
1 0 0 1 62.69291 655.965 cm
Q
q
1 0 0 1 62.69291 643.965 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How I can't import pyocser or pyocconvert from Python?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 643.965 cm
Q
q
1 0 0 1 62.69291 637.965 cm
Q
q
1 0 0 1 62.69291 421.238 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 204.7269 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Short Answer: You need to set-up your PYTHONPATH) Tj T* ET
Q
Q
q
1 0 0 1 20 162.7269 cm
q
BT 1 0 0 1 0 26 Tm .101567 Tw 12 TL /F1 10 Tf 0 0 0 rg (If you try to ) Tj /F4 10 Tf (import) Tj ( ) Tj (pyocser ) Tj /F1 10 Tf (and it fails, that probably means you to add the build directory to your) Tj T* 0 Tw .045542 Tw (PYTHONPATH. In order for the import of this foreign C module to work, you have to tell python where) Tj T* 0 Tw (to look. That's what the PYTHONPATH is for:) Tj T* ET
Q
Q
q
1 0 0 1 20 104 cm
q
q
.692991 0 0 .692991 0 0 cm
q
1 0 0 1 6.6 9.523933 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 648 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (# If your PYTHONPATH is empty) Tj T* (% setenv PYTHONPATH "/path/to/PicklingTools160Release/PythonCExt/build/lib.linux-x86_64-2.6") Tj T*  T* (# If you already have a PYTHONPATH) Tj T* (% setenv PYTHONPATH "${PYTHONPATH}:/path/to/PicklingTools160Release/PythonCExt/build/lib.linux-x86_64-2.6") Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 54 cm
q
BT 1 0 0 1 0 26 Tm .538221 Tw 12 TL /F1 10 Tf 0 0 0 rg (Once your PYTHONPATH is set, you should be able to import correctly. You need to make sure the) Tj T* 0 Tw 2.901976 Tw (files ) Tj /F4 10 Tf (pyocsermodule.so ) Tj /F1 10 Tf (and ) Tj /F4 10 Tf (pyocconvertmodule.so ) Tj /F1 10 Tf (are both files in one the directories) Tj T* 0 Tw (specified by the PYTHONPATH.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 38 Tm .507356 Tw 12 TL /F1 10 Tf 0 0 0 rg (Note that the name of the path will be different depending on the system you are on: In the example) Tj T* 0 Tw 2.039398 Tw (above, we were on a 64-bit Intel linux box using Python 2.6, this the final path component was) Tj T* 0 Tw 6.69248 Tw /F4 10 Tf (lib.linux-x86_64-2.6) Tj /F1 10 Tf (. On a 32-bit Intel linux box using Python 2.4, it would be) Tj T* 0 Tw /F4 10 Tf (lib.linux-i686-2.4) Tj /F1 10 Tf (. Adjust the PYTHONPATH setting for your system.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 421.238 cm
Q
q
1 0 0 1 62.69291 415.238 cm
Q
q
1 0 0 1 62.69291 415.238 cm
Q
q
1 0 0 1 62.69291 403.238 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How come it imports but fails?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 403.238 cm
Q
q
1 0 0 1 62.69291 397.238 cm
Q
q
1 0 0 1 62.69291 361.238 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 26 Tm 1.534651 Tw 12 TL /F1 10 Tf 0 0 0 rg (The Python C Extension modules have to built for ) Tj /F3 10 Tf (each ) Tj /F1 10 Tf (different platform and different platform it) Tj T* 0 Tw 1.441235 Tw (uses. So, if you have multiple Pythons on the same system, or multiple systems, make sure your) Tj T* 0 Tw (PYTHONPATH points to the proper version of linux/Python.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 361.238 cm
Q
q
1 0 0 1 62.69291 355.238 cm
Q
q
1 0 0 1 62.69291 355.238 cm
Q
q
1 0 0 1 62.69291 343.238 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why is the purpose of the pyoceser module? Doesn't pickle do that?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 343.238 cm
Q
q
1 0 0 1 62.69291 337.238 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 210 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .57186 Tw (The pyocser module does indeed offer similar functionality of the pickle module: it allows you to turn) Tj T* 0 Tw 1.093516 Tw (arbitrary Python objects into strings for putting to a file or socket, which you can them recover and) Tj T* 0 Tw .959147 Tw (turn back into Python objects. The pyocser module implements something called "OC Serialization") Tj T* 0 Tw (and the pickle module implements "pickling" \(which is the default Python serialization\).) Tj T* ET
Q
Q
q
1 0 0 1 20 192 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are two main reasons for the pyocser module:) Tj T* ET
Q
Q
q
1 0 0 1 20 186 cm
Q
q
1 0 0 1 20 66 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 114 cm
Q
q
1 0 0 1 20 114 cm
Q
q
1 0 0 1 20 60 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Speed.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 5.107251 Tw (In some tests, the serialization/deserialization can be 1.5-2.0x faster. There is a) Tj T* 0 Tw 3.011647 Tw (speed_test.py in the Python directory where you can compare the speed of different) Tj T* 0 Tw (serializations.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 54 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Works with very large data.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .298651 Tw (As of this writing, Python 2.4-2.7 cannot handle strings or numpy arrays greater than 4 Gig.) Tj T* 0 Tw 1.650651 Tw (Python 3.5 is about to add/already has support for very large data, but this hasn't been) Tj T* 0 Tw (back-ported, and it's unclear if it will. \(Hopefully?\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 36 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.805697 Tw (The OC Serialization originally came from C++ \(OC stands for OpenContainers\) and tends to be) Tj T* 0 Tw (faster than Pickling. See the speed numbers from the "new unpickler" previously.) Tj T* ET
Q
Q
q
1 0 0 1 20 18 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Currently, OC serialization has some limitations:) Tj T* ET
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R100': class PDFStream 
100 0 obj
% page stream
<< /Length 7806 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 647.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 42 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 42.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (a.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 42.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (It only can serialize base Python types and a few others:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 393.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (int, long, float, complex, bool, dict, list, string, None) Tj T* (OrderedDict, Numpy Arrays, Numeric Arrays) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (b.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (It uses the endian of the machine it's on.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 20 42 cm
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .84936 Tw (Because OC serialization has to work with both C++ and Python, the first limitation allows C++ and) Tj T* 0 Tw 1.407126 Tw (Python to still work together; Passing class instances is very difficult between two languages, and) Tj T* 0 Tw (many times, a dict will suffice.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 647.8236 cm
Q
q
1 0 0 1 62.69291 614.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (cx_t) Tj (<) Tj (INT) Tj (>) Tj (: New as of PicklingTools 1.6.0) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 602.8236 cm
Q
q
1 0 0 1 62.69291 602.8236 cm
Q
q
1 0 0 1 62.69291 473.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 114.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 114.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (What are the complex ints types? What is cx_t) Tj (<) Tj (INT) Tj (>) Tj (?) Tj T* ET
Q
Q
q
1 0 0 1 23 96.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Short Answer: complex types for all integers.) Tj T* ET
Q
Q
q
1 0 0 1 23 66.2 cm
q
BT 1 0 0 1 0 14 Tm 3.935366 Tw 12 TL /F1 10 Tf 0 0 0 rg (As of PicklingTools 1.6.0, the Val supports all different types of complex integers \(besides) Tj T* 0 Tw /F4 10 Tf (complex_8 ) Tj /F1 10 Tf (and ) Tj /F4 10 Tf (complex_16) Tj /F1 10 Tf (\). These are:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg (cx_t) Tj (<) Tj (int_1) Tj (>) Tj (, cx_t) Tj (<) Tj (int_u1) Tj (>) Tj ( :  Val tags 'c' 'C') Tj T* (cx_t) Tj (<) Tj (int_2) Tj (>) Tj (, cx_t) Tj (<) Tj (int_u2) Tj (>) Tj ( :  Val tags 'e' 'E') Tj T* (cx_t) Tj (<) Tj (int_4) Tj (>) Tj (, cx_t) Tj (<) Tj (int_u4) Tj (>) Tj ( :  Val tags 'g' 'G') Tj T* (cx_t) Tj (<) Tj (int_8) Tj (>) Tj (, cx_t) Tj (<) Tj (int_u8) Tj (>) Tj ( :  Val tags 'h' 'H') Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 473.6236 cm
Q
q
1 0 0 1 62.69291 467.6236 cm
Q
q
1 0 0 1 62.69291 455.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (All support for ) Tj /F4 10 Tf (complex_8 ) Tj /F1 10 Tf (and ) Tj /F4 10 Tf (complex_16 ) Tj /F1 10 Tf (remains the same.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 455.6236 cm
Q
q
1 0 0 1 62.69291 449.6236 cm
Q
q
1 0 0 1 62.69291 449.6236 cm
Q
q
1 0 0 1 62.69291 437.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why do I need complex integers? A lot of operations don't make sense) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 437.6236 cm
Q
q
1 0 0 1 62.69291 431.6236 cm
Q
q
1 0 0 1 62.69291 233.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 186 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Short answer: As a container.) Tj T* ET
Q
Q
q
1 0 0 1 20 144 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .616098 Tw (If you have to ask, you probably don't need it. But, a lot of Digital Signal Processing \(DSP\) happens) Tj T* 0 Tw .43311 Tw (after data has been sampled in integer form and mixed as complex integers \(or sampled as complex) Tj T* 0 Tw (integers\). So data comes in over the wire as complex ints.) Tj T* ET
Q
Q
q
1 0 0 1 20 102 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.941984 Tw (For a lot of complex operations, integer math is much cheaper than floating point math. Adding,) Tj T* 0 Tw 2.424651 Tw (multiplying two complex ints or by a int constant can be significantly faster than the equivalent) Tj T* 0 Tw (complex floating point math.) Tj T* ET
Q
Q
q
1 0 0 1 20 60 cm
q
BT 1 0 0 1 0 26 Tm 3.214983 Tw 12 TL /F1 10 Tf 0 0 0 rg (For large data sets. ) Tj /F4 10 Tf (cx_t) Tj (<) Tj (int_2) Tj (> ) Tj /F1 10 Tf (is much smaller than the ) Tj /F4 10 Tf (complex_8 ) Tj /F1 10 Tf (\(half as large\) or) Tj T* 0 Tw .407633 Tw /F4 10 Tf (complex_16 ) Tj /F1 10 Tf (\(quarter as large\). If you are saving data to disk, or moving data through a system, the) Tj T* 0 Tw (extra savings in memory can be important for speed.) Tj T* ET
Q
Q
q
1 0 0 1 20 18 cm
q
BT 1 0 0 1 0 26 Tm 1.215366 Tw 12 TL /F1 10 Tf 0 0 0 rg (Many operations are exactly the same: getting the real or imaginary components, copying, adding,) Tj T* 0 Tw 1.885366 Tw (subtracting, multiplying complex ints. Division will work, but it usually doesn't make sense. Some) Tj T* 0 Tw (operations still make sense \(like ) Tj /F4 10 Tf (mag2) Tj /F1 10 Tf (\), but they can roll-over quickly, caveat emptor.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In general, complex integers are very useful for a limited set of operations.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 233.6236 cm
Q
q
1 0 0 1 62.69291 227.6236 cm
Q
q
1 0 0 1 62.69291 227.6236 cm
Q
q
1 0 0 1 62.69291 215.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why do you not use C++ STL complex numbers?) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 215.6236 cm
Q
q
1 0 0 1 62.69291 209.6236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 111.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Short answer: speed and interface) Tj T* ET
Q
Q
q
1 0 0 1 20 69.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .032339 Tw (One main reason is that the C++ STL complex template doesn't allow setting just a real component or) Tj T* 0 Tw .67436 Tw (an imaginary component: you have to create a brand new complex with the new component, or use) Tj T* 0 Tw (methods for everything:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F4 10 Tf 0 0 0 rg ( // C++ STL complex) Tj T* ( complex) Tj (<) Tj (float) Tj (>) Tj ( a\(1.2, 3.4\);) Tj T* ( a.real = 77.7;     // DOESN'T COMPILE) Tj T* ( a.real\(\) = 77.7;   // May compile if using gcc?) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R101': class PDFStream 
101 0 obj
% page stream
<< /Length 5654 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 552.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 163.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg ( a.real\(77.7\);      // May compile?) Tj T*  T* (complex) Tj (<) Tj (float) Tj (>) Tj ( newa\(77.7, a.imag\(\)\);  // Have to create brand new) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 125.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.09229 Tw (For people with experience with FORTRAN complex, this is very non-intuitive. The complex values) Tj T* 0 Tw (are much to manipulate when can set the components individually:) Tj T* ET
Q
Q
q
1 0 0 1 20 68 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (cx_t) Tj (<) Tj (int_1) Tj (>) Tj ( a\(1,2\);) Tj T* (a.re = 7;   // change the real component) Tj T* (a.im = 15;  // change the imaginary component) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 18 cm
q
BT 1 0 0 1 0 26 Tm 3.185366 Tw 12 TL /F1 10 Tf 0 0 0 rg (Another major reason is speed: The X-Midas baseline \(a DSP framework\) did an experiment) Tj T* 0 Tw 1.114651 Tw (sometime ago comparing the speed of C's complex, C++ STL complex, and a similar ) Tj /F4 10 Tf (cx_t ) Tj /F1 10 Tf (class,) Tj T* 0 Tw (and saw some major impacts of having to create new complex temporaries all the time: it was slower.) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Because we care about speed and the interface, Picklingtools has it's own ) Tj /F4 10 Tf (cx_t ) Tj /F1 10 Tf (type.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 552.6236 cm
Q
q
1 0 0 1 62.69291 546.6236 cm
Q
q
1 0 0 1 62.69291 546.6236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 454.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 454.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Are C++ STL complex and PicklingTools complex types compatible?) Tj T* ET
Q
Q
q
1 0 0 1 23 436.7575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Short answer: They should be layout compatible.) Tj T* ET
Q
Q
q
1 0 0 1 23 394.7575 cm
q
BT 1 0 0 1 0 26 Tm .834431 Tw 12 TL /F1 10 Tf 0 0 0 rg (If you have an array of C++ STL complexes, you should be able to go ) Tj /F4 10 Tf (cx_t ) Tj /F1 10 Tf (types and vice-verse) Tj T* 0 Tw .853984 Tw (because they should be layout compatible \(i.e., a struct with a real and imaginary component\). For) Tj T* 0 Tw (example, to zero the imaginary component of every element of a vector:) Tj T* ET
Q
Q
q
1 0 0 1 23 301.5575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F4 10 Tf 0 0 0 rg (vector) Tj (<) Tj (complex) Tj (<) Tj (float) Tj (>) Tj ( ) Tj (>) Tj ( a = ... some big array ...;) Tj T*  T* (complex_8 *ap = reinterpret_cast) Tj (<) Tj (complex_8*) Tj (>) Tj (\() Tj (&) Tj (a[0]\);) Tj T* (for \(int ii=0; ii) Tj (<) Tj (a.size\(\); ii++\) {) Tj T* (    ap[ii].im = 0;  // zero the imaginary component) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 251.5575 cm
q
BT 1 0 0 1 0 26 Tm .361488 Tw 12 TL /F1 10 Tf 0 0 0 rg (If you like the complex class of the STL C++, great, use it. However, if you need to put something in) Tj T* 0 Tw .30686 Tw (a Val, it needs to be a ) Tj /F4 10 Tf (cx_t ) Tj /F1 10 Tf (or ) Tj /F4 10 Tf (complex_8 ) Tj /F1 10 Tf (\(same as ) Tj /F4 10 Tf (cx_t) Tj (<) Tj (real_4) Tj (>) Tj /F1 10 Tf (\) or ) Tj /F4 10 Tf (complex_16 ) Tj /F1 10 Tf (\(same as) Tj T* 0 Tw /F4 10 Tf (cx_t) Tj (<) Tj (real_8) Tj (>) Tj /F1 10 Tf (\):) Tj T* ET
Q
Q
q
1 0 0 1 23 206.3575 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F4 10 Tf 0 0 0 rg (complex) Tj (<) Tj (int_1) Tj (>) Tj ( a;) Tj T* (Val v = cx_t) Tj (<) Tj (int_1) Tj (>) Tj (\(a.real\(\), a.imag\(\)\); // Copy to a val) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 180.3575 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The only way to carry an array of complex ints in a Val is with the ) Tj /F4 10 Tf (Array ) Tj /F1 10 Tf (class from PicklingTools:) Tj T* ET
Q
Q
q
1 0 0 1 23 15.15748 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 156 re B*
Q
q
BT 1 0 0 1 0 134 Tm 12 TL /F4 10 Tf 0 0 0 rg (// Create an Array of 10 complex ints) Tj T* (Array) Tj (<) Tj (cx_t) Tj (<) Tj (int_1) Tj (>) Tj ( ) Tj (>) Tj ( a\(10\);) Tj T* (a.fill\(cx_t) Tj (<) Tj (int_1) Tj (>) Tj (\(0,0\)\);) Tj T*  T* (// Copy into a Val) Tj T* (Val v = a;) Tj T*  T* (// Get a reference from the Val) Tj T* (Array) Tj (<) Tj (cx_t) Tj (<) Tj (int_1) Tj (>) Tj ( ) Tj (>) Tj (&) Tj ( aref = v;) Tj T* (for \(int ii=0; ii) Tj (<) Tj (aref.length\(\); ii++\) {) Tj T* (    aref[ii].re = 1;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -22.84252 cm
q
BT 1 0 0 1 0 14 Tm 3.219318 Tw 12 TL /F1 10 Tf 0 0 0 rg (In general, you should be able to reinterpret cast from a ) Tj /F4 10 Tf (cx_t) Tj (<) Tj (T) Tj (> ) Tj /F1 10 Tf (to a ) Tj /F4 10 Tf (complex) Tj (<) Tj (T) Tj (> ) Tj /F1 10 Tf (and) Tj T* 0 Tw (vice-versa.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 76.86614 cm
Q
 
endstream
endobj
% 'R102': class PDFStream 
102 0 obj
% page stream
<< /Length 7102 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 681.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why do I care about complex ints?) Tj T* ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .36936 Tw (If you need them for DSP, complex ints are very important. Otherwise, they probably won't matter to) Tj T* 0 Tw (you too much.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .083988 Tw (Having said that, it may be useful to use the complex ints if you need a pair of integers. For example,) Tj T* 0 Tw .784692 Tw (if you have a graphing package with x and y co-ordinates, the real and imaginary components of a) Tj T* 0 Tw (complex int can be used as the the x and y components for a point on the screen.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 681.0236 cm
Q
q
1 0 0 1 62.69291 648.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (M2k) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 636.0236 cm
Q
q
1 0 0 1 62.69291 636.0236 cm
Q
q
1 0 0 1 62.69291 474.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why is there an M2k area provided in the PicklingTools distribution?) Tj T* ET
Q
Q
q
1 0 0 1 23 129 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (To provide the better OpalDaemon and OpalSocketMsg) Tj T* ET
Q
Q
q
1 0 0 1 23 51 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL 2.415366 Tw (The "baseline" OpalDaemon and OpalSocketMsg "work", but are limited to exactly one type of) Tj T* 0 Tw .650814 Tw (serialization when running. The OpalPythonDaemon \(a newer version of the OpalDaemon meant to) Tj T* 0 Tw .200697 Tw (replace the OpalDaemon\) gives the user adaptive serialization: the ability dynamically to decide on a) Tj T* 0 Tw 1.786412 Tw (per connection basis the type of serialization. Another feature is that components can utilize the) Tj T* 0 Tw 1.392126 Tw (Python Pickling Protocol 0 and 2: this gives more options for serialization and allows Python-only) Tj T* 0 Tw (clients to talk to the OpalPythonDaemon easily.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.64372 Tw (Strictly speaking, these components \(OpalPythonDaemon and OpalSocketMsg\) probably should) Tj T* 0 Tw .937485 Tw (have gone into the Midas 2k baseline at some point, but since Midas 2k development and support) Tj T* 0 Tw 1.71248 Tw (was suspended, the OpalPythonDaemon and OpalPythonSocket languish in the M2k area of the) Tj T* 0 Tw (PicklingTools.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 468.0236 cm
Q
q
1 0 0 1 62.69291 372.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 81 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 81 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is the current status of the M2k area?) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 3.29152 Tw (As of PicklingTools 1.3.2, the M2k area has been cleaned up. The OpalPythonDaemon and) Tj T* 0 Tw 2.22664 Tw (OpalPythonSocketMsg both support NumPy. OrderedDictionaries and Tuples can be processed,) Tj T* 0 Tw 2.470542 Tw (even though M2k has no support for them. The loader for Python Pickling 0 and 2 in m2k is) Tj T* 0 Tw (significantly better \(faster, cleaner, robust\).) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.772485 Tw (After many long debates, we have currently decided NOT to use the XML tools to support XML) Tj T* 0 Tw (natively in M2k \(although if someone really cares, we can\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 366.0236 cm
Q
q
1 0 0 1 62.69291 312.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Does M2k work with OCSerialization?) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .83436 Tw (It has worked with OC Serialization for some time, but has recently been updated to behave better) Tj T* 0 Tw 1.058976 Tw (and work with large arrays. The OpalPythonDaemon and PythonOpalPythonTableWriter have both) Tj T* 0 Tw (been updated so they can handle very large \(over 4Gig\) data and strings.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 306.0236 cm
Q
q
1 0 0 1 62.69291 222.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why doesn't very large data work with M2k?) Tj T* ET
Q
Q
q
1 0 0 1 23 51 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Short Answer: No one ever thought we'd have Vectors or strings over 4Gig.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm .897765 Tw 12 TL /F1 10 Tf 0 0 0 rg (In order for very large files to work, a few changes have to be made to MITE/M2k: newer versions) Tj T* 0 Tw 22.20622 Tw (should have these changes, but essentially, the ) Tj /F4 10 Tf (int_u4s ) Tj /F1 10 Tf (of) Tj T* 0 Tw 1.966342 Tw /F4 10 Tf (Vector`) Tj ( ) Tj (need) Tj ( ) Tj (to) Tj ( ) Tj (changed) Tj ( ) Tj (to) Tj ( ) Tj (``size_t ) Tj /F1 10 Tf (and the ) Tj /F4 10 Tf (unsigned) Tj ( ) Tj (len ) Tj /F1 10 Tf (of ) Tj /F4 10 Tf (oceasystring.h) Tj T* 0 Tw /F1 10 Tf (needs to be an ) Tj /F4 10 Tf (size_t ) Tj /F1 10 Tf (as well.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 222.0236 cm
Q
q
1 0 0 1 62.69291 189.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (X-Midas) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 177.0236 cm
Q
q
1 0 0 1 62.69291 177.0236 cm
Q
q
1 0 0 1 62.69291 81.02362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 81 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 81 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is the difference between PicklingTools and PTOOLS?) Tj T* ET
Q
Q
q
1 0 0 1 23 63 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (PTOOLS is an X-Midas option tree packaged with the PicklingTools distribution.) Tj T* ET
Q
Q
q
1 0 0 1 23 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .758935 Tw (PTOOLS is just a repackaging of all the C++ and Python code in the C++ and Python areas of the) Tj T* 0 Tw 4.579213 Tw (PicklingTools distribution. This packaging makes it easy for X-Midas users to use all the) Tj T* 0 Tw (PicklingTools features in X-Midas.) Tj T* ET
Q
Q
q
1 0 0 1 23 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In particular) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
 
endstream
endobj
% 'R103': class PDFStream 
103 0 obj
% page stream
<< /Length 6660 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 688.8661 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 63.15748 Tm  T* ET
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 60 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 6.592196 Tw (XMPY scripts can use the Python MidasTalker, MidasServer, MidasYeller and) Tj T* 0 Tw (MidasListener easily \(found in python subdir of PTOOLS\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 54 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 6.86622 Tw (X-Midas C++ primitives can easily write Midastalker, MidasServer, Midasyeller,) Tj T* 0 Tw 1.097251 Tw (MidasListener. They also support the Tab/Arr/Val abstractions so C++ primitives can feel) Tj T* 0 Tw (like they are using Python.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Python C Extension modules get built for you) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 682.8661 cm
Q
q
1 0 0 1 62.69291 583.6661 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 84.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 84.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How do I use the PTOOLS option tree?) Tj T* ET
Q
Q
q
1 0 0 1 23 54.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.293735 Tw (Copy the ptools100 \(or whatever\) to your X-Midas option tree area. Then add and build it like) Tj T* 0 Tw (standard X-Midas option trees:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F4 10 Tf 0 0 0 rg (xm) Tj (>) Tj ( xmopt ptools /full/path/to/copy/ptools100  # must lower-case path) Tj T* (xm) Tj (>) Tj ( xmp +ptools) Tj T* (xm) Tj (>) Tj ( xmbopt ptools) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 583.6661 cm
Q
q
1 0 0 1 62.69291 577.6661 cm
Q
q
1 0 0 1 62.69291 565.6661 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Watch out for CAPITAL LETTERS in the Pathname: X-Midas doesn't like!) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 565.6661 cm
Q
q
1 0 0 1 62.69291 559.6661 cm
Q
q
1 0 0 1 62.69291 559.6661 cm
Q
q
1 0 0 1 62.69291 457.6661 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 87 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 87 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How do I write a C++ primitive or an XMPY script?) Tj T* ET
Q
Q
q
1 0 0 1 23 69 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Look for an example in the option tree) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.121984 Tw (There are plenty of example primitives in the "host" area \(with corresponding explain pages in the) Tj T* 0 Tw 1.87881 Tw ("exp" area\). The only potential gotcha for a primitive: make sure you look at the "cfg" area and) Tj T* 0 Tw (imitate how "primitives.cfg" sets it options.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.232651 Tw (There are plenty of Python examples in the "python" area that should look suspiciously like all) Tj T* 0 Tw (example from the Python piece of the PicklingTools distribution.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 457.6661 cm
Q
q
1 0 0 1 62.69291 424.6661 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (SerialLib) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 412.6661 cm
Q
q
1 0 0 1 62.69291 412.6661 cm
Q
q
1 0 0 1 62.69291 358.6661 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is seriallib?) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.273555 Tw (Seriallib is a Python library with utilities for converting back and forth between Python dictionaries) Tj T* 0 Tw 1.782651 Tw (and one of three other formats: Windows .ini files, Key-Value strings, or \(in some limited cases\)) Tj T* 0 Tw (Python objects.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 352.6661 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 260.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 260.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How do I convert between .ini files and Python dicts?) Tj T* ET
Q
Q
q
1 0 0 1 23 230.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.01152 Tw (For converting back and forth between Windows .ini files and Python dictionaries, the important) Tj T* 0 Tw (routines are:) Tj T* ET
Q
Q
q
1 0 0 1 23 18.53978 cm
q
q
.940425 0 0 .940425 0 0 cm
q
1 0 0 1 6.6 7.018107 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 474 216 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 194 Tm /F4 10 Tf 12 TL (dict_to_ini\(d\)) Tj T* (    Given a dictionary, return a ConfigParser instance reflecting the dict's) Tj T* (    structure.) Tj T*  T* (    Currently only handles dicts that look like .ini files; that is:) Tj T*  T* (    { 'section name 1': { k1: v1, ..., kN: vN},) Tj T* (      'section name 2': ...) Tj T* (      ...) Tj T* (    }) Tj T*  T* (    N.B.: The returned ConfigParser will store the values as they were given,) Tj T* (    NOT convert them to strings. This means that you will need to do 'raw') Tj T* (    gets to bypass the value interpolation logic that assumes all values are) Tj T* (    strings.  getint\(\) and getfloat\(\) will also fail on non-string) Tj T* (    values. \(This caution applies to Python 2.4; it is unknown whether it) Tj T* (    still applies in newer Pythons.\)) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R104': class PDFStream 
104 0 obj
% page stream
<< /Length 4686 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 653.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 98.2 Tm  T* ET
q
1 0 0 1 23 23 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL  T*  T* (ini_to_dict\(ini_file\)) Tj T* (    Given a ConfigParser instance or pathname to an INI-formatted file,) Tj T* (    return a dict mapping of the ConfigParser. Each section becomes a) Tj T* (    top-level key.) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Simply import seriallib and do a help to see these help pages.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 647.8236 cm
Q
q
1 0 0 1 62.69291 273.5302 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 359.2934 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 359.2934 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How do I convert between Key-Value Strings and Python dicts?) Tj T* ET
Q
Q
q
1 0 0 1 23 329.2934 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.89998 Tw (For converting back and forth between Key-Value Strings and Python dictionaries, the important) Tj T* 0 Tw (routines are:) Tj T* ET
Q
Q
q
1 0 0 1 23 23 cm
q
q
.917261 0 0 .917261 0 0 cm
q
1 0 0 1 6.6 7.195332 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 486 324 re B*
Q
q
BT 1 0 0 1 0 302 Tm 12 TL /F4 10 Tf 0 0 0 rg (kvstring_to_dict\(s, sep=':'\)) Tj T* (    Given a multi-line string containing key-value pairs, return a flat dict) Tj T* (    representing the same relationships. Whitespace around the separator is) Tj T* (    ignored.) Tj T*  T* (    Expects one entry per line in the input.) Tj T*  T* (    Note that all keys and values are interpreted as strings upon return.) Tj T*  T* (dict_to_kvstring\(d, sep=':'\)) Tj T* (    Given a flat dictionary, return a simple key-value string. Each entry) Tj T* (    in the dict gets one line in the output.) Tj T*  T* (    Examples:) Tj T*  T* (      { 'key1': 'the first value',) Tj T* (        2: 'the second value' }) Tj T*  T* (        -) Tj (>) Tj  T* (      'key1:the first value\\n2:the second value') Tj T*  T*  T* (    If optional 'sep' is given, it is used to separate keys and values.  In any) Tj T* (    case, 'sep' should probably not be in the string representation of any key!) Tj T*  T* (    If the input dict is not flat, the behavior is undefined.) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Simply import seriallib and do a help to see these help pages.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 267.5302 cm
Q
q
1 0 0 1 62.69291 183.5302 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What else can seriallib do?) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.193984 Tw (Using "dict_to_instance", you can use a dictionary to assign into the attributes of an object. Using) Tj T* 0 Tw .12784 Tw ("instance_to_dict", you can snapshot the given object as a dictionary; The resulting dictionary can be) Tj T* 0 Tw (used as a memento for the important state.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.234987 Tw (Take a look at the help pages for those two routines. There are also a number of helper routines) Tj T* 0 Tw (related to those two routines.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 183.5302 cm
Q
q
1 0 0 1 62.69291 150.5302 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Serialization) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 138.5302 cm
Q
q
1 0 0 1 62.69291 138.5302 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 46.66407 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 46.66407 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What is serialization?) Tj T* ET
Q
Q
q
1 0 0 1 23 4.664067 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.077984 Tw (The process of turning a complex data structure that spans memory \(such as strings, lists, tables\)) Tj T* 0 Tw .161412 Tw (into a self-encapsulated compact, storable structure. The entire structure is captured in a small piece) Tj T* 0 Tw 4.633318 Tw (of memory. This capture can be sent across a socket, saved on disk, saved in shared) Tj T* 0 Tw ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R105': class PDFStream 
105 0 obj
% page stream
<< /Length 9764 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 705.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 47 Tm  T* ET
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (memory.) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.027209 Tw (The whole point of serialization is to "save" a complex structure in a form that can be turned back) Tj T* 0 Tw (\(deserialized\) into the original complex data structure at a future date.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Remember, pickling is another word for serialization in the "Python world".) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 699.0236 cm
Q
q
1 0 0 1 62.69291 609.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why are there so many different kinds of serialization options?) Tj T* ET
Q
Q
q
1 0 0 1 23 57 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (PicklingTools needs to be able to support multiple systems.) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .341098 Tw (You may never use M2k serialization \(you may not even not even know what M2k is\), but those that) Tj T* 0 Tw (do use it find it critical. PicklingTools gives you many different options for flexibility.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .395984 Tw (The defaults usually work perfectly well without much work \(usually Pickling Protocol 0\) but it's good) Tj T* 0 Tw (to know your different options \(see below\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 603.0236 cm
Q
q
1 0 0 1 62.69291 121.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 467 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 467 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What are all the different serialization options?) Tj T* ET
Q
Q
q
1 0 0 1 23 449 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (From Python \(or XMPY\): In order, from fastest to slowest) Tj T* ET
Q
Q
q
1 0 0 1 23 443 cm
Q
q
1 0 0 1 23 317 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 120 cm
Q
q
1 0 0 1 20 120 cm
Q
q
1 0 0 1 20 108 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (OCSerialization \(need Python C Extension module from this release\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 102 cm
Q
q
1 0 0 1 20 90 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Python Pickling Protocol 2) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 72 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Python Pickling Protocol 0) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 54 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Python Dictionaries in textual form \(eg., "{'a':1}"\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (OpalTables in textual form \(eg., "{ a=1 }'\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (JSON in textual form) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (XML in textual form) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 23 317 cm
Q
q
1 0 0 1 23 251 cm
q
BT 1 0 0 1 0 50 Tm .032765 Tw 12 TL /F1 10 Tf 0 0 0 rg (Format \(0\) is only available as of PicklingTools 1.6.0, and needs to be compiled specially so it can be) Tj T* 0 Tw .857318 Tw (imported \() Tj /F3 10 Tf (import pyocser) Tj /F1 10 Tf (\). Formats \(1\)-\(3\) are native to Python. \(4\) is supported by doing a simple) Tj T* 0 Tw 1.243984 Tw /F3 10 Tf (import opalfile.py) Tj /F1 10 Tf (. Note that Python doesn't support all protocols because it tends to be limited by) Tj T* 0 Tw .601235 Tw (whatever the "native" Python supports. \(5\) is built-in \() Tj /F3 10 Tf (import json) Tj /F1 10 Tf (\). \(6\) is supported by the new tools) Tj T* 0 Tw (available in PicklingTools 1.3.1: see the XML tools document for more discussion.) Tj T* ET
Q
Q
q
1 0 0 1 23 233 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (From C++: In order, from fastest to slowest) Tj T* ET
Q
Q
q
1 0 0 1 23 227 cm
Q
q
1 0 0 1 23 83 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 138 cm
Q
q
1 0 0 1 20 138 cm
Q
q
1 0 0 1 20 126 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (OpenContainers serialization \(binary\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 120 cm
Q
q
1 0 0 1 20 108 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Python Pickling Protocol 2 \(binary\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 102 cm
Q
q
1 0 0 1 20 90 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (M2k Serialization \(binary\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 72 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Python Pickling Protocol 0 \(some consider it binary\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 54 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Python Dictionaries in textual form \(eg., "{'a':1}"\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (OpalTables in textual form \(eg., "{ a=1 }'\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (JSON in textual form \(eg., ) Tj /F3 10 Tf ({ "a":1 }) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (8.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (XML in textual form) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 23 83 cm
Q
q
1 0 0 1 23 67 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (From M2k: The M2K OpalPythonDaemon understands all binary) Tj T* ET
Q
Q
q
1 0 0 1 23 40 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.349979 Tw (serializations above plus the OpalTable ASCII serialization. NumPy is supported as of) Tj T* 0 Tw (PicklingTools 1.3.2.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 24 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (From X-Midas: The MidasServer/Talker/Yeller/Listener support all binary) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.084983 Tw (serializations, plus "raw" data \(any string\). From the raw data, one can easily construct tables) Tj T* 0 Tw (using the ValReader and OpalReader classes.) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 115.0236 cm
Q
q
1 0 0 1 62.69291 103.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Why would I choose one serialization protocol over another?) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R106': class PDFStream 
106 0 obj
% page stream
<< /Length 8708 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 573.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 179 Tm  T* ET
q
1 0 0 1 23 165 cm
q
BT 1 0 0 1 0 14 Tm 1.001318 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Depends on what you need. Frequently, the choice of clients and servers seems to) Tj T* 0 Tw (dictate what protocol you use.) Tj T* ET
Q
Q
q
1 0 0 1 23 123 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .198555 Tw (If you care about speed, use OpenContainers serialization. It tends to beat most serializations speed) Tj T* 0 Tw .639488 Tw (by at least 15%. That assumes that all your clients and servers are in C++, or that you can use the) Tj T* 0 Tw (Python C Extension module 'pyocser'.) Tj T* ET
Q
Q
q
1 0 0 1 23 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.048221 Tw (Any \(older\) Python clients or servers in the mix tend to dictate using Python Pickling Protocol 2. If) Tj T* 0 Tw (you are stuck with an older version of Python, Python Pickling Protocol 0 may be your only choice.) Tj T* ET
Q
Q
q
1 0 0 1 23 63 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .186655 Tw (If you save a lot of small things to disk, text versions of dictionaries are much easier to look at a later) Tj T* 0 Tw (date.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .266651 Tw (There's no reason you can't mix and match protocols as well: all C++ components can communicate) Tj T* 0 Tw .685366 Tw (with OpenContainers serialization, and any Python components in the mix can use Python Protocol) Tj T* 0 Tw 1.576647 Tw (2. The MidasTalker/Listener/etc default to using adaptive serialization, where each client sends a) Tj T* 0 Tw .707984 Tw (small header indicating what type of serialization THAT particular client is using: that makes it easy) Tj T* 0 Tw (to combine serializations in one system.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 567.0236 cm
Q
q
1 0 0 1 62.69291 339.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 213 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 213 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What's all this crazy "ArrayDisposition" stuff when I serialize or unserialized data?) Tj T* ET
Q
Q
q
1 0 0 1 23 183 cm
q
BT 1 0 0 1 0 14 Tm .475366 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (ArrayDisposition indicates how you serialize POD array data. The capabilities of your) Tj T* 0 Tw (Python typically dictate this.) Tj T* ET
Q
Q
q
1 0 0 1 23 141 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .49811 Tw (POD means "Plain Old Data" and usually refers to simple numeric types like int, float, real, complex) Tj T* 0 Tw .634269 Tw (\(anything that can be bit-blitted\). POD Array data is contiguous, homogeneous data. In the different) Tj T* 0 Tw (systems:) Tj T* ET
Q
Q
q
1 0 0 1 23 135 cm
Q
q
1 0 0 1 23 27 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 102 cm
Q
q
1 0 0 1 20 102 cm
Q
q
1 0 0 1 20 90 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (a.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (OpenContainers Arrays \(eg., ) Tj /F4 10 Tf (#include) Tj ( ) Tj ("ocarray.h") Tj ( ) Tj (Array) Tj ( ) Tj (a) Tj (<) Tj (real_8) Tj (>) Tj (;) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 84 cm
Q
q
1 0 0 1 20 72 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (b.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (M2k Vector \(eg., ) Tj /F4 10 Tf (#include) Tj ( ) Tj ("m2vector.h") Tj ( ) Tj (Vector) Tj ( ) Tj (d\(DOUBLE,) Tj ( ) Tj (10\);) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 66 cm
Q
q
1 0 0 1 20 54 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 6.22 0 Td (c.) Tj T* -6.22 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Python Numeric Arrays \(eg., ) Tj /F4 10 Tf (import) Tj ( ) Tj (Numeric;) Tj ( ) Tj (a) Tj ( ) Tj (=) Tj ( ) Tj (Numeric.array\(\)) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (d.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Python Array \(eg., ) Tj /F4 10 Tf (import) Tj ( ) Tj (array;) Tj ( ) Tj (a) Tj ( ) Tj (=) Tj ( ) Tj (array.array\(\)) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (e.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (X-Midas \(uses OpenContainers ) Tj /F4 10 Tf (Array) Tj (<) Tj (real_8) Tj (>) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 8.44 0 Td (f.) Tj T* -8.44 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (NumPy Arrays \(eg., ) Tj /F4 10 Tf (import) Tj ( ) Tj (numpy;) Tj ( ) Tj (a) Tj ( ) Tj (=) Tj ( ) Tj (numpy.array\([1,2,3]\)) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.314983 Tw (ArrayDisposition answers the question of HOW the POD array data is serialized. There are many) Tj T* 0 Tw (different options because not all Pythons support all options.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 333.0236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 241.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 241.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (How do I choose between the ArrayDispositions?) Tj T* ET
Q
Q
q
1 0 0 1 23 199.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.226905 Tw (All C++ components support all the different ArrayDispositions Array, Numeric, List or NumPy. It's) Tj T* 0 Tw 1.044985 Tw (really your Python that decides. If your entire system is in C++, AS_NUMPY is probably your best) Tj T* 0 Tw (choice \(as it's the most compatible and the fastest\).) Tj T* ET
Q
Q
q
1 0 0 1 23 181.1575 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The different options for ArrayDisposition are \(from fastest to slowest\):) Tj T* ET
Q
Q
q
1 0 0 1 23 175.1575 cm
Q
q
1 0 0 1 23 10.15748 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 153 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (AS_NUMPY or 4:) Tj T* ET
Q
Q
q
1 0 0 1 20 114 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 26 Tm .866647 Tw 12 TL /F1 10 Tf 0 0 0 rg (The new de-facto standard for handling arrays within the Python scientific communities is) Tj T* 0 Tw .318221 Tw (NumPy. It is still an external package which you ) Tj /F3 10 Tf (may ) Tj /F1 10 Tf (have to install manually, but it is very) Tj T* 0 Tw (common and easy to install.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 98 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (AS_PYTHON_ARRAY or 2:) Tj T* ET
Q
Q
q
1 0 0 1 20 71 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm 1.574269 Tw 12 TL /F1 10 Tf 0 0 0 rg (Python 2.2, 2.3 and certain versions of 2.4 ) Tj /F3 10 Tf (DO NOT ) Tj /F1 10 Tf (support the Python array modules) Tj T* 0 Tw (serialization of arrays, so you can't even use this option. Python 2.5 does.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 55 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (AS_NUMERIC or 0:) Tj T* ET
Q
Q
q
1 0 0 1 20 16 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 26 Tm .880651 Tw 12 TL /F1 10 Tf 0 0 0 rg (XMPY has Numeric built-in, but most versions of Python ) Tj /F3 10 Tf (DO NOT ) Tj /F1 10 Tf (come with this built in.) Tj T* 0 Tw 4.64498 Tw (You can always install the Numeric module, but it's complicated. From a speed) Tj T* 0 Tw (perspective, this is about as fast as AS_PYTHON_ARRAY.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (AS_LIST or 1:) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
 
endstream
endobj
% 'R107': class PDFStream 
107 0 obj
% page stream
<< /Length 7513 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 738.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 14 Tm  T* ET
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .002339 Tw (ALL versions of Python can serialize POD Data as Python lists. This is the default, but it can) Tj T* 0 Tw (be significantly slower than the other two.) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 732.0236 cm
Q
q
1 0 0 1 62.69291 618.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 99 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 99 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (What's the other option on serialization called PicklingIssues?) Tj T* ET
Q
Q
q
1 0 0 1 23 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 5.003984 Tw (If you use Python 2.3 and above, DO NOT WORRY ABOUT THIS! Set this option to) Tj T* 0 Tw (ABOVE_PYTHON_2_2 \(the default just about everywhere\) and don't waste any more brain cells.) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.254987 Tw (If you use Python version 2.2 _AND_ you use Pickling Protocol 2, you will have to set this to) Tj T* 0 Tw .392976 Tw (AS_PYTHON_2_2. Unfortunately, the Python 2.2 cPickle module serializes Python Pickling Protocol) Tj T* 0 Tw .32748 Tw (2 DIFFERENTLY than later Pythons. Stay away from AS_PYTHON_2_2 unless you absolutely have) Tj T* 0 Tw (to.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Some very important users still use Python 2.2 and that's the only reason we support this.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 612.0236 cm
Q
q
1 0 0 1 62.69291 330.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 267 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (8.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 267 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (When I serialized from X to Y, I lost information. Why?) Tj T* ET
Q
Q
q
1 0 0 1 23 237 cm
q
BT 1 0 0 1 0 14 Tm 1.199982 Tw 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Life is complex and not all structures \(M2k OpalValue OpenContainers Val, Python) Tj T* 0 Tw (values\) are 100% compatible.) Tj T* ET
Q
Q
q
1 0 0 1 23 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If you don't want to want to lose information, talk from like to like. For example:) Tj T* ET
Q
Q
q
1 0 0 1 23 213 cm
Q
q
1 0 0 1 23 159 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 48 cm
Q
q
1 0 0 1 20 36 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (have Python talk to Python using Pickling Protocol 0 or 2.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 30 cm
Q
q
1 0 0 1 20 18 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (have C++ talk to C++ using OpenContainers Serialization) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 12 cm
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (have M2k talk to M2k) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 23 159 cm
Q
q
1 0 0 1 23 117 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.265697 Tw (The problem is that M2k, Python, C++, X-Midas all have slightly different philosophies for their) Tj T* 0 Tw 1.155697 Tw (structures and serializations. And in some cases, information may be lost. Most information lost is) Tj T* 0 Tw (minor \(for example: int_4 becomes int_8\). Here are a few that might bite you:) Tj T* ET
Q
Q
q
1 0 0 1 23 101 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Python Pickling 0 or 2 to C++:) Tj T* ET
Q
Q
q
1 0 0 1 23 86 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Proxies only deserialize as proxies if there are multiple copies) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 70 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (M2k-) Tj (>) Tj (Anything else:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 60 Tm  T* ET
q
1 0 0 1 20 58 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Opalheaders: m2k serializes OpalHeaders EXACTLY like OpalTables,) Tj T* ET
Q
Q
q
1 0 0 1 20 43 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (so there is no way to distinguish them) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 20 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (OpalLink: Links in M2k are poorly done, and rarely used. Links) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .193314 Tw (become strings when serialized \(TODO: Maybe become Proxies?\) If you serialize Proxys to) Tj T* 0 Tw (M2k, that information is lost, and it just becomes another copy.) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 330.0236 cm
Q
q
1 0 0 1 62.69291 297.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Misc) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 285.0236 cm
Q
q
1 0 0 1 62.69291 285.0236 cm
Q
q
1 0 0 1 62.69291 105.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 165 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 165 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Where can I find some examples of X?) Tj T* ET
Q
Q
q
1 0 0 1 23 147 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Short Answer: ) Tj /F1 10 Tf (Look around the baseline.) Tj T* ET
Q
Q
q
1 0 0 1 23 117 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .559318 Tw (The PicklingTools baseline is littered with examples all over the place. The examples usually end in) Tj T* 0 Tw (either _test or _ex.) Tj T* ET
Q
Q
q
1 0 0 1 23 87 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.060814 Tw (The C++/Examples directory contains a fairly complex example demonstrating how to build a) Tj T* 0 Tw (threaded framework using PicklingTools.) Tj T* ET
Q
Q
q
1 0 0 1 23 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .034104 Tw (The C++ directory contains a number of files ..._ex.cc with examples of how to use the Socket clients) Tj T* 0 Tw (and servers.) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .946976 Tw (The C++/opencontainersXXX/tests directory contains code examples \(as well as expected outputs\)) Tj T* 0 Tw (for using the different OpenContainers classes.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .41997 Tw (The C++/opencontainersXXX/examples directory contains code examples for using OpenContainers) Tj T* 0 Tw (classes.) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
% 'R108': class PDFStream 
108 0 obj
% page stream
<< /Length 638 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 711.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 41 Tm  T* ET
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .696235 Tw (The Python directory contains a number of file ..._ex.py with examples of how to use socket clients) Tj T* 0 Tw (and servers.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.341976 Tw (The Xm/ptoolsXXX/host directory contains X-Midas primitives demonstrating how to write X-Midas) Tj T* 0 Tw (primitives using ptools.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 711.0236 cm
Q
 
endstream
endobj
% 'R109': class PDFPageLabels 
109 0 obj
% Document Root
<< /Nums [ 0
 110 0 R
 1
 111 0 R
 2
 112 0 R
 3
 113 0 R
 4
 114 0 R
 5
 115 0 R
 6
 116 0 R
 7
 117 0 R
 8
 118 0 R
 9
 119 0 R
 10
 120 0 R
 11
 121 0 R
 12
 122 0 R
 13
 123 0 R
 14
 124 0 R
 15
 125 0 R
 16
 126 0 R
 17
 127 0 R
 18
 128 0 R
 19
 129 0 R
 20
 130 0 R
 21
 131 0 R
 22
 132 0 R
 23
 133 0 R
 24
 134 0 R
 25
 135 0 R
 26
 136 0 R
 27
 137 0 R
 28
 138 0 R
 29
 139 0 R
 30
 140 0 R
 31
 141 0 R
 32
 142 0 R
 33
 143 0 R
 34
 144 0 R
 35
 145 0 R
 36
 146 0 R
 37
 147 0 R
 38
 148 0 R ] >>
endobj
% 'R110': class PDFPageLabel 
110 0 obj
% None
<< /S /D
 /St 1 >>
endobj
% 'R111': class PDFPageLabel 
111 0 obj
% None
<< /S /D
 /St 2 >>
endobj
% 'R112': class PDFPageLabel 
112 0 obj
% None
<< /S /D
 /St 3 >>
endobj
% 'R113': class PDFPageLabel 
113 0 obj
% None
<< /S /D
 /St 4 >>
endobj
% 'R114': class PDFPageLabel 
114 0 obj
% None
<< /S /D
 /St 5 >>
endobj
% 'R115': class PDFPageLabel 
115 0 obj
% None
<< /S /D
 /St 6 >>
endobj
% 'R116': class PDFPageLabel 
116 0 obj
% None
<< /S /D
 /St 7 >>
endobj
% 'R117': class PDFPageLabel 
117 0 obj
% None
<< /S /D
 /St 8 >>
endobj
% 'R118': class PDFPageLabel 
118 0 obj
% None
<< /S /D
 /St 9 >>
endobj
% 'R119': class PDFPageLabel 
119 0 obj
% None
<< /S /D
 /St 10 >>
endobj
% 'R120': class PDFPageLabel 
120 0 obj
% None
<< /S /D
 /St 11 >>
endobj
% 'R121': class PDFPageLabel 
121 0 obj
% None
<< /S /D
 /St 12 >>
endobj
% 'R122': class PDFPageLabel 
122 0 obj
% None
<< /S /D
 /St 13 >>
endobj
% 'R123': class PDFPageLabel 
123 0 obj
% None
<< /S /D
 /St 14 >>
endobj
% 'R124': class PDFPageLabel 
124 0 obj
% None
<< /S /D
 /St 15 >>
endobj
% 'R125': class PDFPageLabel 
125 0 obj
% None
<< /S /D
 /St 16 >>
endobj
% 'R126': class PDFPageLabel 
126 0 obj
% None
<< /S /D
 /St 17 >>
endobj
% 'R127': class PDFPageLabel 
127 0 obj
% None
<< /S /D
 /St 18 >>
endobj
% 'R128': class PDFPageLabel 
128 0 obj
% None
<< /S /D
 /St 19 >>
endobj
% 'R129': class PDFPageLabel 
129 0 obj
% None
<< /S /D
 /St 20 >>
endobj
% 'R130': class PDFPageLabel 
130 0 obj
% None
<< /S /D
 /St 21 >>
endobj
% 'R131': class PDFPageLabel 
131 0 obj
% None
<< /S /D
 /St 22 >>
endobj
% 'R132': class PDFPageLabel 
132 0 obj
% None
<< /S /D
 /St 23 >>
endobj
% 'R133': class PDFPageLabel 
133 0 obj
% None
<< /S /D
 /St 24 >>
endobj
% 'R134': class PDFPageLabel 
134 0 obj
% None
<< /S /D
 /St 25 >>
endobj
% 'R135': class PDFPageLabel 
135 0 obj
% None
<< /S /D
 /St 26 >>
endobj
% 'R136': class PDFPageLabel 
136 0 obj
% None
<< /S /D
 /St 27 >>
endobj
% 'R137': class PDFPageLabel 
137 0 obj
% None
<< /S /D
 /St 28 >>
endobj
% 'R138': class PDFPageLabel 
138 0 obj
% None
<< /S /D
 /St 29 >>
endobj
% 'R139': class PDFPageLabel 
139 0 obj
% None
<< /S /D
 /St 30 >>
endobj
% 'R140': class PDFPageLabel 
140 0 obj
% None
<< /S /D
 /St 31 >>
endobj
% 'R141': class PDFPageLabel 
141 0 obj
% None
<< /S /D
 /St 32 >>
endobj
% 'R142': class PDFPageLabel 
142 0 obj
% None
<< /S /D
 /St 33 >>
endobj
% 'R143': class PDFPageLabel 
143 0 obj
% None
<< /S /D
 /St 34 >>
endobj
% 'R144': class PDFPageLabel 
144 0 obj
% None
<< /S /D
 /St 35 >>
endobj
% 'R145': class PDFPageLabel 
145 0 obj
% None
<< /S /D
 /St 36 >>
endobj
% 'R146': class PDFPageLabel 
146 0 obj
% None
<< /S /D
 /St 37 >>
endobj
% 'R147': class PDFPageLabel 
147 0 obj
% None
<< /S /D
 /St 38 >>
endobj
% 'R148': class PDFPageLabel 
148 0 obj
% None
<< /S /D
 /St 39 >>
endobj
xref
0 149
0000000000 65535 f
0000000113 00000 n
0000000258 00000 n
0000000423 00000 n
0000000598 00000 n
0000000779 00000 n
0000000952 00000 n
0000001171 00000 n
0000001470 00000 n
0000001749 00000 n
0000002030 00000 n
0000002218 00000 n
0000002498 00000 n
0000002778 00000 n
0000003058 00000 n
0000003338 00000 n
0000003618 00000 n
0000003899 00000 n
0000004180 00000 n
0000004461 00000 n
0000004742 00000 n
0000005023 00000 n
0000005304 00000 n
0000005585 00000 n
0000005879 00000 n
0000006112 00000 n
0000006414 00000 n
0000006695 00000 n
0000006976 00000 n
0000007257 00000 n
0000007538 00000 n
0000007819 00000 n
0000008100 00000 n
0000008381 00000 n
0000008662 00000 n
0000008956 00000 n
0000009181 00000 n
0000009483 00000 n
0000009764 00000 n
0000010045 00000 n
0000010326 00000 n
0000010608 00000 n
0000010890 00000 n
0000011172 00000 n
0000011454 00000 n
0000011736 00000 n
0000012018 00000 n
0000012300 00000 n
0000012582 00000 n
0000012864 00000 n
0000013024 00000 n
0000013322 00000 n
0000013448 00000 n
0000013625 00000 n
0000013807 00000 n
0000013986 00000 n
0000014205 00000 n
0000014439 00000 n
0000014671 00000 n
0000014886 00000 n
0000015103 00000 n
0000015341 00000 n
0000015561 00000 n
0000015809 00000 n
0000016021 00000 n
0000016201 00000 n
0000016385 00000 n
0000016571 00000 n
0000016761 00000 n
0000016910 00000 n
0000017358 00000 n
0000023683 00000 n
0000031972 00000 n
0000037826 00000 n
0000044417 00000 n
0000051708 00000 n
0000056635 00000 n
0000062386 00000 n
0000069159 00000 n
0000073978 00000 n
0000079258 00000 n
0000084653 00000 n
0000090914 00000 n
0000096803 00000 n
0000101785 00000 n
0000108071 00000 n
0000114729 00000 n
0000120902 00000 n
0000126911 00000 n
0000133001 00000 n
0000139266 00000 n
0000145177 00000 n
0000150913 00000 n
0000157007 00000 n
0000162097 00000 n
0000167804 00000 n
0000174932 00000 n
0000181974 00000 n
0000188416 00000 n
0000195555 00000 n
0000206661 00000 n
0000214568 00000 n
0000220323 00000 n
0000227526 00000 n
0000234287 00000 n
0000239074 00000 n
0000248939 00000 n
0000257748 00000 n
0000265362 00000 n
0000266104 00000 n
0000266761 00000 n
0000266840 00000 n
0000266919 00000 n
0000266998 00000 n
0000267077 00000 n
0000267156 00000 n
0000267235 00000 n
0000267314 00000 n
0000267393 00000 n
0000267472 00000 n
0000267552 00000 n
0000267632 00000 n
0000267712 00000 n
0000267792 00000 n
0000267872 00000 n
0000267952 00000 n
0000268032 00000 n
0000268112 00000 n
0000268192 00000 n
0000268272 00000 n
0000268352 00000 n
0000268432 00000 n
0000268512 00000 n
0000268592 00000 n
0000268672 00000 n
0000268752 00000 n
0000268832 00000 n
0000268912 00000 n
0000268992 00000 n
0000269072 00000 n
0000269152 00000 n
0000269232 00000 n
0000269312 00000 n
0000269392 00000 n
0000269472 00000 n
0000269552 00000 n
0000269632 00000 n
0000269712 00000 n
0000269792 00000 n
trailer
<< /ID 
 % ReportLab generated PDF document -- digest (http://www.reportlab.com) 
 [(\014\251Rf\233\022\245B\017r\266x]\314\334\332) (\014\251Rf\233\022\245B\017r\266x]\314\334\332)] 

 /Info 50 0 R
 /Root 49 0 R
 /Size 149 >>
startxref
269841
%%EOF
